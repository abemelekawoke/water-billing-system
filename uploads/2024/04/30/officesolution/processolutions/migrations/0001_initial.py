# Generated by Django 3.1 on 2020-08-28 06:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_currentuser.db.models.fields
import django_currentuser.middleware


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WaterSupplyPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField()),
                ('Tasks', models.CharField(max_length=150)),
                ('Measurement', models.CharField(max_length=150)),
                ('Month', models.DateField()),
                ('First_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Second_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Third_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Forth_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Total_budget', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Planned_at', models.DateTimeField(auto_now=True, verbose_name='Planned at')),
                ('Planned_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WaterSupplyPerformed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Quarter', models.CharField(choices=[('First', 'First Quarter'), ('Second', 'Second Quarter'), ('Third', 'Third Quarter'), ('Forth', 'Forth Quarter')], max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Planned_tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='processolutions.watersupplyplan')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by7', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by7', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Water Supply Performed',
                'verbose_name_plural': 'Water Supply Performed',
            },
        ),
        migrations.CreateModel(
            name='StockManagement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Name', models.CharField(max_length=150)),
                ('Inch', models.PositiveIntegerField()),
                ('Model', models.CharField(max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Individual_price', models.PositiveIntegerField()),
                ('Total_price', models.PositiveIntegerField()),
                ('Material_status', models.CharField(max_length=150)),
                ('Remark', models.CharField(blank=True, max_length=150)),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by5', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by5', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stock Management',
                'verbose_name_plural': 'Stock Management',
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('First_name', models.CharField(max_length=150)),
                ('Father_name', models.CharField(max_length=150)),
                ('Last_name', models.CharField(max_length=150)),
                ('Educational_level', models.CharField(max_length=150)),
                ('Position', models.CharField(max_length=150)),
                ('Employee_status', models.CharField(max_length=150)),
                ('Contact_number', models.CharField(max_length=150)),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by4', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by4', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PotableWaterRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Full_name', models.CharField(max_length=150)),
                ('Address', models.CharField(max_length=150)),
                ('Kebele', models.CharField(max_length=150)),
                ('House_number', models.CharField(max_length=150)),
                ('Phone_number', models.CharField(max_length=150)),
                ('Place', models.CharField(max_length=150)),
                ('Service_type', models.CharField(max_length=150)),
                ('Line_joined', models.CharField(max_length=150)),
                ('Water_supply', models.TextField(blank=True, default='To Income Officer')),
                ('Income_office', models.TextField(blank=True, default='To Finance Officer')),
                ('Amount', models.PositiveIntegerField()),
                ('Cashier', models.TextField(blank=True, default='To the organization')),
                ('Requested_at', models.DateTimeField(auto_now=True, verbose_name='Requested at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by6', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by6', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlanningAndCustomerIssuePlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField()),
                ('Tasks', models.CharField(max_length=150)),
                ('Measurement', models.CharField(max_length=150)),
                ('Month', models.DateField()),
                ('First_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Second_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Third_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Forth_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Total_budget', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Planned_at', models.DateTimeField(auto_now=True, verbose_name='Planned at')),
                ('Planned_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by12', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by12', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlanningAndCustomerIssuePerformed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Quarter', models.CharField(choices=[('First', 'First Quarter'), ('Second', 'Second Quarter'), ('Third', 'Third Quarter'), ('Forth', 'Forth Quarter')], max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Planned_tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='processolutions.planningandcustomerissueplan')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by77', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by77', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Planning And Customer Issue Performed',
                'verbose_name_plural': 'Planning And Customer Issue Performed',
            },
        ),
        migrations.CreateModel(
            name='NameChangeRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Full_name', models.CharField(max_length=150)),
                ('Address', models.CharField(max_length=150)),
                ('Kebele', models.CharField(max_length=150)),
                ('Service_type', models.CharField(max_length=150)),
                ('House_number', models.CharField(max_length=150)),
                ('Phone_number', models.CharField(max_length=150)),
                ('Place', models.CharField(max_length=150)),
                ('Income_office', models.TextField(blank=True, default='To Finance Officer', max_length=250)),
                ('Amount', models.PositiveIntegerField()),
                ('Cashier', models.TextField(blank=True, default='To the bill process', max_length=250)),
                ('Bill_processor', models.TextField(blank=True, default='To the organization ', max_length=250)),
                ('Requested_at', models.DateTimeField(auto_now=True, verbose_name='Requested at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_bypp', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_bypp', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MaintenanceRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Full_name', models.CharField(max_length=150)),
                ('Address', models.CharField(blank=True, max_length=150)),
                ('Kebele', models.CharField(max_length=150)),
                ('Service_type', models.CharField(blank=True, choices=[('Residence', 'Residence'), ('Trade_organization', 'Trade organization'), ('Public_government', 'Public government')], max_length=150)),
                ('Simple_maintenance', models.PositiveIntegerField(blank=True, default=175)),
                ('Water_meter_transfer', models.PositiveIntegerField(blank=True, default=175)),
                ('Water_meter_change', models.PositiveIntegerField(blank=True)),
                ('Examine_or_clean_up', models.PositiveIntegerField(blank=True, default=40)),
                ('Water_meter_openning', models.PositiveIntegerField(blank=True, default=60)),
                ('Get_valve_change', models.PositiveIntegerField(blank=True)),
                ('For_waste', models.PositiveIntegerField(blank=True)),
                ('For_Digging', models.PositiveIntegerField(blank=True)),
                ('House_number', models.CharField(blank=True, max_length=150)),
                ('Phone_number', models.CharField(max_length=150)),
                ('Place', models.CharField(max_length=150)),
                ('Pipe_Quantity', models.PositiveIntegerField(blank=True)),
                ('Pipe_Single_price', models.PositiveIntegerField(blank=True)),
                ('Pipe_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('HDP_tube_Quantity', models.PositiveIntegerField(blank=True)),
                ('HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('HDP_tube_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Elbow_Quantity', models.PositiveIntegerField(blank=True)),
                ('Elbow_Single_price', models.PositiveIntegerField(blank=True)),
                ('Elbow_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Naples_Quantity', models.PositiveIntegerField(blank=True)),
                ('Naples_Single_price', models.PositiveIntegerField(blank=True)),
                ('Naples_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Reducer_Quantity', models.PositiveIntegerField(blank=True)),
                ('Reducer_Single_price', models.PositiveIntegerField(blank=True)),
                ('Reducer_inch', models.CharField(blank=True, choices=[('2 1/2 - 2', '2 1/2 - 2'), ('2 1/2 - 1 1/2', '2 1/2 - 1 1/2'), ('2 1/2 - 1', '2 1/2 - 1'), ('2 1/2 - 3/4', '2 1/2 - 3/4'), ('2 1/2 - 1/2', '2 1/2 - 1/2'), ('2 - 1 1/2', '2 - 1 1/2'), ('2 - 1', '2 - 1'), ('2 - 3/4', '2 - 3/4'), ('2 - 1/2', '2 - 1/2'), ('1 1/2 - 1', '1 1/2 - 1'), ('1 1/2 - 3/4', '1 1/2 - 3/4'), ('1 1/2 - 1/2', '1 1/2 - 1/2'), ('1 - 3/4', '1 - 3/4'), ('1 - 1/2', '1 - 1/2')], max_length=150)),
                ('Adapter_Quantity', models.PositiveIntegerField(blank=True)),
                ('Adapter_Single_price', models.PositiveIntegerField(blank=True)),
                ('Adapter_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Union_metal_Quantity', models.PositiveIntegerField(blank=True)),
                ('Union_metal_Single_price', models.PositiveIntegerField(blank=True)),
                ('Union_metal_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Union_HDP_Quantity', models.PositiveIntegerField(blank=True)),
                ('Union_HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('Union_HDP_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Get_valve_Quantity', models.PositiveIntegerField(blank=True)),
                ('Get_valve_Single_price', models.PositiveIntegerField(blank=True)),
                ('Get_valve_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Foss_set_Quantity', models.PositiveIntegerField(blank=True)),
                ('Foss_set_Single_price', models.PositiveIntegerField(blank=True)),
                ('Foss_set_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('T_metal_Quantity', models.PositiveIntegerField(blank=True)),
                ('T_metal_Single_price', models.PositiveIntegerField(blank=True)),
                ('T_metal_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('T_HDP_Quantity', models.PositiveIntegerField(blank=True)),
                ('T_HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('T_HDP_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Tape_Quantity', models.PositiveIntegerField(blank=True)),
                ('Tape_Single_price', models.PositiveIntegerField(blank=True)),
                ('Tape_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Water_meter_Quantity', models.PositiveIntegerField(blank=True)),
                ('Water_meter_Single_price', models.PositiveIntegerField(blank=True)),
                ('Water_meter_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Socket_Quantity', models.PositiveIntegerField(blank=True)),
                ('Socket_Single_price', models.PositiveIntegerField(blank=True)),
                ('Socket_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Grand_total', models.PositiveIntegerField(blank=True)),
                ('Water_supply', models.TextField(blank=True, default='To Income Officer', max_length=250)),
                ('Income_office', models.TextField(blank=True, default='To Finance Officer', max_length=250)),
                ('Amount', models.PositiveIntegerField(blank=True)),
                ('Cashier', models.TextField(blank=True, default='To the organization', max_length=250)),
                ('Requested_at', models.DateTimeField(auto_now=True, verbose_name='Requested at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by11', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by11', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HumanResourcePlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField()),
                ('Tasks', models.CharField(max_length=150)),
                ('Measurement', models.CharField(max_length=150)),
                ('Month', models.DateField()),
                ('First_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Second_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Third_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Forth_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Total_budget', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Planned_at', models.DateTimeField(auto_now=True, verbose_name='Planned at')),
                ('Planned_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by3', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by3', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HumanResourcePerformed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Quarter', models.CharField(choices=[('First', 'First Quarter'), ('Second', 'Second Quarter'), ('Third', 'Third Quarter'), ('Forth', 'Forth Quarter')], max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Planned_tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='processolutions.humanresourceplan')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by10', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by10', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Human Resource Performed',
                'verbose_name_plural': 'Human Resource Performed',
            },
        ),
        migrations.CreateModel(
            name='GeneralLeisure',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Tasks', models.CharField(max_length=150)),
                ('General', models.PositiveIntegerField()),
                ('Check_no', models.PositiveIntegerField()),
                ('Check_payable', models.PositiveIntegerField()),
                ('Receipt_no', models.CharField(max_length=250)),
                ('Deposit', models.PositiveIntegerField()),
                ('Withdraw', models.PositiveIntegerField()),
                ('Balance', models.DecimalField(decimal_places=2, max_digits=250)),
                ('Registered_date', models.CharField(max_length=150, verbose_name='Registered at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by1111', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by1111', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'General leisure management',
                'verbose_name_plural': 'General leisure management',
            },
        ),
        migrations.CreateModel(
            name='FinanceIncomePlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField()),
                ('Tasks', models.CharField(max_length=150)),
                ('Measurement', models.CharField(max_length=150)),
                ('Month', models.DateField()),
                ('First_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Second_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Third_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Forth_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Total_budget', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Planned_at', models.DateTimeField(auto_now=True, verbose_name='Planned at')),
                ('Planned_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by1', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by1', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FinanceIncomePerformed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Quarter', models.CharField(choices=[('First', 'First Quarter'), ('Second', 'Second Quarter'), ('Third', 'Third Quarter'), ('Forth', 'Forth Quarter')], max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Planned_tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='processolutions.financeincomeplan')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by8', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by8', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Finance Income Performed',
                'verbose_name_plural': 'Finance Income Performed',
            },
        ),
        migrations.CreateModel(
            name='FinanceCostPlan',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Year', models.DateField()),
                ('Tasks', models.CharField(max_length=150)),
                ('Measurement', models.CharField(max_length=150)),
                ('Month', models.DateField()),
                ('First_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Second_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Third_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Forth_Quarter_Plan', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Total_budget', models.DecimalField(decimal_places=2, max_digits=30)),
                ('Planned_at', models.DateTimeField(auto_now=True, verbose_name='Planned at')),
                ('Planned_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by2', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FinanceCostPerformed',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Quarter', models.CharField(choices=[('First', 'First Quarter'), ('Second', 'Second Quarter'), ('Third', 'Third Quarter'), ('Forth', 'Forth Quarter')], max_length=150)),
                ('Quantity', models.PositiveIntegerField()),
                ('Registered_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Planned_tasks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='processolutions.financecostplan')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by9', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by9', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Finance Cost Performed',
                'verbose_name_plural': 'Finance Cost Performed',
            },
        ),
        migrations.CreateModel(
            name='DetailCostRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Full_name', models.CharField(max_length=150)),
                ('Kebele', models.CharField(max_length=150)),
                ('House_number', models.CharField(blank=True, max_length=150)),
                ('Service_type', models.CharField(choices=[('Residence', 'Residence'), ('Trade_organization', 'Trade organization'), ('Public_government', 'Public government')], max_length=150)),
                ('Customer_neighbor', models.CharField(blank=True, max_length=150)),
                ('Pipe_Quantity', models.PositiveIntegerField(blank=True)),
                ('Pipe_Single_price', models.PositiveIntegerField(blank=True)),
                ('Pipe_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('HDP_tube_Quantity', models.PositiveIntegerField(blank=True)),
                ('HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('HDP_tube_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Elbow_Quantity', models.PositiveIntegerField(blank=True)),
                ('Elbow_Single_price', models.PositiveIntegerField(blank=True)),
                ('Elbow_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Naples_Quantity', models.PositiveIntegerField(blank=True)),
                ('Naples_Single_price', models.PositiveIntegerField(blank=True)),
                ('Naples_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Reducer_Quantity', models.PositiveIntegerField(blank=True)),
                ('Reducer_Single_price', models.PositiveIntegerField(blank=True)),
                ('Reducer_inch', models.CharField(blank=True, choices=[('2 1/2 - 2', '2 1/2 - 2'), ('2 1/2 - 1 1/2', '2 1/2 - 1 1/2'), ('2 1/2 - 1', '2 1/2 - 1'), ('2 1/2 - 3/4', '2 1/2 - 3/4'), ('2 1/2 - 1/2', '2 1/2 - 1/2'), ('2 - 1 1/2', '2 - 1 1/2'), ('2 - 1', '2 - 1'), ('2 - 3/4', '2 - 3/4'), ('2 - 1/2', '2 - 1/2'), ('1 1/2 - 1', '1 1/2 - 1'), ('1 1/2 - 3/4', '1 1/2 - 3/4'), ('1 1/2 - 1/2', '1 1/2 - 1/2'), ('1 - 3/4', '1 - 3/4'), ('1 - 1/2', '1 - 1/2')], max_length=150)),
                ('Adapter_Quantity', models.PositiveIntegerField(blank=True)),
                ('Adapter_Single_price', models.PositiveIntegerField(blank=True)),
                ('Adapter_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Union_metal_Quantity', models.PositiveIntegerField(blank=True)),
                ('Union_metal_Single_price', models.PositiveIntegerField(blank=True)),
                ('Union_metal_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Union_HDP_Quantity', models.PositiveIntegerField(blank=True)),
                ('Union_HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('Union_HDP_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Get_valve_Quantity', models.PositiveIntegerField(blank=True)),
                ('Get_valve_Single_price', models.PositiveIntegerField(blank=True)),
                ('Get_valve_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Foss_set_Quantity', models.PositiveIntegerField(blank=True)),
                ('Foss_set_Single_price', models.PositiveIntegerField(blank=True)),
                ('Foss_set_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('T_metal_Quantity', models.PositiveIntegerField(blank=True)),
                ('T_metal_Single_price', models.PositiveIntegerField(blank=True)),
                ('T_metal_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('T_HDP_Quantity', models.PositiveIntegerField(blank=True)),
                ('T_HDP_Single_price', models.PositiveIntegerField(blank=True)),
                ('T_HDP_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Tape_Quantity', models.PositiveIntegerField(blank=True)),
                ('Tape_Single_price', models.PositiveIntegerField(blank=True)),
                ('Tape_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Water_meter_Quantity', models.PositiveIntegerField(blank=True)),
                ('Water_meter_Single_price', models.PositiveIntegerField(blank=True)),
                ('Water_meter_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Socket_Quantity', models.PositiveIntegerField(blank=True)),
                ('Socket_Single_price', models.PositiveIntegerField(blank=True)),
                ('Socket_inch', models.CharField(blank=True, choices=[('1/2', '1/2'), ('3/4', '3/4'), ('1', '1'), ('1 1/2', '1 1/2'), ('2', '2'), ('2 1/2', '2 1/2'), ('3', '3'), ('3 1/2', '3 1/2'), ('4', '4')], max_length=150)),
                ('Total_55', models.FloatField(blank=True)),
                ('Deposite', models.PositiveIntegerField(blank=True, default=100, help_text='ድርጅት ብር 350')),
                ('For_Digging', models.PositiveIntegerField()),
                ('For_Rope', models.PositiveIntegerField(blank=True, default=60)),
                ('For_Agreement', models.PositiveIntegerField(blank=True, default=30)),
                ('For_Forms', models.PositiveIntegerField()),
                ('Total_Form', models.PositiveIntegerField(blank=True)),
                ('Grand_total', models.PositiveIntegerField(blank=True)),
                ('Potable_water', models.TextField(blank=True, default='To Income Officer')),
                ('Income_office', models.TextField(blank=True, default='To Finance Officer')),
                ('Amount', models.PositiveIntegerField(blank=True)),
                ('Cashier', models.TextField(blank=True, default='To the organization')),
                ('Requested_at', models.DateTimeField(auto_now=True, verbose_name='Requested at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by61', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by61', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ComplainManagement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('Category', models.CharField(choices=[('1', 'First type'), ('2', 'Second type'), ('3', 'Third type'), ('4', 'Forth type')], max_length=150)),
                ('Sub_category', models.CharField(choices=[('1', 'First type'), ('2', 'Second type'), ('3', 'Third type'), ('4', 'Forth type')], max_length=150)),
                ('Complain_type', models.CharField(choices=[('1', 'First type'), ('2', 'Second type'), ('3', 'Third type'), ('4', 'Forth type')], max_length=150)),
                ('Nature_of_complaint', models.CharField(max_length=150)),
                ('Complain_details', models.TextField(max_length=250)),
                ('Complain_related', models.FileField(max_length=254, upload_to='documents/%Y/%m/%d')),
                ('Complained_at', models.DateTimeField(auto_now=True, verbose_name='Registered at')),
                ('Registered_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pl_by111', to=settings.AUTH_USER_MODEL)),
                ('Updated_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='up_by111', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Complain management system',
                'verbose_name_plural': 'Complain management systems',
            },
        ),
        migrations.CreateModel(
            name='DetailCostRequestCashier',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.detailcostrequest',),
        ),
        migrations.CreateModel(
            name='DetailCostRequestIncomeOfficer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.detailcostrequest',),
        ),
        migrations.CreateModel(
            name='DetailCostRequestPotableWater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.detailcostrequest',),
        ),
        migrations.CreateModel(
            name='MaintenanceRequestCashier',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.maintenancerequest',),
        ),
        migrations.CreateModel(
            name='MaintenanceRequestIncomeOfficer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.maintenancerequest',),
        ),
        migrations.CreateModel(
            name='MaintenanceRequestPotableWater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.maintenancerequest',),
        ),
        migrations.CreateModel(
            name='NameChangeRequestBillProcessor',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.namechangerequest',),
        ),
        migrations.CreateModel(
            name='NameChangeRequestCashier',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.namechangerequest',),
        ),
        migrations.CreateModel(
            name='NameChangeRequestIncomeOfficer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.namechangerequest',),
        ),
        migrations.CreateModel(
            name='PotableWaterRequestCashier',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.potablewaterrequest',),
        ),
        migrations.CreateModel(
            name='PotableWaterRequestIncomeOfficer',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.potablewaterrequest',),
        ),
        migrations.CreateModel(
            name='PotableWaterRequestPotableWater',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('processolutions.potablewaterrequest',),
        ),
    ]
