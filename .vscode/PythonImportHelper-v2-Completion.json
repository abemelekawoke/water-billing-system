[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ContentFile",
        "importPath": "django.core.files.base",
        "description": "django.core.files.base",
        "isExtraImport": true,
        "detail": "django.core.files.base",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "bills.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bills.models",
        "description": "bills.models",
        "detail": "bills.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "setups.models",
        "description": "setups.models",
        "isExtraImport": true,
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "setups.models",
        "description": "setups.models",
        "isExtraImport": true,
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "setups.models",
        "description": "setups.models",
        "isExtraImport": true,
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "setups.models",
        "description": "setups.models",
        "isExtraImport": true,
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "django_currentuser.db.models.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_currentuser.db.models.fields",
        "description": "django_currentuser.db.models.fields",
        "detail": "django_currentuser.db.models.fields",
        "documentation": {}
    },
    {
        "label": "django_currentuser.middleware",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "get_current_authenticated_user",
        "importPath": "django_currentuser.middleware",
        "description": "django_currentuser.middleware",
        "isExtraImport": true,
        "detail": "django_currentuser.middleware",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "customers.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customers.models",
        "description": "customers.models",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "customers.models",
        "description": "customers.models",
        "isExtraImport": true,
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "ImportExportModelAdmin",
        "importPath": "import_export.admin",
        "description": "import_export.admin",
        "isExtraImport": true,
        "detail": "import_export.admin",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "CurrentUserField",
        "importPath": "django_currentuser.db.models",
        "description": "django_currentuser.db.models",
        "isExtraImport": true,
        "detail": "django_currentuser.db.models",
        "documentation": {}
    },
    {
        "label": "periods.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "periods.models",
        "description": "periods.models",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "reads.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "reads.models",
        "description": "reads.models",
        "detail": "reads.models",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "ContentType",
        "importPath": "django.contrib.contenttypes.models",
        "description": "django.contrib.contenttypes.models",
        "isExtraImport": true,
        "detail": "django.contrib.contenttypes.models",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "resources",
        "importPath": "import_export",
        "description": "import_export",
        "isExtraImport": true,
        "detail": "import_export",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Subquery",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "OuterRef",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "_collections_abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "__all__",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "mbcs_encode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "mbcs_decode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "oem_encode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "oem_decode",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "BOM_UTF8",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "_codecs_tw,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_tw.",
        "description": "_codecs_tw.",
        "detail": "_codecs_tw.",
        "documentation": {}
    },
    {
        "label": "_multibytecodec",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_multibytecodec",
        "description": "_multibytecodec",
        "detail": "_multibytecodec",
        "documentation": {}
    },
    {
        "label": "_codecs_hk,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_hk.",
        "description": "_codecs_hk.",
        "detail": "_codecs_hk.",
        "documentation": {}
    },
    {
        "label": "bz2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bz2",
        "description": "bz2",
        "detail": "bz2",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "_codecs_jp,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_jp.",
        "description": "_codecs_jp.",
        "detail": "_codecs_jp.",
        "documentation": {}
    },
    {
        "label": "_codecs_kr,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_kr.",
        "description": "_codecs_kr.",
        "detail": "_codecs_kr.",
        "documentation": {}
    },
    {
        "label": "_codecs_cn,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_cn.",
        "description": "_codecs_cn.",
        "detail": "_codecs_cn.",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "stringprep,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stringprep.",
        "description": "stringprep.",
        "detail": "stringprep.",
        "documentation": {}
    },
    {
        "label": "ucd_3_2_0",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "_codecs_iso2022,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_codecs_iso2022.",
        "description": "_codecs_iso2022.",
        "detail": "_codecs_iso2022.",
        "documentation": {}
    },
    {
        "label": "quopri",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "quopri",
        "description": "quopri",
        "detail": "quopri",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "codecs,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs.",
        "description": "codecs.",
        "detail": "codecs.",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "get_cache_token",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "warnings",
        "description": "warnings",
        "isExtraImport": true,
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "_imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_imp",
        "description": "_imp",
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "lock_held",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "acquire_lock",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "release_lock",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "get_frozen_object",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "is_frozen_package",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "init_frozen",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "is_builtin",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "is_frozen",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "_fix_co_filename",
        "importPath": "_imp",
        "description": "_imp",
        "isExtraImport": true,
        "detail": "_imp",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "urandom",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "machinery",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "ResourceLoader",
        "importPath": "importlib.abc",
        "description": "importlib.abc",
        "isExtraImport": true,
        "detail": "importlib.abc",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "MappingProxyType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "DynamicClassAttribute",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "BuiltinMethodType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing.io",
        "description": "typing.io",
        "isExtraImport": true,
        "detail": "typing.io",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing.io",
        "description": "typing.io",
        "isExtraImport": true,
        "detail": "typing.io",
        "documentation": {}
    },
    {
        "label": "ZipImportError",
        "importPath": "zipimport",
        "description": "zipimport",
        "isExtraImport": true,
        "detail": "zipimport",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "str",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "abs",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "builtins",
        "description": "builtins",
        "isExtraImport": true,
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "copyreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copyreg",
        "description": "copyreg",
        "detail": "copyreg",
        "documentation": {}
    },
    {
        "label": "dispatch_table",
        "importPath": "copyreg",
        "description": "copyreg",
        "isExtraImport": true,
        "detail": "copyreg",
        "documentation": {}
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "recursive_repr",
        "importPath": "reprlib",
        "description": "reprlib",
        "isExtraImport": true,
        "detail": "reprlib",
        "documentation": {}
    },
    {
        "label": "_thread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_thread",
        "description": "_thread",
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "get_ident",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "_compare_digest",
        "importPath": "_operator",
        "description": "_operator",
        "isExtraImport": true,
        "detail": "_operator",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha512",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "_ERR_MSG",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_exec",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_load",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_builtin_from_name",
        "importPath": "importlib._bootstrap",
        "description": "importlib._bootstrap",
        "isExtraImport": true,
        "detail": "importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "SourcelessFileLoader",
        "importPath": "importlib._bootstrap_external",
        "description": "importlib._bootstrap_external",
        "isExtraImport": true,
        "detail": "importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tokenize",
        "description": "tokenize",
        "detail": "tokenize",
        "documentation": {}
    },
    {
        "label": "_io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_io",
        "description": "_io",
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BUFFER_SIZE",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BlockingIOError",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperation",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "open",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "FileIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BufferedReader",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BufferedWriter",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BufferedRWPair",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "BufferedRandom",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "IncrementalNewlineDecoder",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "TextIOWrapper",
        "importPath": "_io",
        "description": "_io",
        "isExtraImport": true,
        "detail": "_io",
        "documentation": {}
    },
    {
        "label": "encodings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "encodings",
        "description": "encodings",
        "detail": "encodings",
        "documentation": {}
    },
    {
        "label": "encodings.aliases",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "encodings.aliases",
        "description": "encodings.aliases",
        "detail": "encodings.aliases",
        "documentation": {}
    },
    {
        "label": "genericpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "genericpath",
        "description": "genericpath",
        "detail": "genericpath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "genericpath",
        "description": "genericpath",
        "isExtraImport": true,
        "detail": "genericpath",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "genericpath",
        "description": "genericpath",
        "isExtraImport": true,
        "detail": "genericpath",
        "documentation": {}
    },
    {
        "label": "curdir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pardir",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "sep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pathsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "defpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "extsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "altsep",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "devnull",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "exp",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "e",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "acos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "islice",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bisect",
        "description": "bisect",
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "_random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_random",
        "description": "_random",
        "detail": "_random",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "sre_compile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_compile",
        "description": "sre_compile",
        "detail": "sre_compile",
        "documentation": {}
    },
    {
        "label": "sre_parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_parse",
        "description": "sre_parse",
        "detail": "sre_parse",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "__main__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "__main__",
        "description": "__main__",
        "detail": "__main__",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "_sre",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_sre",
        "description": "_sre",
        "detail": "_sre",
        "documentation": {}
    },
    {
        "label": "MAXREPEAT",
        "importPath": "_sre",
        "description": "_sre",
        "isExtraImport": true,
        "detail": "_sre",
        "documentation": {}
    },
    {
        "label": "MAXGROUPS",
        "importPath": "_sre",
        "description": "_sre",
        "isExtraImport": true,
        "detail": "_sre",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {}
    },
    {
        "label": "_clearcache",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {}
    },
    {
        "label": "__doc__",
        "importPath": "_struct",
        "description": "_struct",
        "isExtraImport": true,
        "detail": "_struct",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "token",
        "description": "token",
        "detail": "token",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "token",
        "description": "token",
        "isExtraImport": true,
        "detail": "token",
        "documentation": {}
    },
    {
        "label": "getweakrefcount",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "getweakrefs",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "ref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "proxy",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "CallableProxyType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "ProxyType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "ReferenceType",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "_remove_dead_weakref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "ref",
        "importPath": "_weakref",
        "description": "_weakref",
        "isExtraImport": true,
        "detail": "_weakref",
        "documentation": {}
    },
    {
        "label": "WeakSet",
        "importPath": "_weakrefset",
        "description": "_weakrefset",
        "isExtraImport": true,
        "detail": "_weakrefset",
        "documentation": {}
    },
    {
        "label": "_IterationGuard",
        "importPath": "_weakrefset",
        "description": "_weakrefset",
        "isExtraImport": true,
        "detail": "_weakrefset",
        "documentation": {}
    },
    {
        "label": "_locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "_locale",
        "description": "_locale",
        "detail": "_locale",
        "documentation": {}
    },
    {
        "label": "StaffProfile",
        "importPath": "staff.models",
        "description": "staff.models",
        "isExtraImport": true,
        "detail": "staff.models",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.views.static",
        "description": "django.views.static",
        "isExtraImport": true,
        "detail": "django.views.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework_simplejwt",
        "description": "rest_framework_simplejwt",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0001_initial",
        "description": "api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reading',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user', models.CharField(max_length=100)),",
        "detail": "api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "Reading",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Reading(models.Model):\n    user = models.CharField(max_length=100)\n    current_read = models.IntegerField()\n    timestamp = models.DateTimeField(auto_now_add=True)",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "ReadingSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ReadingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Reading\n        fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'readings', ReadingViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "ReadingViewSet",
        "kind": 6,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "class ReadingViewSet(viewsets.ModelViewSet):\n    queryset = Reading.objects.all()\n    serializer_class = ReadingSerializer",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0001_initial",
        "description": "banks.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bill',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('valid_until', models.DateField()),",
        "detail": "banks.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0002_alter_bill_options_alter_billcancellation_options_and_more",
        "description": "banks.migrations.0002_alter_bill_options_alter_billcancellation_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('banks', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='bill',\n            options={'verbose_name': 'update or register single bill', 'verbose_name_plural': 'update or register single bills'},\n        ),\n        migrations.AlterModelOptions(",
        "detail": "banks.migrations.0002_alter_bill_options_alter_billcancellation_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0003_alter_bulkbillupload_status_and_more",
        "description": "banks.migrations.0003_alter_bulkbillupload_status_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('banks', '0002_alter_bill_options_alter_billcancellation_options_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulkbillupload',\n            name='status',\n            field=models.CharField(blank=True, default='Pending', max_length=20, null=True),\n        ),",
        "detail": "banks.migrations.0003_alter_bulkbillupload_status_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0004_alter_bulkbillupload_uploaded_file",
        "description": "banks.migrations.0004_alter_bulkbillupload_uploaded_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('banks', '0003_alter_bulkbillupload_status_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulkbillupload',\n            name='uploaded_file',\n            field=models.FileField(upload_to=''),\n        ),",
        "detail": "banks.migrations.0004_alter_bulkbillupload_uploaded_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0005_alter_bulkbillupload_uploaded_file",
        "description": "banks.migrations.0005_alter_bulkbillupload_uploaded_file",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('banks', '0004_alter_bulkbillupload_uploaded_file'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulkbillupload',\n            name='uploaded_file',\n            field=models.FileField(upload_to='bulk_bill_uploads/'),\n        ),",
        "detail": "banks.migrations.0005_alter_bulkbillupload_uploaded_file",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "banks.migrations.0006_alter_bill_status_alter_billcancellation_status_and_more",
        "description": "banks.migrations.0006_alter_bill_status_alter_billcancellation_status_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('banks', '0005_alter_bulkbillupload_uploaded_file'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bill',\n            name='status',\n            field=models.CharField(blank=True, default='Pending', max_length=20, null=True),\n        ),",
        "detail": "banks.migrations.0006_alter_bill_status_alter_billcancellation_status_and_more",
        "documentation": {}
    },
    {
        "label": "ItemInline",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class ItemInline(admin.TabularInline):\n    model = Item\n    extra = 0\n@admin.register(Bill)\nclass BillAdmin(admin.ModelAdmin):\n    list_display = ('valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status')\n    search_fields = ['full_name', 'phone_number']\n    list_filter = ['status']\n    list_display_links = ['valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status']\n    list_per_page = 10",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillAdmin(admin.ModelAdmin):\n    list_display = ('valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status')\n    search_fields = ['full_name', 'phone_number']\n    list_filter = ['status']\n    list_display_links = ['valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status']\n    list_per_page = 10\n    list_select_related = True\n    inlines = [ItemInline]\n    def save_model(self, request, obj, form, change):\n        # Save the Bill instance first to ensure it has a primary key",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillSyncForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillSyncForm(forms.ModelForm):\n    class Meta:\n        model = BillSync\n        fields = ['start_date', 'end_date']\n@admin.register(BillSync)\nclass BillSyncAdmin(admin.ModelAdmin):\n    form = BillSyncForm\n    list_display = ['start_date', 'end_date', 'status', 'sync_date']\n    search_fields = ['start_date', 'end_date']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillSyncAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillSyncAdmin(admin.ModelAdmin):\n    form = BillSyncForm\n    list_display = ['start_date', 'end_date', 'status', 'sync_date']\n    search_fields = ['start_date', 'end_date']\n    list_filter = ['status']\n    list_display_links = ['start_date', 'end_date', 'status', 'sync_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['sync_bills']\n    def sync_bills(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillSyncFileForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillSyncFileForm(forms.ModelForm):\n    class Meta:\n        model = BillSyncFile\n        fields = ['uploaded_file', 'start_date', 'end_date']\n@admin.register(BillSyncFile)\nclass BillSyncFileAdmin(admin.ModelAdmin):\n    form = BillSyncFileForm\n    list_display = ['uploaded_file', 'start_date', 'end_date', 'status', 'upload_date']\n    search_fields = ['start_date', 'end_date']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillSyncFileAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillSyncFileAdmin(admin.ModelAdmin):\n    form = BillSyncFileForm\n    list_display = ['uploaded_file', 'start_date', 'end_date', 'status', 'upload_date']\n    search_fields = ['start_date', 'end_date']\n    list_filter = ['status']\n    list_display_links = ['uploaded_file', 'start_date', 'end_date', 'status', 'upload_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['sync_bills_from_file']\n    def sync_bills_from_file(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillCancellationForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillCancellationForm(forms.ModelForm):\n    class Meta:\n        model = BillCancellation\n        fields = ['bill_id']\n@admin.register(BillCancellation)\nclass BillCancellationAdmin(admin.ModelAdmin):\n    form = BillCancellationForm\n    list_display = ['bill_id', 'status', 'cancel_date']\n    search_fields = ['bill_id']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BillCancellationAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BillCancellationAdmin(admin.ModelAdmin):\n    form = BillCancellationForm\n    list_display = ['bill_id', 'status', 'cancel_date']\n    search_fields = ['bill_id']\n    list_filter = ['status']\n    list_display_links = ['bill_id', 'status', 'cancel_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['cancel_selected_bills']\n    def cancel_selected_bills(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillCancellationForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillCancellationForm(forms.ModelForm):\n    class Meta:\n        model = BulkBillCancellation\n        fields = ['uploaded_file']\n@admin.register(BulkBillCancellation)\nclass BulkBillCancellationAdmin(admin.ModelAdmin):\n    form = BulkBillCancellationForm\n    list_display = ['uploaded_file', 'status', 'cancel_date']\n    search_fields = ['cancel_date']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillCancellationAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillCancellationAdmin(admin.ModelAdmin):\n    form = BulkBillCancellationForm\n    list_display = ['uploaded_file', 'status', 'cancel_date']\n    search_fields = ['cancel_date']\n    list_filter = ['status']\n    list_display_links = ['uploaded_file', 'status', 'cancel_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['cancel_bills_from_file']\n    def cancel_bills_from_file(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillUploadForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillUploadForm(forms.ModelForm):\n    class Meta:\n        model = BulkBillUpload\n        fields = ['uploaded_file']\n@admin.register(BulkBillUpload)\nclass BulkBillUploadAdmin(admin.ModelAdmin):\n    form = BulkBillUploadForm\n    list_display = ['uploaded_file', 'status', 'upload_date']\n    search_fields = ['upload_date']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillUploadAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillUploadAdmin(admin.ModelAdmin):\n    form = BulkBillUploadForm\n    list_display = ['uploaded_file', 'status', 'upload_date']\n    search_fields = ['upload_date']\n    list_filter = ['status']\n    list_display_links = ['uploaded_file', 'status', 'upload_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['upload_bills_from_file']\n    def upload_bills_from_file(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillUpdateForm",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillUpdateForm(forms.ModelForm):\n    class Meta:\n        model = BulkBillUpdate\n        fields = ['uploaded_file']\n@admin.register(BulkBillUpdate)\nclass BulkBillUpdateAdmin(admin.ModelAdmin):\n    form = BulkBillUpdateForm\n    list_display = ['uploaded_file', 'status', 'upload_date']\n    search_fields = ['upload_date']\n    list_filter = ['status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BulkBillUpdateAdmin",
        "kind": 6,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "class BulkBillUpdateAdmin(admin.ModelAdmin):\n    form = BulkBillUpdateForm\n    list_display = ['uploaded_file', 'status', 'upload_date']\n    search_fields = ['upload_date']\n    list_filter = ['status']\n    list_display_links = ['uploaded_file', 'status', 'upload_date']\n    list_per_page = 10\n    list_select_related = True\n    actions = ['update_bills_from_file']\n    def update_bills_from_file(self, request, queryset):",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "banks.admin",
        "description": "banks.admin",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ItemInline(admin.TabularInline):\n    model = Item\n    extra = 0\n@admin.register(Bill)\nclass BillAdmin(admin.ModelAdmin):\n    list_display = ('valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status')\n    search_fields = ['full_name', 'phone_number']\n    list_filter = ['status']\n    list_display_links = ['valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status']",
        "detail": "banks.admin",
        "documentation": {}
    },
    {
        "label": "BanksConfig",
        "kind": 6,
        "importPath": "banks.apps",
        "description": "banks.apps",
        "peekOfCode": "class BanksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'banks'",
        "detail": "banks.apps",
        "documentation": {}
    },
    {
        "label": "Bill",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class Bill(models.Model):\n    id = models.AutoField(primary_key=True)\n    valid_until = models.DateField()\n    full_name = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=15, blank=True)\n    customer_id = models.CharField(max_length=10)\n    bill_id = models.CharField(max_length=20)\n    status = models.CharField(max_length=20, blank=True, null=True, default='Pending')\n    def __str__(self):\n        return f\"{self.full_name}\"",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class Item(models.Model):\n    bill = models.ForeignKey(Bill, related_name='items', on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return f\"{self.name} - {self.price}\"\nclass BillSync(models.Model):\n    start_date = models.DateField()\n    end_date = models.DateField()\n    status = models.CharField(max_length=20, blank=True, null=True, default='Pending')",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BillSync",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BillSync(models.Model):\n    start_date = models.DateField()\n    end_date = models.DateField()\n    status = models.CharField(max_length=20, blank=True, null=True, default='Pending')\n    sync_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Sync from {self.start_date} to {self.end_date}\"\nclass BillSyncFile(models.Model):\n    uploaded_file = models.FileField(upload_to='bill_sync_files/')\n    start_date = models.DateField()",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BillSyncFile",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BillSyncFile(models.Model):\n    uploaded_file = models.FileField(upload_to='bill_sync_files/')\n    start_date = models.DateField()\n    end_date = models.DateField()\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    upload_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.uploaded_file.name} - {self.status}\"\nclass BillCancellation(models.Model):\n    bill_id = models.CharField(max_length=50)",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BillCancellation",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BillCancellation(models.Model):\n    bill_id = models.CharField(max_length=50)\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    cancel_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.bill_id} - {self.status}\"\n    class Meta:\n        db_table = ''\n        managed = True\n        verbose_name = 'Cancel single bill'",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BulkBillCancellation",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BulkBillCancellation(models.Model):\n    uploaded_file = models.FileField(upload_to='bulk_bill_cancellations/')\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    cancel_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Bulk Cancellation - {self.cancel_date}\"\nclass BulkBillUpload(models.Model):\n    uploaded_file = models.FileField(upload_to='bulk_bill_uploads/')\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    upload_date = models.DateTimeField(auto_now_add=True)",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BulkBillUpload",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BulkBillUpload(models.Model):\n    uploaded_file = models.FileField(upload_to='bulk_bill_uploads/')\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    upload_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Bulk Upload - {self.uploaded_file.name} on {self.upload_date}\"\n    class Meta:\n        managed = True\n        verbose_name = 'Bulk bill registration'\n        verbose_name_plural = 'Bulk bill registrations'",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "BulkBillUpdate",
        "kind": 6,
        "importPath": "banks.models",
        "description": "banks.models",
        "peekOfCode": "class BulkBillUpdate(models.Model):\n    uploaded_file = models.FileField(upload_to='bulk_bill_updates/')\n    status = models.CharField(max_length=20, null=True, blank=True, default='Pending')\n    upload_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Bulk Update - {self.upload_date}\"",
        "detail": "banks.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0001_initial",
        "description": "bills.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bill',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('valid_until', models.DateField()),",
        "detail": "bills.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0002_billcancellation",
        "description": "bills.migrations.0002_billcancellation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BillCancellation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('bill_id', models.CharField(max_length=50)),",
        "detail": "bills.migrations.0002_billcancellation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0003_bulkbillcancellation",
        "description": "bills.migrations.0003_bulkbillcancellation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0002_billcancellation'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BulkBillCancellation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uploaded_file', models.FileField(upload_to='bulk_bill_cancellations/')),",
        "detail": "bills.migrations.0003_bulkbillcancellation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0004_alter_billcancellation_status_and_more",
        "description": "bills.migrations.0004_alter_billcancellation_status_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0003_bulkbillcancellation'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='billcancellation',\n            name='status',\n            field=models.CharField(blank=True, max_length=20, null=True),\n        ),",
        "detail": "bills.migrations.0004_alter_billcancellation_status_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0005_bulkbillupload",
        "description": "bills.migrations.0005_bulkbillupload",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0004_alter_billcancellation_status_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BulkBillUpload',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uploaded_file', models.FileField(upload_to='bulk_bill_uploads/')),",
        "detail": "bills.migrations.0005_bulkbillupload",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0006_bulkbillupdate",
        "description": "bills.migrations.0006_bulkbillupdate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0005_bulkbillupload'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BulkBillUpdate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('uploaded_file', models.FileField(upload_to='bulk_bill_updates/')),",
        "detail": "bills.migrations.0006_bulkbillupdate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0007_alter_bulkbillupdate_status",
        "description": "bills.migrations.0007_alter_bulkbillupdate_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0006_bulkbillupdate'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bulkbillupdate',\n            name='status',\n            field=models.CharField(blank=True, max_length=20, null=True),\n        ),",
        "detail": "bills.migrations.0007_alter_bulkbillupdate_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0008_remove_item_bill_delete_billcancellation_and_more",
        "description": "bills.migrations.0008_remove_item_bill_delete_billcancellation_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0007_alter_bulkbillupdate_status'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='item',\n            name='bill',\n        ),\n        migrations.DeleteModel(",
        "detail": "bills.migrations.0008_remove_item_bill_delete_billcancellation_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0009_initial",
        "description": "bills.migrations.0009_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('bills', '0008_remove_item_bill_delete_billcancellation_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bill',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "bills.migrations.0009_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0010_waterbill",
        "description": "bills.migrations.0010_waterbill",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0009_initial'),\n        ('setups', '0004_alter_tariff_status'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='WaterBill',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "bills.migrations.0010_waterbill",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0011_alter_waterbill_consumption_and_more",
        "description": "bills.migrations.0011_alter_waterbill_consumption_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0010_waterbill'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='waterbill',\n            name='consumption',\n            field=models.PositiveBigIntegerField(help_text='የዚህ ወር ፍጆታ'),\n        ),",
        "detail": "bills.migrations.0011_alter_waterbill_consumption_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0012_remove_item_bill_delete_bill_delete_item",
        "description": "bills.migrations.0012_remove_item_bill_delete_bill_delete_item",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0011_alter_waterbill_consumption_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='item',\n            name='bill',\n        ),\n        migrations.DeleteModel(",
        "detail": "bills.migrations.0012_remove_item_bill_delete_bill_delete_item",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0013_alter_waterbill_month_alter_waterbill_year",
        "description": "bills.migrations.0013_alter_waterbill_month_alter_waterbill_year",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0012_remove_item_bill_delete_bill_delete_item'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='waterbill',\n            name='month',\n            field=models.CharField(max_length=100),\n        ),",
        "detail": "bills.migrations.0013_alter_waterbill_month_alter_waterbill_year",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0014_inputdata",
        "description": "bills.migrations.0014_inputdata",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0013_alter_waterbill_month_alter_waterbill_year'),\n        ('setups', '0004_alter_tariff_status'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='InputData',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "bills.migrations.0014_inputdata",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "bills.migrations.0015_alter_inputdata_month_alter_inputdata_year",
        "description": "bills.migrations.0015_alter_inputdata_month_alter_inputdata_year",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bills', '0014_inputdata'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='inputdata',\n            name='month',\n            field=models.CharField(default=bills.models.InputData.get_current_month, max_length=50),\n        ),",
        "detail": "bills.migrations.0015_alter_inputdata_month_alter_inputdata_year",
        "documentation": {}
    },
    {
        "label": "WaterBillAdmin",
        "kind": 6,
        "importPath": "bills.admin",
        "description": "bills.admin",
        "peekOfCode": "class WaterBillAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id', 'code'), ('month', 'year'), ('previous_read', 'current_read'), ('consumption'), ('block1', 'block2', 'block3', 'block4', 'block5'),('total_price'), ('status')]\n    list_display = ['id', 'code', 'month', 'year', 'previous_read', 'current_read', 'consumption','total_price', 'status']\n    search_fields = ['code']\n    list_filter = ['month', 'year']\n    list_display_links = ['id', 'code', 'month', 'year', 'previous_read', 'current_read', 'consumption','total_price', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "bills.admin",
        "documentation": {}
    },
    {
        "label": "InputDataAdmin",
        "kind": 6,
        "importPath": "bills.admin",
        "description": "bills.admin",
        "peekOfCode": "class InputDataAdmin(admin.ModelAdmin):\n    actions = ['run_stored_procedure']\n    def run_stored_procedure(self, request, queryset):\n        for input_data in queryset:\n            with connection.cursor() as cursor:\n                cursor.execute(\"CALL InsertWaterBillAndRead(%s, %s, %s, %s)\", [input_data.kebele, input_data.zone, input_data.month, input_data.year])\n    run_stored_procedure.short_description = \"Calculate bills\"\nadmin.site.register(InputData, InputDataAdmin)",
        "detail": "bills.admin",
        "documentation": {}
    },
    {
        "label": "BillsConfig",
        "kind": 6,
        "importPath": "bills.apps",
        "description": "bills.apps",
        "peekOfCode": "class BillsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bills'",
        "detail": "bills.apps",
        "documentation": {}
    },
    {
        "label": "WaterBill",
        "kind": 6,
        "importPath": "bills.models",
        "description": "bills.models",
        "peekOfCode": "class WaterBill(models.Model):\n    status = (\n        ('Sold', 'Sold'),\n        ('Not Sold', 'Not Sold'),\n    )\n    id = models.AutoField(primary_key = True, unique = True)\n    code = models.CharField(max_length=100)\n    month = models.CharField(max_length=100)\n    year = models.CharField(max_length=100) \n    previous_read = models.PositiveBigIntegerField(help_text=\"ያለፈው ወር ንባብ\")\t",
        "detail": "bills.models",
        "documentation": {}
    },
    {
        "label": "InputData",
        "kind": 6,
        "importPath": "bills.models",
        "description": "bills.models",
        "peekOfCode": "class InputData(models.Model):\n    def get_current_month():\n        try:\n            current_month = Month.objects.get(status__iexact='Active')\n            month = current_month.month_english\n            return month\n        except Month.DoesNotExist:\n            return None\n    def get_current_year():\n        try:",
        "detail": "bills.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customers.migrations.0001_initial",
        "description": "customers.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('setups', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Client',\n            fields=[",
        "detail": "customers.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customers.migrations.0002_alter_client_code",
        "description": "customers.migrations.0002_alter_client_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customers', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='client',\n            name='code',\n            field=models.CharField(max_length=100, unique=True),\n        ),",
        "detail": "customers.migrations.0002_alter_client_code",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customers.migrations.0003_client_month_client_year",
        "description": "customers.migrations.0003_client_month_client_year",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customers', '0002_alter_client_code'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='client',\n            name='month',\n            field=models.CharField(default=customers.models.Client.get_current_month, max_length=50),\n        ),",
        "detail": "customers.migrations.0003_client_month_client_year",
        "documentation": {}
    },
    {
        "label": "ClientAdmin",
        "kind": 6,
        "importPath": "customers.admin",
        "description": "customers.admin",
        "peekOfCode": "class ClientAdmin(ImportExportModelAdmin):\n    pass\n    fields = [('id'), ('amharic_first_name', 'english_first_name'), ('amharic_father_name', 'english_father_name'), ('amharic_last_name', 'english_last_name'), ('gender', 'marital_status'), ('contact_number', 'destrict'), ('kebele', 'place_name'), ('zone', 'house_number'), ('code', 'service_type'), ('guage_width', 'counter_number'), ('month', 'year'), ('initial_read', 'read_date'), ('contract_number', 'contract_file'), ('customer_image', 'customer_status')]\n    list_display = ['id', 'amharic_first_name', 'amharic_father_name', 'amharic_last_name', 'gender', 'marital_status']\n    search_fields = ['id', 'amharic_first_name', 'amharic_father_name', 'amharic_last_name', 'code']\n    list_filter = ['kebele__kebele', 'zone__zone', 'service_type__service', 'month', 'year']\n    list_display_links = ['id', 'amharic_first_name', 'amharic_father_name', 'amharic_last_name', 'gender', 'marital_status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "customers.admin",
        "documentation": {}
    },
    {
        "label": "CustomersConfig",
        "kind": 6,
        "importPath": "customers.apps",
        "description": "customers.apps",
        "peekOfCode": "class CustomersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'customers'",
        "detail": "customers.apps",
        "documentation": {}
    },
    {
        "label": "Client",
        "kind": 6,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "class Client(models.Model):\n\tdef get_current_month():\n\t\ttry:\n\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\tmonth = current_month.month_english\n\t\t\treturn month\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_year():\n\t\ttry:",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_month",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\tmonth = current_month.month_english\n\t\t\treturn month\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_year():\n\t\ttry:\n\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\tyear = current_year.year\n\t\t\treturn year",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tmonth",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\t\t\tmonth = current_month.month_english\n\t\t\treturn month\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_year():\n\t\ttry:\n\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\tyear = current_year.year\n\t\t\treturn year\n\t\texcept Year.DoesNotExist:",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_year",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\tyear = current_year.year\n\t\t\treturn year\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None\n\tGender_choices = (\n\t    ('Male', 'Male'),\n\t    ('Female', 'Female'),\n\t)\n\tMarital_choices = (",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tyear",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\t\t\tyear = current_year.year\n\t\t\treturn year\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None\n\tGender_choices = (\n\t    ('Male', 'Male'),\n\t    ('Female', 'Female'),\n\t)\n\tMarital_choices = (\n\t    ('Single', 'Single'),",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tGender_choices",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tGender_choices = (\n\t    ('Male', 'Male'),\n\t    ('Female', 'Female'),\n\t)\n\tMarital_choices = (\n\t    ('Single', 'Single'),\n\t    ('Married ', 'Married'),\n\t)\n\tid = models.AutoField(primary_key = True, unique = True)\n\tamharic_first_name = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tMarital_choices",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tMarital_choices = (\n\t    ('Single', 'Single'),\n\t    ('Married ', 'Married'),\n\t)\n\tid = models.AutoField(primary_key = True, unique = True)\n\tamharic_first_name = models.CharField(max_length=100)\n\tamharic_father_name = models.CharField(max_length=100)\n\tamharic_last_name = models.CharField(max_length=100)\n\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tid = models.AutoField(primary_key = True, unique = True)\n\tamharic_first_name = models.CharField(max_length=100)\n\tamharic_father_name = models.CharField(max_length=100)\n\tamharic_last_name = models.CharField(max_length=100)\n\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tamharic_first_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tamharic_first_name = models.CharField(max_length=100)\n\tamharic_father_name = models.CharField(max_length=100)\n\tamharic_last_name = models.CharField(max_length=100)\n\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tamharic_father_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tamharic_father_name = models.CharField(max_length=100)\n\tamharic_last_name = models.CharField(max_length=100)\n\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tamharic_last_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tamharic_last_name = models.CharField(max_length=100)\n\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tenglish_first_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tenglish_first_name = models.CharField(max_length=100)\n\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tenglish_father_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tenglish_father_name = models.CharField(max_length=100)\n\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tenglish_last_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tenglish_last_name = models.CharField(max_length=100)\n\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tgender",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tgender = models.CharField(max_length=100, choices=Gender_choices)\n\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tmarital_status",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tmarital_status = models.CharField(max_length=100, choices=Marital_choices)\n\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcontact_number",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcontact_number = models.CharField(max_length=100)\n\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tdestrict",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tdestrict = models.CharField(max_length=100)\n\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tkebele",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tkebele = models.ForeignKey(Kebele, on_delete=models.CASCADE)\n\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) ",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tplace_name",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tplace_name = models.CharField(max_length=100)\n\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tzone",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tzone = models.ForeignKey(Zone, on_delete=models.CASCADE)\n\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\thouse_number",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\thouse_number = models.CharField(max_length=100)\n\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcode",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcode = models.CharField(max_length=100, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tservice_type",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tguage_width",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tguage_width = models.ForeignKey(GaugeWidth, on_delete=models.CASCADE)\n\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcounter_number",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcounter_number = models.CharField(max_length=100)\n\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tmonth",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tmonth = models.CharField(max_length=50, default=get_current_month)\n\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tyear",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tyear = models.CharField(max_length=50, default=get_current_year) \n\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tinitial_read",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tinitial_read = models.CharField(max_length=100)\n\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tread_date",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tread_date = models.CharField(max_length=100)\n\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcontract_number",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcontract_number = models.CharField(max_length=100)\n\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcontract_file",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcontract_file = models.FileField(upload_to='contracts/')\n\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcustomer_image",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcustomer_image = models.ImageField(upload_to='customer_images/')\n\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcustomer_status",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcustomer_status = models.BooleanField()\n\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcreated_by",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcreated_by = CurrentUserField(related_name=\"c1\")\n\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tcreated_at",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tcreated_at = models.DateField(auto_now=True)\n\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tmodified_by",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tmodified_by = CurrentUserField(related_name=\"m1\")\n\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "\tmodified_at",
        "kind": 5,
        "importPath": "customers.models",
        "description": "customers.models",
        "peekOfCode": "\tmodified_at = models.DateTimeField(auto_now=True)\n\tdef __str__(self):\n\t    return \"%s\" % self.amharic_first_name",
        "detail": "customers.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "periods.migrations.0001_initial",
        "description": "periods.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('setups', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Season',\n            fields=[\n                ('mid', models.AutoField(primary_key=True, serialize=False)),",
        "detail": "periods.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "SeasonAdmin",
        "kind": 6,
        "importPath": "periods.admin",
        "description": "periods.admin",
        "peekOfCode": "class SeasonAdmin(admin.ModelAdmin):\n    # pass\n    fields = ['mid', 'month', 'yid', 'year']\n    list_display = ['mid', 'month', 'yid', 'year']\n    search_fields = ['mid']\n    list_filter = ['month']\n    list_display_links = ['mid', 'month', 'yid', 'year']\n    readonly_fields = ('mid',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "periods.admin",
        "documentation": {}
    },
    {
        "label": "InputDataCurrentSeasonForm",
        "kind": 6,
        "importPath": "periods.admin",
        "description": "periods.admin",
        "peekOfCode": "class InputDataCurrentSeasonForm(forms.ModelForm):\n    class Meta:\n        model = InputDataCurrentSeason\n        fields = ['month', 'year']\n        # fields = ['uploaded_file']\n        widgets = {\n            'mid_id': forms.HiddenInput(),\n            'yid_id': forms.HiddenInput(),\n        }\nclass InputDataCurrentSeasonAdmin(admin.ModelAdmin):",
        "detail": "periods.admin",
        "documentation": {}
    },
    {
        "label": "InputDataCurrentSeasonAdmin",
        "kind": 6,
        "importPath": "periods.admin",
        "description": "periods.admin",
        "peekOfCode": "class InputDataCurrentSeasonAdmin(admin.ModelAdmin):\n    # fields = ['mid', 'month_id', 'yid', 'year_id']\n    actions = ['run_stored_procedure']\n    def run_stored_procedure(self, request, queryset):\n        for input_data in queryset:\n            with connection.cursor() as cursor:\n                cursor.execute(\"CALL `season_change`(%s, %s, %s, %s)\", [input_data.mid_id, input_data.month_id, input_data.yid_id, input_data.year_id])\n    run_stored_procedure.short_description = \"Season Change\"\nadmin.site.register(InputDataCurrentSeason, InputDataCurrentSeasonAdmin)",
        "detail": "periods.admin",
        "documentation": {}
    },
    {
        "label": "PeriodsConfig",
        "kind": 6,
        "importPath": "periods.apps",
        "description": "periods.apps",
        "peekOfCode": "class PeriodsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'periods'",
        "detail": "periods.apps",
        "documentation": {}
    },
    {
        "label": "Season",
        "kind": 6,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "class Season(models.Model):\n\t\"\"\"docstring for ItemBalance\"\"\"\n\tmid = models.AutoField(primary_key=True)\n\tmonth= models.CharField('Month', max_length=150)\n\tyid= models.CharField('Year id', max_length=150)\n\tyear= models.CharField('Year', max_length=150)\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month\n\tclass Meta:\n\t\tmanaged=False",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "InputDataCurrentSeason",
        "kind": 6,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "class InputDataCurrentSeason(models.Model):\n\tdef get_current_month_id():\n\t\ttry:\n\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\treturn current_month.id\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_month():\n\t\ttry:\n\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\tmid",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\tmid = models.AutoField(primary_key=True)\n\tmonth= models.CharField('Month', max_length=150)\n\tyid= models.CharField('Year id', max_length=150)\n\tyear= models.CharField('Year', max_length=150)\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month\n\tclass Meta:\n\t\tmanaged=False\n\t\tdb_table='Season'\n\t\t# order_by=self.mid",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_month",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\treturn current_month.id\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_month():\n\t\ttry:\n\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\treturn current_month\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_month",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\t\t\tcurrent_month = Month.objects.get(status__iexact='Active')\n\t\t\treturn current_month\n\t\texcept Month.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_year_id():\n\t\ttry:\n\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\treturn current_year.id\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_year",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\treturn current_year.id\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None\n\tdef get_current_year():\n\t\ttry:\n\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\treturn current_year\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\t\t\tcurrent_year",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\t\t\tcurrent_year = Year.objects.get(status__iexact='Active')\n\t\t\treturn current_year\n\t\texcept Year.DoesNotExist:\n\t\t\treturn None\n\tmid = models.ForeignKey(Month, on_delete=models.CASCADE, related_name='smonthid', default=get_current_month_id)\n\tmonth = models.ForeignKey(Month, on_delete=models.CASCADE, related_name='smonth', default=get_current_month)\n\tyid = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syearid', default=get_current_year_id)\n\tyear = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syear', default=get_current_year)\n\tdef __str__(self):\n\t\treturn f\"Month: {self.month}, Year: {self.year}\"",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\tmid",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\tmid = models.ForeignKey(Month, on_delete=models.CASCADE, related_name='smonthid', default=get_current_month_id)\n\tmonth = models.ForeignKey(Month, on_delete=models.CASCADE, related_name='smonth', default=get_current_month)\n\tyid = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syearid', default=get_current_year_id)\n\tyear = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syear', default=get_current_year)\n\tdef __str__(self):\n\t\treturn f\"Month: {self.month}, Year: {self.year}\"",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\tmonth",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\tmonth = models.ForeignKey(Month, on_delete=models.CASCADE, related_name='smonth', default=get_current_month)\n\tyid = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syearid', default=get_current_year_id)\n\tyear = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syear', default=get_current_year)\n\tdef __str__(self):\n\t\treturn f\"Month: {self.month}, Year: {self.year}\"",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\tyid",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\tyid = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syearid', default=get_current_year_id)\n\tyear = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syear', default=get_current_year)\n\tdef __str__(self):\n\t\treturn f\"Month: {self.month}, Year: {self.year}\"",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "\tyear",
        "kind": 5,
        "importPath": "periods.models",
        "description": "periods.models",
        "peekOfCode": "\tyear = models.ForeignKey(Year, on_delete=models.CASCADE, related_name='syear', default=get_current_year)\n\tdef __str__(self):\n\t\treturn f\"Month: {self.month}, Year: {self.year}\"",
        "detail": "periods.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reads.migrations.0001_initial",
        "description": "reads.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='InputDataSheet',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('month', models.CharField(default=reads.models.InputDataSheet.get_current_month, max_length=50)),",
        "detail": "reads.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "InputDataSheetAdmin",
        "kind": 6,
        "importPath": "reads.admin",
        "description": "reads.admin",
        "peekOfCode": "class InputDataSheetAdmin(admin.ModelAdmin):\n    # fields = ['mid', 'month_id', 'yid', 'year_id']\n    actions = ['run_stored_procedure']\n    def run_stored_procedure(self, request, queryset):\n        for input_data in queryset:\n            with connection.cursor() as cursor:\n                cursor.execute(\"CALL `prepare-sheet`(%s, %s)\", [input_data.month, input_data.year])\n    run_stored_procedure.short_description = \"Prepare reading sheets\"\nadmin.site.register(InputDataSheet, InputDataSheetAdmin)\nclass ConsumptionFilter(admin.SimpleListFilter):",
        "detail": "reads.admin",
        "documentation": {}
    },
    {
        "label": "ConsumptionFilter",
        "kind": 6,
        "importPath": "reads.admin",
        "description": "reads.admin",
        "peekOfCode": "class ConsumptionFilter(admin.SimpleListFilter):\n    title = 'Consumption'  # Displayed title in the admin sidebar\n    parameter_name = 'consumption'  # Parameter used in URL query\n    def lookups(self, request, model_admin):\n        return (\n            ('zero', 'Zero Reading'),\n            ('negative', 'Negative Reading'),\n            ('over_reading', 'Over Reading'),\n        )\n    def queryset(self, request, queryset):",
        "detail": "reads.admin",
        "documentation": {}
    },
    {
        "label": "WaterReadAdmin",
        "kind": 6,
        "importPath": "reads.admin",
        "description": "reads.admin",
        "peekOfCode": "class WaterReadAdmin(admin.ModelAdmin):\n    # pass\n    fields = ['id', 'code', 'month', 'year', 'previous_read', 'current_read', 'consumption', 'next_my']\n    list_display = ['id', 'code', 'month', 'year', 'previous_read', 'current_read', 'consumption', 'next_my']\n    search_fields = ['code']\n    list_editable = ['current_read']\n    list_filter = [ConsumptionFilter, 'month', 'year']\n    list_display_links = ['id', 'code', 'month', 'year', 'previous_read', 'consumption', 'next_my']\n    readonly_fields = ('id', 'consumption',)\n    list_per_page = 10",
        "detail": "reads.admin",
        "documentation": {}
    },
    {
        "label": "ReadsConfig",
        "kind": 6,
        "importPath": "reads.apps",
        "description": "reads.apps",
        "peekOfCode": "class ReadsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'reads'",
        "detail": "reads.apps",
        "documentation": {}
    },
    {
        "label": "InputDataSheet",
        "kind": 6,
        "importPath": "reads.models",
        "description": "reads.models",
        "peekOfCode": "class InputDataSheet(models.Model):\n    def get_current_month():\n        try:\n            current_month = Month.objects.get(status__iexact='Active')\n            month = current_month.month_english\n            return month\n        except Month.DoesNotExist:\n            return None\n    def get_current_year():\n        try:",
        "detail": "reads.models",
        "documentation": {}
    },
    {
        "label": "WaterRead",
        "kind": 6,
        "importPath": "reads.models",
        "description": "reads.models",
        "peekOfCode": "class WaterRead(models.Model):\n    def get_current_month():\n        try:\n            current_month = Month.objects.get(status__iexact='Active')\n            month = current_month.month_english\n            return month\n        except Month.DoesNotExist:\n            return None\n    def get_current_year():\n        try:",
        "detail": "reads.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "reports.migrations.0001_initial",
        "description": "reports.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Bill',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('valid_until', models.DateField()),",
        "detail": "reports.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ItemInline",
        "kind": 6,
        "importPath": "reports.admin",
        "description": "reports.admin",
        "peekOfCode": "class ItemInline(admin.TabularInline):\n    model = Item\n    extra = 0\n@admin.register(Bill)\nclass BillAdmin(admin.ModelAdmin):\n    list_display = ('valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status')\n    search_fields = ['full_name', 'phone_number']\n    list_filter = ['status']\n    list_display_links = ['valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status']\n    list_per_page = 10",
        "detail": "reports.admin",
        "documentation": {}
    },
    {
        "label": "BillAdmin",
        "kind": 6,
        "importPath": "reports.admin",
        "description": "reports.admin",
        "peekOfCode": "class BillAdmin(admin.ModelAdmin):\n    list_display = ('valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status')\n    search_fields = ['full_name', 'phone_number']\n    list_filter = ['status']\n    list_display_links = ['valid_until', 'full_name', 'phone_number', 'customer_id', 'bill_id', 'status']\n    list_per_page = 10\n    list_select_related = True\n    inlines = [ItemInline]\n    def save_model(self, request, obj, form, change):\n        # Save the Bill instance first to ensure it has a primary key",
        "detail": "reports.admin",
        "documentation": {}
    },
    {
        "label": "ReportsConfig",
        "kind": 6,
        "importPath": "reports.apps",
        "description": "reports.apps",
        "peekOfCode": "class ReportsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'reports'",
        "detail": "reports.apps",
        "documentation": {}
    },
    {
        "label": "Bill",
        "kind": 6,
        "importPath": "reports.models",
        "description": "reports.models",
        "peekOfCode": "class Bill(models.Model):\n    id = models.AutoField(primary_key=True)\n    valid_until = models.DateField()\n    full_name = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=15, blank=True)\n    customer_id = models.CharField(max_length=10)\n    bill_id = models.CharField(max_length=20)\n    status = models.CharField(max_length=20, blank=True, null=True)\n    def __str__(self):\n        return f\"{self.full_name}\"",
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "reports.models",
        "description": "reports.models",
        "peekOfCode": "class Item(models.Model):\n    bill = models.ForeignKey(Bill, related_name='items', on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    def __str__(self):\n        return f\"{self.name} - {self.price}\"\n# class BillSync(models.Model):\n#     start_date = models.DateField()\n#     end_date = models.DateField()\n#     status = models.CharField(max_length=20, blank=True, null=True)",
        "detail": "reports.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "setups.migrations.0001_initial",
        "description": "setups.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='GaugeWidth',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),\n                ('width', models.CharField(max_length=100, unique=True)),",
        "detail": "setups.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "setups.migrations.0002_remove_tariff_block_remove_tariff_consumption_from_and_more",
        "description": "setups.migrations.0002_remove_tariff_block_remove_tariff_consumption_from_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('setups', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='tariff',\n            name='block',\n        ),\n        migrations.RemoveField(",
        "detail": "setups.migrations.0002_remove_tariff_block_remove_tariff_consumption_from_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "setups.migrations.0003_alter_tariff_block1_alter_tariff_block2_and_more",
        "description": "setups.migrations.0003_alter_tariff_block1_alter_tariff_block2_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('setups', '0002_remove_tariff_block_remove_tariff_consumption_from_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tariff',\n            name='block1',\n            field=models.PositiveBigIntegerField(default=0),\n        ),",
        "detail": "setups.migrations.0003_alter_tariff_block1_alter_tariff_block2_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "setups.migrations.0004_alter_tariff_status",
        "description": "setups.migrations.0004_alter_tariff_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('setups', '0003_alter_tariff_block1_alter_tariff_block2_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='tariff',\n            name='status',\n            field=models.CharField(choices=[('Active', 'Active'), ('In Active', 'In Active')], default='Active', max_length=150),\n        ),",
        "detail": "setups.migrations.0004_alter_tariff_status",
        "documentation": {}
    },
    {
        "label": "MonthAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class MonthAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('month_amharic', 'month_english'), ('description'), 'status']\n    list_display = ['id', 'month_amharic', 'month_english', 'description', 'status']\n    search_fields = ['id', 'month_amharic', 'month_english', 'description', 'status']\n    list_filter = ['month_english']\n    list_display_links = ['id', 'month_amharic', 'month_english', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "YearAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class YearAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('year'), ('description'), 'status']\n    list_display = ['id', 'year', 'description', 'status']\n    search_fields = ['id', 'year', 'description', 'status']\n    list_filter = ['year']\n    list_display_links = ['id', 'year', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "ZoneAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class ZoneAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('zone'), ('description'), 'status']\n    list_display = ['id', 'zone', 'description', 'status']\n    search_fields = ['id', 'zone', 'description', 'status']\n    list_filter = ['zone']\n    list_display_links = ['id', 'zone', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "KebeleAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class KebeleAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('kebele'), ('description'), 'status']\n    list_display = ['id', 'kebele', 'description', 'status']\n    search_fields = ['id', 'kebele', 'description', 'status']\n    list_filter = ['kebele']\n    list_display_links = ['id', 'kebele', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "GaugeWidthAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class GaugeWidthAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('width'), ('description'), 'status']\n    list_display = ['id', 'width', 'description', 'status']\n    search_fields = ['id', 'width', 'description', 'status']\n    list_filter = ['width']\n    list_display_links = ['id', 'width', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "ServiceTypeAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class ServiceTypeAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('service'), ('description'), 'status']\n    list_display = ['id', 'service', 'description', 'status']\n    search_fields = ['id', 'service', 'description', 'status']\n    list_filter = ['service']\n    list_display_links = ['id', 'service', 'description', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "BlockAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class BlockAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('service_type'), ('name', 'value'), 'status']\n    list_display = ['id', 'service_type', 'name', 'value', 'status']\n    search_fields = ['id', 'service_type', 'name', 'value', 'status']\n    list_filter = ['service_type']\n    list_display_links = ['id', 'service_type', 'name', 'value', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "TariffAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class TariffAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('service_type'), ('min_consumption', 'max_consumption'), ('block1', 'block2'), ('block3', 'block4'), ('block5', 'status')]\n    list_display = ['id', 'service_type', 'min_consumption', 'max_consumption', 'block1', 'block2', 'block3', 'block4', 'block5', 'status']\n    search_fields = ['id', 'service_type']\n    list_filter = ['service_type']\n    list_display_links = ['id', 'service_type', 'min_consumption', 'max_consumption', 'block1', 'block2', 'block3', 'block4', 'block5', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "PenalityAdmin",
        "kind": 6,
        "importPath": "setups.admin",
        "description": "setups.admin",
        "peekOfCode": "class PenalityAdmin(admin.ModelAdmin):\n    # pass\n    fields = [('id'), ('service_type'), ('name', 'months'), ('penality', 'status')]\n    list_display = ['id', 'service_type', 'name', 'months', 'penality', 'status']\n    search_fields = ['id', 'service_type', 'name', 'months', 'penality', 'status']\n    list_filter = ['service_type']\n    list_display_links = ['id', 'service_type', 'name', 'months', 'penality', 'status']\n    readonly_fields = ('id',)\n    list_per_page = 10\n    list_select_related = True",
        "detail": "setups.admin",
        "documentation": {}
    },
    {
        "label": "SetupsConfig",
        "kind": 6,
        "importPath": "setups.apps",
        "description": "setups.apps",
        "peekOfCode": "class SetupsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'setups'",
        "detail": "setups.apps",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Month(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tmonth_amharic = models.CharField(max_length=100, unique=True)\n\tmonth_english = models.CharField(max_length=100, unique=True)\n\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Year",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Year(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tyear = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Zone",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Zone(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tzone = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Kebele",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Kebele(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tkebele = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "GaugeWidth",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class GaugeWidth(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\twidth = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "ServiceType",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class ServiceType(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Block",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Block(models.Model):\n\tstatus=(\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tvalue = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Tariff",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tmin_consumption = models.PositiveBigIntegerField(default=0)\n\tmax_consumption = models.PositiveBigIntegerField(default=0)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Penality",
        "kind": 6,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "class Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tmonths = models.PositiveIntegerField()",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tmonth_amharic = models.CharField(max_length=100, unique=True)\n\tmonth_english = models.CharField(max_length=100, unique=True)\n\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tmonth_amharic = models.CharField(max_length=100, unique=True)\n\tmonth_english = models.CharField(max_length=100, unique=True)\n\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tmonth_amharic",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tmonth_amharic = models.CharField(max_length=100, unique=True)\n\tmonth_english = models.CharField(max_length=100, unique=True)\n\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tmonth_english",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tmonth_english = models.CharField(max_length=100, unique=True)\n\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\t\tverbose_name_plural",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\t\tverbose_name_plural = \"Months\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.month_english\nclass Year(models.Model):\n\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tyear = models.CharField(max_length=100, unique=True)  ",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)\n\tid = models.AutoField(primary_key=True, unique=True)\n\tyear = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Years\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tyear = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Years\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.year\nclass Zone(models.Model):\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tyear",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tyear = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Years\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.year\nclass Zone(models.Model):\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Years\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.year\nclass Zone(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Years\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.year\nclass Zone(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\t\tverbose_name_plural",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\t\tverbose_name_plural = \"Years\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.year\nclass Zone(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tzone = models.CharField(max_length=100, unique=True)  ",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tzone = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Zones\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tzone = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Zones\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.zone\nclass Kebele(models.Model):\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tzone",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tzone = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Zones\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.zone\nclass Kebele(models.Model):\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Zones\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.zone\nclass Kebele(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Zones\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.zone\nclass Kebele(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tkebele = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Kebeles\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tkebele = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Kebeles\"\n\tdef __str__(self):\n\t    return \"%s\" % self.kebele\nclass GaugeWidth(models.Model):\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tkebele",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tkebele = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Kebeles\"\n\tdef __str__(self):\n\t    return \"%s\" % self.kebele\nclass GaugeWidth(models.Model):\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Kebeles\"\n\tdef __str__(self):\n\t    return \"%s\" % self.kebele\nclass GaugeWidth(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Kebeles\"\n\tdef __str__(self):\n\t    return \"%s\" % self.kebele\nclass GaugeWidth(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\twidth = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"widths\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\twidth = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"widths\"\n\tdef __str__(self):\n\t    return \"%s\" % self.width\nclass ServiceType(models.Model):\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\twidth",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\twidth = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"widths\"\n\tdef __str__(self):\n\t    return \"%s\" % self.width\nclass ServiceType(models.Model):\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"widths\"\n\tdef __str__(self):\n\t    return \"%s\" % self.width\nclass ServiceType(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"widths\"\n\tdef __str__(self):\n\t    return \"%s\" % self.width\nclass ServiceType(models.Model):\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Services\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tservice = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Services\"\n\tdef __str__(self):\n\t    return \"%s\" % self.service\nclass Block(models.Model):\n\tstatus=(",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tservice",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tservice = models.CharField(max_length=100, unique=True)  \n\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Services\"\n\tdef __str__(self):\n\t    return \"%s\" % self.service\nclass Block(models.Model):\n\tstatus=(\n\t\t('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tdescription",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tdescription = models.CharField(max_length=250, blank=True, null=True)\n\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Services\"\n\tdef __str__(self):\n\t    return \"%s\" % self.service\nclass Block(models.Model):\n\tstatus=(\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=50, choices=status)\n\tclass Meta:\n\t    verbose_name_plural = \"Services\"\n\tdef __str__(self):\n\t    return \"%s\" % self.service\nclass Block(models.Model):\n\tstatus=(\n\t\t('Active', 'Active'),\n\t\t('In Active', 'In Active'),\n\t)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tvalue = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tdef __str__(self):\n\t\treturn self.name\nclass Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tservice_type",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tvalue = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tdef __str__(self):\n\t\treturn self.name\nclass Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tname = models.CharField(max_length=150)\n\tvalue = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tdef __str__(self):\n\t\treturn self.name\nclass Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tvalue",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tvalue = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tdef __str__(self):\n\t\treturn self.name\nclass Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=150, choices=status)\n\tdef __str__(self):\n\t\treturn self.name\nclass Tariff(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tmin_consumption = models.PositiveBigIntegerField(default=0)\n\tmax_consumption = models.PositiveBigIntegerField(default=0)\n\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tmin_consumption = models.PositiveBigIntegerField(default=0)\n\tmax_consumption = models.PositiveBigIntegerField(default=0)\n\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tservice_type",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tmin_consumption = models.PositiveBigIntegerField(default=0)\n\tmax_consumption = models.PositiveBigIntegerField(default=0)\n\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tmin_consumption",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tmin_consumption = models.PositiveBigIntegerField(default=0)\n\tmax_consumption = models.PositiveBigIntegerField(default=0)\n\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tmax_consumption",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tmax_consumption = models.PositiveBigIntegerField(default=0)\n\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tblock1",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tblock1 = models.PositiveBigIntegerField(default=0)\n\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tblock2",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tblock2 = models.PositiveBigIntegerField(default=0)\n\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tblock3",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tblock3 = models.PositiveBigIntegerField(default=0)\n\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tblock4",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tblock4 = models.PositiveBigIntegerField(default=0)\n\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tblock5",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tblock5 = models.PositiveBigIntegerField(default=0)\n\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=150, choices=status, default='Active')\n\tdef __str__(self):\n\t\treturn self.service_type.service\nclass Penality(models.Model):\n\t\"\"\"docstring for Tariff\"\"\"\n\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = (\n        ('Active', 'Active'),\n        ('In Active', 'In Active'),\n    )\n\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tmonths = models.PositiveIntegerField()\n\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tid",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tid = models.AutoField(primary_key=True, unique=True)\n\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tmonths = models.PositiveIntegerField()\n\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tservice_type",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tservice_type = models.ForeignKey(ServiceType, on_delete=models.CASCADE)\n\tname = models.CharField(max_length=150)\n\tmonths = models.PositiveIntegerField()\n\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tname = models.CharField(max_length=150)\n\tmonths = models.PositiveIntegerField()\n\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tmonths",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tmonths = models.PositiveIntegerField()\n\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tpenality",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tpenality = models.PositiveIntegerField()\n\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\tstatus",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\tstatus = models.CharField(max_length=150, choices=status)\n\tclass Meta:\n\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "\t\tverbose_name_plural",
        "kind": 5,
        "importPath": "setups.models",
        "description": "setups.models",
        "peekOfCode": "\t\tverbose_name_plural = \"Penalities\"\n\tdef __str__(self):\n\t\treturn \"%s\" % self.name",
        "detail": "setups.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BankBook',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0002_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0002_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Balance',\n            field=models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0002_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0003_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0003_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0002_alter_bankbook_balance_alter_bankbook_deposite_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Balance',\n            field=models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=5, null=True),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0003_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0004_alter_bankbook_date",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0004_alter_bankbook_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0003_alter_bankbook_balance_alter_bankbook_deposite_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Date',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0004_alter_bankbook_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0005_alter_bankbook_date",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0005_alter_bankbook_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0004_alter_bankbook_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Date',\n            field=models.DateTimeField(),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0005_alter_bankbook_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0006_alter_bankbook_date",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0006_alter_bankbook_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0005_alter_bankbook_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Date',\n            field=models.DateField(),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0006_alter_bankbook_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.migrations.0007_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "description": "uploads.2024.04.30.officesolution.bank.migrations.0007_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('bank', '0006_alter_bankbook_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='bankbook',\n            name='Balance',\n            field=models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=9, null=True),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.bank.migrations.0007_alter_bankbook_balance_alter_bankbook_deposite_and_more",
        "documentation": {}
    },
    {
        "label": "BankBookAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "class BankBookAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('id', 'Date'),('Deposite', 'Withdrawal'),('Balance'),('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tfields = [('id', 'Date'),('Deposite', 'Withdrawal'),('Balance'),('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tlist_display = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tsearch_fields = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tlist_display_links = ['id', 'Date', 'Deposite', 'Withdrawal', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(BankBook, BankBookAdmin)",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(BankBook, BankBookAdmin)",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\t\tmodel = BankBook\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(BankBook, BankBookAdmin)",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(BankBook, BankBookAdmin)",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.bank.admin",
        "description": "uploads.2024.04.30.officesolution.bank.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(BankBook, BankBookAdmin)",
        "detail": "uploads.2024.04.30.officesolution.bank.admin",
        "documentation": {}
    },
    {
        "label": "BankConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.apps",
        "description": "uploads.2024.04.30.officesolution.bank.apps",
        "peekOfCode": "class BankConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bank'",
        "detail": "uploads.2024.04.30.officesolution.bank.apps",
        "documentation": {}
    },
    {
        "label": "BankBook",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.bank.models",
        "description": "uploads.2024.04.30.officesolution.bank.models",
        "peekOfCode": "class BankBook(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Date = models.DateField()\n    Deposite = models.DecimalField(max_digits = 9, decimal_places = 2, blank=True, null=True, default=0)\n    Withdrawal = models.DecimalField(max_digits = 9, decimal_places = 2, blank=True, null=True, default=0)\n    Balance = models.DecimalField(max_digits = 9, decimal_places = 2, blank=True, null=True, default=0)\n    Registered_at = models.DateTimeField(auto_now=True, verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by44\")\n    Registered_by = CurrentUserField(related_name=\"pl_by44\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.bank.models",
        "documentation": {}
    },
    {
        "label": "aliases",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.aliases",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.aliases",
        "peekOfCode": "aliases = {\n    # Please keep this list sorted alphabetically by value !\n    # ascii codec\n    '646'                : 'ascii',\n    'ansi_x3.4_1968'     : 'ascii',\n    'ansi_x3_4_1968'     : 'ascii', # some email headers use this non-standard name\n    'ansi_x3.4_1986'     : 'ascii',\n    'cp367'              : 'ascii',\n    'csascii'            : 'ascii',\n    'ibm367'             : 'ascii',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.aliases",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.ascii_encode\n    decode = codecs.ascii_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.ascii_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.ascii_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "StreamConverter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "class StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.ascii_decode\n    decode = codecs.ascii_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='ascii',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ascii",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.encodebytes(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return base64.decodebytes(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "base64_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "def base64_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.encodebytes(input), len(input))\ndef base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "base64_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "def base64_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (base64.decodebytes(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return base64_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return base64_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='base64',\n        encode=base64_encode,\n        decode=base64_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.base64_codec",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='big5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "peekOfCode": "codec = _codecs_tw.getcodec('big5')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='big5hkscs',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "peekOfCode": "codec = _codecs_hk.getcodec('big5hkscs')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.big5hkscs",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = bz2.BZ2Compressor()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = bz2.BZ2Decompressor()\n    def decode(self, input, final=False):\n        try:\n            return self.decompressobj.decompress(input)\n        except EOFError:\n            return ''",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "bz2_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "def bz2_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.compress(input), len(input))\ndef bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "bz2_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "def bz2_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (bz2.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return bz2_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return bz2_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name=\"bz2\",\n        encode=bz2_encode,\n        decode=bz2_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.bz2_codec",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.charmap_encode\n    decode = codecs.charmap_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.mapping = mapping\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, self.mapping)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict', mapping=None):\n        codecs.IncrementalDecoder.__init__(self, errors)\n        self.mapping = mapping\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, self.mapping)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamWriter.__init__(self,stream,errors)\n        self.mapping = mapping\n    def encode(self,input,errors='strict'):\n        return Codec.encode(input,errors,self.mapping)\nclass StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    def __init__(self,stream,errors='strict',mapping=None):\n        codecs.StreamReader.__init__(self,stream,errors)\n        self.mapping = mapping\n    def decode(self,input,errors='strict'):\n        return Codec.decode(input,errors,self.mapping)\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='charmap',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='charmap',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.charmap",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp037',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp037",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1006',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1006",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1026',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1026",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1125',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1125",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1140',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1140",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1250',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1250",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1251',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1251",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1252',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1252",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1253',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1253",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1254',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1254",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1255',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1255",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1256',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1256",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1257',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1257",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp1258',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp1258",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp273',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> NULL (NUL)\n    '\\x01'      #  0x01 -> START OF HEADING (SOH)\n    '\\x02'      #  0x02 -> START OF TEXT (STX)\n    '\\x03'      #  0x03 -> END OF TEXT (ETX)\n    '\\x9c'      #  0x04 -> STRING TERMINATOR (ST)\n    '\\t'        #  0x05 -> CHARACTER TABULATION (HT)\n    '\\x86'      #  0x06 -> START OF SELECTED AREA (SSA)\n    '\\x7f'      #  0x07 -> DELETE (DEL)\n    '\\x97'      #  0x08 -> END OF GUARDED AREA (EPA)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp273",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp424',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> SELECT\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> REQUIRED NEW LINE\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> GRAPHIC ESCAPE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp424",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp437',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp437",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp500',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp500",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = _decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = encode\nclass StreamReader(codecs.StreamReader):\n    decode = _decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = _decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = encode\nclass StreamReader(codecs.StreamReader):\n    decode = _decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp65001',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = encode\nclass StreamReader(codecs.StreamReader):\n    decode = _decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp65001',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = _decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp65001',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.code_page_decode(65001, input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = _decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp65001',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "encode = functools.partial(codecs.code_page_encode, 65001)\n_decode = functools.partial(codecs.code_page_decode, 65001)\ndef decode(input, errors='strict'):\n    return codecs.code_page_decode(65001, input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = _decode\nclass StreamWriter(codecs.StreamWriter):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "_decode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "peekOfCode": "_decode = functools.partial(codecs.code_page_decode, 65001)\ndef decode(input, errors='strict'):\n    return codecs.code_page_decode(65001, input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = _decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp65001",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp720',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> CONTROL CHARACTER\n    '\\x01'      #  0x01 -> CONTROL CHARACTER\n    '\\x02'      #  0x02 -> CONTROL CHARACTER\n    '\\x03'      #  0x03 -> CONTROL CHARACTER\n    '\\x04'      #  0x04 -> CONTROL CHARACTER\n    '\\x05'      #  0x05 -> CONTROL CHARACTER\n    '\\x06'      #  0x06 -> CONTROL CHARACTER\n    '\\x07'      #  0x07 -> CONTROL CHARACTER\n    '\\x08'      #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp720",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp737',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0391,     #  GREEK CAPITAL LETTER ALPHA\n    0x0081: 0x0392,     #  GREEK CAPITAL LETTER BETA\n    0x0082: 0x0393,     #  GREEK CAPITAL LETTER GAMMA\n    0x0083: 0x0394,     #  GREEK CAPITAL LETTER DELTA\n    0x0084: 0x0395,     #  GREEK CAPITAL LETTER EPSILON\n    0x0085: 0x0396,     #  GREEK CAPITAL LETTER ZETA\n    0x0086: 0x0397,     #  GREEK CAPITAL LETTER ETA\n    0x0087: 0x0398,     #  GREEK CAPITAL LETTER THETA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp737",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp775',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0106,     #  LATIN CAPITAL LETTER C WITH ACUTE\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x0101,     #  LATIN SMALL LETTER A WITH MACRON\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x0123,     #  LATIN SMALL LETTER G WITH CEDILLA\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp775",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp850',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp850",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp852',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x016f,     #  LATIN SMALL LETTER U WITH RING ABOVE\n    0x0086: 0x0107,     #  LATIN SMALL LETTER C WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp852",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp855',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0452,     #  CYRILLIC SMALL LETTER DJE\n    0x0081: 0x0402,     #  CYRILLIC CAPITAL LETTER DJE\n    0x0082: 0x0453,     #  CYRILLIC SMALL LETTER GJE\n    0x0083: 0x0403,     #  CYRILLIC CAPITAL LETTER GJE\n    0x0084: 0x0451,     #  CYRILLIC SMALL LETTER IO\n    0x0085: 0x0401,     #  CYRILLIC CAPITAL LETTER IO\n    0x0086: 0x0454,     #  CYRILLIC SMALL LETTER UKRAINIAN IE\n    0x0087: 0x0404,     #  CYRILLIC CAPITAL LETTER UKRAINIAN IE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp855",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp856',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp856",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp857',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp857",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp858',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp858",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp860',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e3,     #  LATIN SMALL LETTER A WITH TILDE\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00c1,     #  LATIN CAPITAL LETTER A WITH ACUTE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp860",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp861',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp861",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp862',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x05d0,     #  HEBREW LETTER ALEF\n    0x0081: 0x05d1,     #  HEBREW LETTER BET\n    0x0082: 0x05d2,     #  HEBREW LETTER GIMEL\n    0x0083: 0x05d3,     #  HEBREW LETTER DALET\n    0x0084: 0x05d4,     #  HEBREW LETTER HE\n    0x0085: 0x05d5,     #  HEBREW LETTER VAV\n    0x0086: 0x05d6,     #  HEBREW LETTER ZAYIN\n    0x0087: 0x05d7,     #  HEBREW LETTER HET",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp862",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp863',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00c2,     #  LATIN CAPITAL LETTER A WITH CIRCUMFLEX\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00b6,     #  PILCROW SIGN\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp863",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp864',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0025: 0x066a,     #  ARABIC PERCENT SIGN\n    0x0080: 0x00b0,     #  DEGREE SIGN\n    0x0081: 0x00b7,     #  MIDDLE DOT\n    0x0082: 0x2219,     #  BULLET OPERATOR\n    0x0083: 0x221a,     #  SQUARE ROOT\n    0x0084: 0x2592,     #  MEDIUM SHADE\n    0x0085: 0x2500,     #  FORMS LIGHT HORIZONTAL\n    0x0086: 0x2502,     #  FORMS LIGHT VERTICAL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp864",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp865',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0081: 0x00fc,     #  LATIN SMALL LETTER U WITH DIAERESIS\n    0x0082: 0x00e9,     #  LATIN SMALL LETTER E WITH ACUTE\n    0x0083: 0x00e2,     #  LATIN SMALL LETTER A WITH CIRCUMFLEX\n    0x0084: 0x00e4,     #  LATIN SMALL LETTER A WITH DIAERESIS\n    0x0085: 0x00e0,     #  LATIN SMALL LETTER A WITH GRAVE\n    0x0086: 0x00e5,     #  LATIN SMALL LETTER A WITH RING ABOVE\n    0x0087: 0x00e7,     #  LATIN SMALL LETTER C WITH CEDILLA",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp865",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp866',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x0410,     #  CYRILLIC CAPITAL LETTER A\n    0x0081: 0x0411,     #  CYRILLIC CAPITAL LETTER BE\n    0x0082: 0x0412,     #  CYRILLIC CAPITAL LETTER VE\n    0x0083: 0x0413,     #  CYRILLIC CAPITAL LETTER GHE\n    0x0084: 0x0414,     #  CYRILLIC CAPITAL LETTER DE\n    0x0085: 0x0415,     #  CYRILLIC CAPITAL LETTER IE\n    0x0086: 0x0416,     #  CYRILLIC CAPITAL LETTER ZHE\n    0x0087: 0x0417,     #  CYRILLIC CAPITAL LETTER ZE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp866",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp869',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: None,       #  UNDEFINED\n    0x0081: None,       #  UNDEFINED\n    0x0082: None,       #  UNDEFINED\n    0x0083: None,       #  UNDEFINED\n    0x0084: None,       #  UNDEFINED\n    0x0085: None,       #  UNDEFINED\n    0x0086: 0x0386,     #  GREEK CAPITAL LETTER ALPHA WITH TONOS\n    0x0087: None,       #  UNDEFINED",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> NULL\n    '\\x01'     #  0x0001 -> START OF HEADING\n    '\\x02'     #  0x0002 -> START OF TEXT\n    '\\x03'     #  0x0003 -> END OF TEXT\n    '\\x04'     #  0x0004 -> END OF TRANSMISSION\n    '\\x05'     #  0x0005 -> ENQUIRY\n    '\\x06'     #  0x0006 -> ACKNOWLEDGE\n    '\\x07'     #  0x0007 -> BELL\n    '\\x08'     #  0x0008 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  NULL\n    0x0001: 0x0001,     #  START OF HEADING\n    0x0002: 0x0002,     #  START OF TEXT\n    0x0003: 0x0003,     #  END OF TEXT\n    0x0004: 0x0004,     #  END OF TRANSMISSION\n    0x0005: 0x0005,     #  ENQUIRY\n    0x0006: 0x0006,     #  ACKNOWLEDGE\n    0x0007: 0x0007,     #  BELL\n    0x0008: 0x0008,     #  BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp869",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp874',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp874",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp875',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x9c'     #  0x04 -> CONTROL\n    '\\t'       #  0x05 -> HORIZONTAL TABULATION\n    '\\x86'     #  0x06 -> CONTROL\n    '\\x7f'     #  0x07 -> DELETE\n    '\\x97'     #  0x08 -> CONTROL",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp875",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp932',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "peekOfCode": "codec = _codecs_jp.getcodec('cp932')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp932",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp949',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "peekOfCode": "codec = _codecs_kr.getcodec('cp949')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp949",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='cp950',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "peekOfCode": "codec = _codecs_tw.getcodec('cp950')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.cp950",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jisx0213",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jis_2004",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "peekOfCode": "codec = _codecs_jp.getcodec('euc_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_jp",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='euc_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "peekOfCode": "codec = _codecs_kr.getcodec('euc_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.euc_kr",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gb18030',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "peekOfCode": "codec = _codecs_cn.getcodec('gb18030')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb18030",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gb2312',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "peekOfCode": "codec = _codecs_cn.getcodec('gb2312')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gb2312",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='gbk',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "peekOfCode": "codec = _codecs_cn.getcodec('gbk')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.gbk",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.b2a_hex(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        assert self.errors == 'strict'\n        return binascii.a2b_hex(input)\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "hex_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "def hex_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.b2a_hex(input), len(input))\ndef hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "hex_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "def hex_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (binascii.a2b_hex(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return hex_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return hex_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hex',\n        encode=hex_encode,\n        decode=hex_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hex_codec",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hp-roman8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hp_roman8",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='hz',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "peekOfCode": "codec = _codecs_cn.getcodec('hz')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.hz",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return b'', 0\n        try:\n            result = input.encode('ascii')\n        except UnicodeEncodeError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "class IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, input, errors, final):\n        if errors != 'strict':\n            # IDNA is quite clear that implementations must be strict\n            raise UnicodeError(\"unsupported error handling \"+errors)\n        if not input:\n            return (b'', 0)\n        labels = dots.split(input)\n        trailing_dot = b''\n        if labels:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, input, errors, final):\n        if errors != 'strict':\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        if not input:\n            return (\"\", 0)\n        # IDNA allows decoding to operate on Unicode strings, too.\n        if isinstance(input, str):\n            labels = dots.split(input)\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "nameprep",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "def nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))\n    label = \"\".join(newlabel)\n    # Normalize",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "ToASCII",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "def ToASCII(label):\n    try:\n        # Step 1: try ASCII\n        label = label.encode(\"ascii\")\n    except UnicodeError:\n        pass\n    else:\n        # Skip to step 3: UseSTD3ASCIIRules is false, so\n        # Skip to step 8.\n        if 0 < len(label) < 64:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "ToUnicode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "def ToUnicode(label):\n    # Step 1: Check for ASCII\n    if isinstance(label, bytes):\n        pure_ascii = True\n    else:\n        try:\n            label = label.encode(\"ascii\")\n            pure_ascii = True\n        except UnicodeError:\n            pure_ascii = False",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='idna',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "dots",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "dots = re.compile(\"[\\u002E\\u3002\\uFF0E\\uFF61]\")\n# IDNA section 5\nace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "ace_prefix",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "ace_prefix = b\"xn--\"\nsace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "sace_prefix",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "peekOfCode": "sace_prefix = \"xn--\"\n# This assumes query strings, so AllowUnassigned is true\ndef nameprep(label):\n    # Map\n    newlabel = []\n    for c in label:\n        if stringprep.in_table_b1(c):\n            # Map to nothing\n            continue\n        newlabel.append(stringprep.map_table_b2(c))",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.idna",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_1')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_1",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_2')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_2004",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_3')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_3",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_jp_ext',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_jp_ext')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_jp_ext",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso2022_kr',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "peekOfCode": "codec = _codecs_iso2022.getcodec('iso2022_kr')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso2022_kr",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_1",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-10',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_10",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-11',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_11",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_13",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-14',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_14",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-15',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_15",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-16',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_16",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_2",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-3',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_3",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-4',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_4",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-5',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_5",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-6',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_6",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-7',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_7",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-8',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_8",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-9',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.iso8859_9",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='johab',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "peekOfCode": "codec = _codecs_kr.getcodec('johab')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.johab",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-r',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_r",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-t',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_t",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='koi8-u',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.koi8_u",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return codecs.charmap_encode(input, errors, encoding_table)\n    def decode(self, input, errors='strict'):\n        return codecs.charmap_decode(input, errors, decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input, self.errors, encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input, self.errors, decoding_table)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    pass\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='kz1048',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "decoding_table = (\n    '\\x00'      #  0x00 -> NULL\n    '\\x01'      #  0x01 -> START OF HEADING\n    '\\x02'      #  0x02 -> START OF TEXT\n    '\\x03'      #  0x03 -> END OF TEXT\n    '\\x04'      #  0x04 -> END OF TRANSMISSION\n    '\\x05'      #  0x05 -> ENQUIRY\n    '\\x06'      #  0x06 -> ACKNOWLEDGE\n    '\\x07'      #  0x07 -> BELL\n    '\\x08'      #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "encoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "peekOfCode": "encoding_table = codecs.charmap_build(decoding_table)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.kz1048",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.latin_1_encode\n    decode = codecs.latin_1_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.latin_1_encode(input,self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.latin_1_decode(input,self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\nclass StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "StreamConverter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "class StreamConverter(StreamWriter,StreamReader):\n    encode = codecs.latin_1_decode\n    decode = codecs.latin_1_encode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='iso8859-1',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.latin_1",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_map)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_map)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-arabic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "decoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "decoding_map = codecs.make_identity_dict(range(256))\ndecoding_map.update({\n    0x0080: 0x00c4,     #  LATIN CAPITAL LETTER A WITH DIAERESIS\n    0x0081: 0x00a0,     #  NO-BREAK SPACE, right-left\n    0x0082: 0x00c7,     #  LATIN CAPITAL LETTER C WITH CEDILLA\n    0x0083: 0x00c9,     #  LATIN CAPITAL LETTER E WITH ACUTE\n    0x0084: 0x00d1,     #  LATIN CAPITAL LETTER N WITH TILDE\n    0x0085: 0x00d6,     #  LATIN CAPITAL LETTER O WITH DIAERESIS\n    0x0086: 0x00dc,     #  LATIN CAPITAL LETTER U WITH DIAERESIS\n    0x0087: 0x00e1,     #  LATIN SMALL LETTER A WITH ACUTE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x0000 -> CONTROL CHARACTER\n    '\\x01'     #  0x0001 -> CONTROL CHARACTER\n    '\\x02'     #  0x0002 -> CONTROL CHARACTER\n    '\\x03'     #  0x0003 -> CONTROL CHARACTER\n    '\\x04'     #  0x0004 -> CONTROL CHARACTER\n    '\\x05'     #  0x0005 -> CONTROL CHARACTER\n    '\\x06'     #  0x0006 -> CONTROL CHARACTER\n    '\\x07'     #  0x0007 -> CONTROL CHARACTER\n    '\\x08'     #  0x0008 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "encoding_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "peekOfCode": "encoding_map = {\n    0x0000: 0x0000,     #  CONTROL CHARACTER\n    0x0001: 0x0001,     #  CONTROL CHARACTER\n    0x0002: 0x0002,     #  CONTROL CHARACTER\n    0x0003: 0x0003,     #  CONTROL CHARACTER\n    0x0004: 0x0004,     #  CONTROL CHARACTER\n    0x0005: 0x0005,     #  CONTROL CHARACTER\n    0x0006: 0x0006,     #  CONTROL CHARACTER\n    0x0007: 0x0007,     #  CONTROL CHARACTER\n    0x0008: 0x0008,     #  CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_arabic",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-centeuro',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_centeuro",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-croatian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_croatian",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-cyrillic',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_cyrillic",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-farsi',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_farsi",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-greek',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_greek",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-iceland',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_iceland",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-latin2',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_latin2",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-roman',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_roman",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-romanian',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_romanian",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mac-turkish',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> CONTROL CHARACTER\n    '\\x01'     #  0x01 -> CONTROL CHARACTER\n    '\\x02'     #  0x02 -> CONTROL CHARACTER\n    '\\x03'     #  0x03 -> CONTROL CHARACTER\n    '\\x04'     #  0x04 -> CONTROL CHARACTER\n    '\\x05'     #  0x05 -> CONTROL CHARACTER\n    '\\x06'     #  0x06 -> CONTROL CHARACTER\n    '\\x07'     #  0x07 -> CONTROL CHARACTER\n    '\\x08'     #  0x08 -> CONTROL CHARACTER",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mac_turkish",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = mbcs_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "def decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='mbcs',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "peekOfCode": "encode = mbcs_encode\ndef decode(input, errors='strict'):\n    return mbcs_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return mbcs_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = mbcs_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = mbcs_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.mbcs",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = oem_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "def decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='oem',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "peekOfCode": "encode = oem_encode\ndef decode(input, errors='strict'):\n    return oem_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return oem_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = oem_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = oem_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.oem",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='palmos',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.palmos",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='ptcp154',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.ptcp154",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        res = punycode_encode(input)\n        return res, len(input)\n    def decode(self, input, errors='strict'):\n        if errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+errors)\n        res = punycode_decode(input, errors)\n        return res, len(input)\nclass IncrementalEncoder(codecs.IncrementalEncoder):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return punycode_encode(input)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        if self.errors not in ('strict', 'replace', 'ignore'):\n            raise UnicodeError(\"Unsupported error handling \"+self.errors)\n        return punycode_decode(input, self.errors)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "segregate",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def segregate(str):\n    \"\"\"3.1 Basic code point segregation\"\"\"\n    base = bytearray()\n    extended = set()\n    for c in str:\n        if ord(c) < 128:\n            base.append(ord(c))\n        else:\n            extended.add(c)\n    extended = sorted(extended)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "selective_len",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def selective_len(str, max):\n    \"\"\"Return the length of str, considering only characters below max.\"\"\"\n    res = 0\n    for c in str:\n        if ord(c) < max:\n            res += 1\n    return res\ndef selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "selective_find",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def selective_find(str, char, index, pos):\n    \"\"\"Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n    only ordinals up to and including char, and pos is the position in\n    the full string. index/pos is the starting position in the full\n    string.\"\"\"\n    l = len(str)\n    while 1:\n        pos += 1\n        if pos == l:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "insertion_unsort",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def insertion_unsort(str, extended):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    oldchar = 0x80\n    result = []\n    oldindex = -1\n    for c in extended:\n        index = pos = -1\n        char = ord(c)\n        curlen = selective_len(str, char)\n        delta = (curlen+1) * (char - oldchar)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def T(j, bias):\n    # Punycode parameters: tmin = 1, tmax = 26, base = 36\n    res = 36 * (j + 1) - bias\n    if res < 1: return 1\n    if res > 26: return 26\n    return res\ndigits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "generate_generalized_integer",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)\n        result.append(digits[t + ((N - t) % (36 - t))])",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "adapt",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def adapt(delta, first, numchars):\n    if first:\n        delta //= 700\n    else:\n        delta //= 2\n    delta += delta // numchars\n    # ((base - tmin) * tmax) // 2 == 455\n    divisions = 0\n    while delta > 455:\n        delta = delta // 35 # base - tmin",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "generate_integers",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def generate_integers(baselen, deltas):\n    \"\"\"3.4 Bias adaptation\"\"\"\n    # Punycode parameters: initial bias = 72, damp = 700, skew = 38\n    result = bytearray()\n    bias = 72\n    for points, delta in enumerate(deltas):\n        s = generate_generalized_integer(delta, bias)\n        result.extend(s)\n        bias = adapt(delta, points==0, baselen+points+1)\n    return bytes(result)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "punycode_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def punycode_encode(text):\n    base, extended = segregate(text)\n    deltas = insertion_unsort(text, extended)\n    extended = generate_integers(len(base), deltas)\n    if base:\n        return base + b\"-\" + extended\n    return extended\n##################### Decoding #####################################\ndef decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "decode_generalized_number",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def decode_generalized_number(extended, extpos, bias, errors):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = 0\n    w = 1\n    j = 0\n    while 1:\n        try:\n            char = ord(extended[extpos])\n        except IndexError:\n            if errors == \"strict\":",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "insertion_sort",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def insertion_sort(base, extended, errors):\n    \"\"\"3.2 Insertion unsort coding\"\"\"\n    char = 0x80\n    pos = -1\n    bias = 72\n    extpos = 0\n    while extpos < len(extended):\n        newpos, delta = decode_generalized_number(extended, extpos,\n                                                  bias, errors)\n        if delta is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "punycode_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def punycode_decode(text, errors):\n    if isinstance(text, str):\n        text = text.encode(\"ascii\")\n    if isinstance(text, memoryview):\n        text = bytes(text)\n    pos = text.rfind(b\"-\")\n    if pos == -1:\n        base = \"\"\n        extended = str(text, \"ascii\").upper()\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='punycode',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "digits",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "peekOfCode": "digits = b\"abcdefghijklmnopqrstuvwxyz0123456789\"\ndef generate_generalized_integer(N, bias):\n    \"\"\"3.3 Generalized variable-length integers\"\"\"\n    result = bytearray()\n    j = 0\n    while 1:\n        t = T(j, bias)\n        if N < t:\n            result.append(digits[N])\n            return bytes(result)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.punycode",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return quopri_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return quopri_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return quopri_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n# encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "quopri_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "def quopri_encode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.encode(f, g, quotetabs=True)\n    return (g.getvalue(), len(input))\ndef quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "quopri_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "def quopri_decode(input, errors='strict'):\n    assert errors == 'strict'\n    f = BytesIO(input)\n    g = BytesIO()\n    quopri.decode(f, g)\n    return (g.getvalue(), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return quopri_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='quopri',\n        encode=quopri_encode,\n        decode=quopri_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.quopri_codec",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.raw_unicode_escape_encode\n    decode = codecs.raw_unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.raw_unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.raw_unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='raw-unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.raw_unicode_escape",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\n    def decode(self, input, errors='strict'):\n        return (str.translate(input, rot13_map), len(input))\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return str.translate(input, rot13_map)\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='rot-13',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "rot13",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "def rot13(infile, outfile):\n    outfile.write(codecs.encode(infile.read(), 'rot-13'))\nif __name__ == '__main__':\n    import sys\n    rot13(sys.stdin, sys.stdout)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "rot13_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "peekOfCode": "rot13_map = codecs.make_identity_dict(range(256))\nrot13_map.update({\n   0x0041: 0x004e,\n   0x0042: 0x004f,\n   0x0043: 0x0050,\n   0x0044: 0x0051,\n   0x0045: 0x0052,\n   0x0046: 0x0053,\n   0x0047: 0x0054,\n   0x0048: 0x0055,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.rot_13",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jis')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jisx0213',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jisx0213')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jisx0213",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "class Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "class IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "class IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "class StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "class StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\ndef getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='shift_jis_2004',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "codec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "peekOfCode": "codec = _codecs_jp.getcodec('shift_jis_2004')\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.shift_jis_2004",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        return codecs.charmap_encode(input,errors,encoding_table)\n    def decode(self,input,errors='strict'):\n        return codecs.charmap_decode(input,errors,decoding_table)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.charmap_encode(input,self.errors,encoding_table)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='tis-620',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "decoding_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "peekOfCode": "decoding_table = (\n    '\\x00'     #  0x00 -> NULL\n    '\\x01'     #  0x01 -> START OF HEADING\n    '\\x02'     #  0x02 -> START OF TEXT\n    '\\x03'     #  0x03 -> END OF TEXT\n    '\\x04'     #  0x04 -> END OF TRANSMISSION\n    '\\x05'     #  0x05 -> ENQUIRY\n    '\\x06'     #  0x06 -> ACKNOWLEDGE\n    '\\x07'     #  0x07 -> BELL\n    '\\x08'     #  0x08 -> BACKSPACE",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.tis_620",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\n    def decode(self,input,errors='strict'):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        raise UnicodeError(\"undefined encoding\")\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='undefined',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.undefined",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.unicode_escape_encode\n    decode = codecs.unicode_escape_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_escape_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_escape_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='unicode-escape',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_escape",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "class Codec(codecs.Codec):\n    # Note: Binding these as C functions will result in the class not\n    # converting them to methods. This is intended.\n    encode = codecs.unicode_internal_encode\n    decode = codecs.unicode_internal_decode\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_internal_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.unicode_internal_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_internal_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return codecs.unicode_internal_decode(input, self.errors)[0]\nclass StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "class StreamWriter(Codec,codecs.StreamWriter):\n    pass\nclass StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-internal',\n        encode=Codec.encode,\n        decode=Codec.decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "class StreamReader(Codec,codecs.StreamReader):\n    pass\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='unicode-internal',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='unicode-internal',\n        encode=Codec.encode,\n        decode=Codec.decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamwriter=StreamWriter,\n        streamreader=StreamReader,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.unicode_internal",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_16_le_encode\n            else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_16_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_16_le_decode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        codecs.StreamWriter.__init__(self, stream, errors)\n        self.encoder = None\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, errors)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_16_ex_decode(input, errors, 0, False)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "peekOfCode": "encode = codecs.utf_16_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_16_encode(input, self.errors)[0]",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "peekOfCode": "encode = codecs.utf_16_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_be_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_be",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_16_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-16-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "peekOfCode": "encode = codecs.utf_16_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_16_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_16_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_16_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_16_le_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_16_le",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':\n                self.encoder = codecs.utf_32_le_encode\n            else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.decoder = None\n    def _buffer_decode(self, input, errors, final):\n        if self.decoder is None:\n            (output, consumed, byteorder) = \\\n                codecs.utf_32_ex_decode(input, errors, 0, final)\n            if byteorder == -1:\n                self.decoder = codecs.utf_32_le_decode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def __init__(self, stream, errors='strict'):\n        self.encoder = None\n        codecs.StreamWriter.__init__(self, stream, errors)\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        self.encoder = None\n    def encode(self, input, errors='strict'):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, errors)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        (object, consumed, byteorder) = \\\n            codecs.utf_32_ex_decode(input, errors, 0, False)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]\n            if sys.byteorder == 'little':",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "peekOfCode": "encode = codecs.utf_32_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.encoder = None\n    def encode(self, input, final=False):\n        if self.encoder is None:\n            result = codecs.utf_32_encode(input, self.errors)[0]",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_be_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-be',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "peekOfCode": "encode = codecs.utf_32_be_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_be_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_be_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_be_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_be_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_be",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_32_le_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-32-le',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "peekOfCode": "encode = codecs.utf_32_le_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_32_le_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_32_le_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_32_le_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_32_le_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_32_le",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_7_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-7',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "peekOfCode": "encode = codecs.utf_7_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_7_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_7_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_7_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_7_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_7",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    decode = codecs.utf_8_decode\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "def decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode\nclass StreamReader(codecs.StreamReader):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-8',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "peekOfCode": "encode = codecs.utf_8_encode\ndef decode(input, errors='strict'):\n    return codecs.utf_8_decode(input, errors, True)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return codecs.utf_8_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    _buffer_decode = codecs.utf_8_decode\nclass StreamWriter(codecs.StreamWriter):\n    encode = codecs.utf_8_encode",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)\n        self.first = 1\n    def encode(self, input, final=False):\n        if self.first:\n            self.first = 0\n            return codecs.BOM_UTF8 + \\\n                   codecs.utf_8_encode(input, self.errors)[0]\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "class IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def __init__(self, errors='strict'):\n        codecs.BufferedIncrementalDecoder.__init__(self, errors)\n        self.first = 1\n    def _buffer_decode(self, input, errors, final):\n        if self.first:\n            if len(input) < 3:\n                if codecs.BOM_UTF8.startswith(input):\n                    # not enough data to decide if this really is a BOM\n                    # => try again on the next call",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "class StreamWriter(codecs.StreamWriter):\n    def reset(self):\n        codecs.StreamWriter.reset(self)\n        try:\n            del self.encode\n        except AttributeError:\n            pass\n    def encode(self, input, errors='strict'):\n        self.encode = codecs.utf_8_encode\n        return encode(input, errors)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "class StreamReader(codecs.StreamReader):\n    def reset(self):\n        codecs.StreamReader.reset(self)\n        try:\n            del self.decode\n        except AttributeError:\n            pass\n    def decode(self, input, errors='strict'):\n        if len(input) < 3:\n            if codecs.BOM_UTF8.startswith(input):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "def encode(input, errors='strict'):\n    return (codecs.BOM_UTF8 + codecs.utf_8_encode(input, errors)[0],\n            len(input))\ndef decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "def decode(input, errors='strict'):\n    prefix = 0\n    if input[:3] == codecs.BOM_UTF8:\n        input = input[3:]\n        prefix = 3\n    (output, consumed) = codecs.utf_8_decode(input, errors, True)\n    return (output, consumed+prefix)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        codecs.IncrementalEncoder.__init__(self, errors)",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='utf-8-sig',\n        encode=encode,\n        decode=decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.utf_8_sig",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return uu_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return uu_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def encode(self, input, final=False):\n        return uu_encode(input, self.errors)[0]\nclass IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def decode(self, input, final=False):\n        return uu_decode(input, self.errors)[0]\nclass StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "uu_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "def uu_encode(input, errors='strict', filename='<data>', mode=0o666):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    read = infile.read\n    write = outfile.write\n    # Encode\n    write(('begin %o %s\\n' % (mode & 0o777, filename)).encode('ascii'))\n    chunk = read(45)\n    while chunk:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "uu_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "def uu_decode(input, errors='strict'):\n    assert errors == 'strict'\n    infile = BytesIO(input)\n    outfile = BytesIO()\n    readline = infile.readline\n    write = outfile.write\n    # Find start of encoded data\n    while 1:\n        s = readline()\n        if not s:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='uu',\n        encode=uu_encode,\n        decode=uu_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.uu_codec",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "class Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "class IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.compressobj = zlib.compressobj()\n    def encode(self, input, final=False):\n        if final:\n            c = self.compressobj.compress(input)\n            return c + self.compressobj.flush()\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "class IncrementalDecoder(codecs.IncrementalDecoder):\n    def __init__(self, errors='strict'):\n        assert errors == 'strict'\n        self.errors = errors\n        self.decompressobj = zlib.decompressobj()\n    def decode(self, input, final=False):\n        if final:\n            c = self.decompressobj.decompress(input)\n            return c + self.decompressobj.flush()\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "class StreamWriter(Codec, codecs.StreamWriter):\n    charbuffertype = bytes\nclass StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "class StreamReader(Codec, codecs.StreamReader):\n    charbuffertype = bytes\n### encodings module API\ndef getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "zlib_encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "def zlib_encode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.compress(input), len(input))\ndef zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "zlib_decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "def zlib_decode(input, errors='strict'):\n    assert errors == 'strict'\n    return (zlib.decompress(input), len(input))\nclass Codec(codecs.Codec):\n    def encode(self, input, errors='strict'):\n        return zlib_encode(input, errors)\n    def decode(self, input, errors='strict'):\n        return zlib_decode(input, errors)\nclass IncrementalEncoder(codecs.IncrementalEncoder):\n    def __init__(self, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "getregentry",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "description": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "peekOfCode": "def getregentry():\n    return codecs.CodecInfo(\n        name='zlib',\n        encode=zlib_encode,\n        decode=zlib_decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n        _is_text_encoding=False,",
        "detail": "uploads.2024.04.30.officesolution.Lib.encodings.zlib_codec",
        "documentation": {}
    },
    {
        "label": "Finder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class Finder(metaclass=abc.ABCMeta):\n    \"\"\"Legacy abstract base class for import finders.\n    It may be subclassed for compatibility with legacy third party\n    reimplementations of the import system.  Otherwise, finder\n    implementations should derive from the more specific MetaPathFinder\n    or PathEntryFinder ABCs.\n    Deprecated since Python 3.3\n    \"\"\"\n    @abc.abstractmethod\n    def find_module(self, fullname, path=None):",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "MetaPathFinder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class MetaPathFinder(Finder):\n    \"\"\"Abstract base class for import finders on sys.meta_path.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_module(self, fullname, path):\n        \"\"\"Return a loader for the module.\n        If no module is found, return None.  The fullname is a str and\n        the path is a list of strings or None.\n        This method is deprecated since Python 3.4 in favor of\n        finder.find_spec(). If find_spec() exists then backwards-compatible",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "PathEntryFinder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class PathEntryFinder(Finder):\n    \"\"\"Abstract base class for path entry finders used by PathFinder.\"\"\"\n    # We don't define find_spec() here since that would break\n    # hasattr checks we do to support backward compatibility.\n    def find_loader(self, fullname):\n        \"\"\"Return (loader, namespace portion) for the path entry.\n        The fullname is a str.  The namespace portion is a sequence of\n        path entries contributing to part of a namespace package. The\n        sequence may be empty.  If loader is not None, the portion will\n        be ignored.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "Loader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class Loader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class for import loaders.\"\"\"\n    def create_module(self, spec):\n        \"\"\"Return a module to initialize and into which to load.\n        This method should raise ImportError if anything prevents it\n        from creating a new module.  It may return None to indicate\n        that the spec should create the new module.\n        \"\"\"\n        # By default, defer to default semantics for the new module.\n        return None",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "ResourceLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class ResourceLoader(Loader):\n    \"\"\"Abstract base class for loaders which can return data from their\n    back-end storage.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_data(self, path):\n        \"\"\"Abstract method which when implemented should return the bytes for\n        the specified path.  The path must be a str.\"\"\"\n        raise OSError",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "InspectLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class InspectLoader(Loader):\n    \"\"\"Abstract base class for loaders which support inspection about the\n    modules they can load.\n    This ABC represents one of the optional protocols specified by PEP 302.\n    \"\"\"\n    def is_package(self, fullname):\n        \"\"\"Optional method which when implemented should return whether the\n        module is a package.  The fullname is a str.  Returns a bool.\n        Raises ImportError if the module cannot be found.\n        \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "ExecutionLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class ExecutionLoader(InspectLoader):\n    \"\"\"Abstract base class for loaders that wish to support the execution of\n    modules as scripts.\n    This ABC represents one of the optional protocols specified in PEP 302.\n    \"\"\"\n    @abc.abstractmethod\n    def get_filename(self, fullname):\n        \"\"\"Abstract method which should return the value that __file__ is to be\n        set to.\n        Raises ImportError if the module cannot be found.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "FileLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class FileLoader(_bootstrap_external.FileLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class partially implementing the ResourceLoader and\n    ExecutionLoader ABCs.\"\"\"\n_register(FileLoader, machinery.SourceFileLoader,\n            machinery.SourcelessFileLoader)\nclass SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "SourceLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class SourceLoader(_bootstrap_external.SourceLoader, ResourceLoader, ExecutionLoader):\n    \"\"\"Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\n    loading from bytecode, the optional methods specified directly by this ABC\n    is required.\n    Inherited abstractmethods not implemented in this ABC:\n        * ResourceLoader.get_data\n        * ExecutionLoader.get_filename",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "ResourceReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "peekOfCode": "class ResourceReader(metaclass=abc.ABCMeta):\n    \"\"\"Abstract base class to provide resource-reading support.\n    Loaders that support resource reading are expected to implement\n    the ``get_resource_reader(fullname)`` method and have it either return None\n    or an object compatible with this ABC.\n    \"\"\"\n    @abc.abstractmethod\n    def open_resource(self, resource):\n        \"\"\"Return an opened, file-like object for binary reading.\n        The 'resource' argument is expected to represent only a file name",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.abc",
        "documentation": {}
    },
    {
        "label": "all_suffixes",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.machinery",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.machinery",
        "peekOfCode": "def all_suffixes():\n    \"\"\"Returns a list of all recognized module suffixes for this process\"\"\"\n    return SOURCE_SUFFIXES + BYTECODE_SUFFIXES + EXTENSION_SUFFIXES",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.machinery",
        "documentation": {}
    },
    {
        "label": "_ZipImportResourceReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "class _ZipImportResourceReader(resources_abc.ResourceReader):\n    \"\"\"Private class used to support ZipImport.get_resource_reader().\n    This class is allowed to reference all the innards and private parts of\n    the zipimporter.\n    \"\"\"\n    def __init__(self, zipimporter, fullname):\n        self.zipimporter = zipimporter\n        self.fullname = fullname\n    def open_resource(self, resource):\n        fullname_as_path = self.fullname.replace('.', '/')",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "open_binary",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def open_binary(package: Package, resource: Resource) -> BinaryIO:\n    \"\"\"Return a file-like object opened for binary reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.open_resource(resource)\n    _check_location(package)\n    absolute_package_path = os.path.abspath(package.__spec__.origin)\n    package_path = os.path.dirname(absolute_package_path)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "open_text",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def open_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> TextIO:\n    \"\"\"Return a file-like object opened for text reading of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return TextIOWrapper(reader.open_resource(resource), encoding, errors)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "read_binary",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def read_binary(package: Package, resource: Resource) -> bytes:\n    \"\"\"Return the binary contents of the resource.\"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)\n    with open_binary(package, resource) as fp:\n        return fp.read()\ndef read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "read_text",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def read_text(package: Package,\n              resource: Resource,\n              encoding: str = 'utf-8',\n              errors: str = 'strict') -> str:\n    \"\"\"Return the decoded string of the resource.\n    The decoding-related arguments have the same semantics as those of\n    bytes.decode().\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def path(package: Package, resource: Resource) -> Iterator[Path]:\n    \"\"\"A context manager providing a file path object to the resource.\n    If the resource does not already exist on its own on the file system,\n    a temporary file will be created. If the file was created, the file\n    will be deleted upon exiting the context manager (no exception is\n    raised if the file was deleted prior to the context manager\n    exiting).\n    \"\"\"\n    resource = _normalize_path(resource)\n    package = _get_package(package)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "is_resource",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def is_resource(package: Package, name: str) -> bool:\n    \"\"\"True if 'name' is a resource inside 'package'.\n    Directories are *not* resources.\n    \"\"\"\n    package = _get_package(package)\n    _normalize_path(name)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.is_resource(name)\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "contents",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "def contents(package: Package) -> Iterable[str]:\n    \"\"\"Return an iterable of entries in 'package'.\n    Note that not all entries are resources.  Specifically, directories are\n    not considered resources.  Use `is_resource()` on each entry returned here\n    to check if it is a resource or not.\n    \"\"\"\n    package = _get_package(package)\n    reader = _get_resource_reader(package)\n    if reader is not None:\n        return reader.contents()",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "__all__ = [\n    'Package',\n    'Resource',\n    'contents',\n    'is_resource',\n    'open_binary',\n    'open_text',\n    'path',\n    'read_binary',\n    'read_text',",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "Package",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "Package = Union[str, ModuleType]\nResource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "peekOfCode": "Resource = Union[str, os.PathLike]\ndef _get_package(package) -> ModuleType:\n    \"\"\"Take a package name or module object and return the module.\n    If a name, the module is imported.  If the passed or imported module\n    object is not a package, raise an exception.\n    \"\"\"\n    if hasattr(package, '__spec__'):\n        if package.__spec__.submodule_search_locations is None:\n            raise TypeError('{!r} is not a package'.format(\n                package.__spec__.name))",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.resources",
        "documentation": {}
    },
    {
        "label": "_LazyModule",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "class _LazyModule(types.ModuleType):\n    \"\"\"A subclass of the module type which triggers loading upon attribute access.\"\"\"\n    def __getattribute__(self, attr):\n        \"\"\"Trigger the load of the module and return the attribute.\"\"\"\n        # All module metadata must be garnered from __spec__ in order to avoid\n        # using mutated values.\n        # Stop triggering this method.\n        self.__class__ = types.ModuleType\n        # Get the original name to make sure no object substitution occurred\n        # in sys.modules.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "LazyLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "class LazyLoader(abc.Loader):\n    \"\"\"A loader that creates a module which defers loading until attribute access.\"\"\"\n    @staticmethod\n    def __check_eager_loader(loader):\n        if not hasattr(loader, 'exec_module'):\n            raise TypeError('loader must define exec_module()')\n    @classmethod\n    def factory(cls, loader):\n        \"\"\"Construct a callable which returns the eager loader made lazy.\"\"\"\n        cls.__check_eager_loader(loader)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "source_hash",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def source_hash(source_bytes):\n    \"Return the hash of *source_bytes* as used in hash-based pyc files.\"\n    return _imp.source_hash(_RAW_MAGIC_NUMBER, source_bytes)\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "resolve_name",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n    level = 0\n    for character in name:\n        if character != '.':",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "find_spec",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def find_spec(name, package=None):\n    \"\"\"Return the spec for the specified module.\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n    If the name is for submodule (contains a dot), the parent module is\n    automatically imported.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "set_package",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_package_wrapper(*args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "set_loader",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\n    This function is deprecated.\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_loader_wrapper(self, *args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(self, *args, **kwargs)\n        if getattr(module, '__loader__', None) is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "module_for_loader",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "peekOfCode": "def module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n    If an exception is raised and the decorator created the module it is",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib.util",
        "documentation": {}
    },
    {
        "label": "_DeadlockError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_ModuleLock",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()\n        self.name = name\n        self.owner = None",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_DummyModuleLock",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _DummyModuleLock:\n    \"\"\"A simple _ModuleLock equivalent for Python builds without\n    multi-threading support.\"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.count = 0\n    def acquire(self):\n        self.count += 1\n        return True\n    def release(self):",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_ModuleLockManager",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _ModuleLockManager:\n    def __init__(self, name):\n        self._name = name\n        self._lock = None\n    def __enter__(self):\n        self._lock = _get_module_lock(self._name)\n        self._lock.acquire()\n    def __exit__(self, *args, **kwargs):\n        self._lock.release()\n# The following two functions are for consumption by Python/import.c.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_installed_safely",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _installed_safely:\n    def __init__(self, module):\n        self._module = module\n        self._spec = module.__spec__\n    def __enter__(self):\n        # This must be done before putting the module in sys.modules\n        # (otherwise an optimization shortcut in import.c becomes\n        # wrong)\n        self._spec._initializing = True\n        sys.modules[self._spec.name] = self._module",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "ModuleSpec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class ModuleSpec:\n    \"\"\"The specification for a module, used for loading.\n    A module's spec is the source for information about the module.  For\n    data associated with the module, including source, use the spec's\n    loader.\n    `name` is the absolute name of the module.  `loader` is the loader\n    to use when loading the module.  `parent` is the name of the\n    package the module is in.  The parent is derived from the name.\n    `is_package` determines if the module is considered a package or\n    not.  On modules this is reflected by the `__path__` attribute.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "BuiltinImporter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class BuiltinImporter:\n    \"\"\"Meta path import for built-in modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @staticmethod\n    def module_repr(module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "FrozenImporter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class FrozenImporter:\n    \"\"\"Meta path import for frozen modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @staticmethod\n    def module_repr(m):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_ImportLockContext",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "class _ImportLockContext:\n    \"\"\"Context manager for the import lock.\"\"\"\n    def __enter__(self):\n        \"\"\"Acquire the import lock.\"\"\"\n        _imp.acquire_lock()\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"Release the import lock regardless of any raised exceptions.\"\"\"\n        _imp.release_lock()\ndef _resolve_name(name, package, level):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "spec_from_loader",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "def spec_from_loader(name, loader, *, origin=None, is_package=None):\n    \"\"\"Return a module spec based on various loader methods.\"\"\"\n    if hasattr(loader, 'get_filename'):\n        if _bootstrap_external is None:\n            raise NotImplementedError\n        spec_from_file_location = _bootstrap_external.spec_from_file_location\n        if is_package is None:\n            return spec_from_file_location(name, loader=loader)\n        search = [] if is_package else None\n        return spec_from_file_location(name, loader=loader,",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "module_from_spec",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "def module_from_spec(spec):\n    \"\"\"Create a module based on the provided spec.\"\"\"\n    # Typically loaders will not implement create_module().\n    module = None\n    if hasattr(spec.loader, 'create_module'):\n        # If create_module() returns `None` then it means default\n        # module creation should be used.\n        module = spec.loader.create_module(spec)\n    elif hasattr(spec.loader, 'exec_module'):\n        raise ImportError('loaders that define exec_module() '",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_bootstrap_external",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_bootstrap_external = None\ndef _wrap(new, old):\n    \"\"\"Simple substitute for functools.update_wrapper.\"\"\"\n    for replace in ['__module__', '__name__', '__qualname__', '__doc__']:\n        if hasattr(old, replace):\n            setattr(new, replace, getattr(old, replace))\n    new.__dict__.update(old.__dict__)\ndef _new_module(name):\n    return type(sys)(name)\n# Module-level locking ########################################################",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_module_locks",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_module_locks = {}\n# A dict mapping thread ids to _ModuleLock instances\n_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_blocking_on",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_ERR_MSG_PREFIX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_ERR_MSG_PREFIX = 'No module named '\n_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_ERR_MSG",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_ERR_MSG = _ERR_MSG_PREFIX + '{!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        # Crazy side-effects!\n        if name in sys.modules:\n            return sys.modules[name]",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "_NEEDS_LOADING",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "peekOfCode": "_NEEDS_LOADING = object()\ndef _find_and_load(name, import_):\n    \"\"\"Find and load the module.\"\"\"\n    with _ModuleLockManager(name):\n        module = sys.modules.get(name, _NEEDS_LOADING)\n        if module is _NEEDS_LOADING:\n            return _find_and_load_unlocked(name, import_)\n    if module is None:\n        message = ('import of {} halted; '\n                   'None in sys.modules'.format(name))",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap",
        "documentation": {}
    },
    {
        "label": "WindowsRegistryFinder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class WindowsRegistryFinder:\n    \"\"\"Meta path finder for modules declared in the Windows registry.\"\"\"\n    REGISTRY_KEY = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}')\n    REGISTRY_KEY_DEBUG = (\n        'Software\\\\Python\\\\PythonCore\\\\{sys_version}'\n        '\\\\Modules\\\\{fullname}\\\\Debug')\n    DEBUG_BUILD = False  # Changed in _setup()\n    @classmethod",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_LoaderBasics",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class _LoaderBasics:\n    \"\"\"Base class of common code needed by both SourceLoader and\n    SourcelessFileLoader.\"\"\"\n    def is_package(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.is_package by checking if\n        the path returned by get_filename has a filename of '__init__.py'.\"\"\"\n        filename = _path_split(self.get_filename(fullname))[1]\n        filename_base = filename.rsplit('.', 1)[0]\n        tail_name = fullname.rpartition('.')[2]\n        return filename_base == '__init__' and tail_name != '__init__'",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "SourceLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class SourceLoader(_LoaderBasics):\n    def path_mtime(self, path):\n        \"\"\"Optional method that returns the modification time (an int) for the\n        specified path, where path is a str.\n        Raises OSError when the path cannot be handled.\n        \"\"\"\n        raise OSError\n    def path_stats(self, path):\n        \"\"\"Optional method returning a metadata dict for the specified path\n        to by the path (str).",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "FileLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class FileLoader:\n    \"\"\"Base file loader class which implements the loader protocol methods that\n    require file system usage.\"\"\"\n    def __init__(self, fullname, path):\n        \"\"\"Cache the module name and the path to the file found by the\n        finder.\"\"\"\n        self.name = fullname\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "SourceFileLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class SourceFileLoader(FileLoader, SourceLoader):\n    \"\"\"Concrete implementation of SourceLoader using the file system.\"\"\"\n    def path_stats(self, path):\n        \"\"\"Return the metadata for the path.\"\"\"\n        st = _path_stat(path)\n        return {'mtime': st.st_mtime, 'size': st.st_size}\n    def _cache_bytecode(self, source_path, bytecode_path, data):\n        # Adapt between the two APIs\n        mode = _calc_mode(source_path)\n        return self.set_data(bytecode_path, data, _mode=mode)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "SourcelessFileLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class SourcelessFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader which handles sourceless file imports.\"\"\"\n    def get_code(self, fullname):\n        path = self.get_filename(fullname)\n        data = self.get_data(path)\n        # Call _classify_pyc to do basic validation of the pyc but ignore the\n        # result. There's no source to check against.\n        exc_details = {\n            'name': fullname,\n            'path': path,",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "ExtensionFileLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and\n                self.__dict__ == other.__dict__)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_NamespacePath",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class _NamespacePath:\n    \"\"\"Represents a namespace package's path.  It uses the module name\n    to find its parent module, and from there it looks up the parent's\n    __path__.  When this changes, the module's own path is recomputed,\n    using path_finder.  For top-level modules, the parent module's path\n    is sys.path.\"\"\"\n    def __init__(self, name, path, path_finder):\n        self._name = name\n        self._path = path\n        self._last_parent_path = tuple(self._get_parent_path())",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_NamespaceLoader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class _NamespaceLoader:\n    def __init__(self, name, path, path_finder):\n        self._path = _NamespacePath(name, path, path_finder)\n    @classmethod\n    def module_repr(cls, module):\n        \"\"\"Return repr for the module.\n        The method is deprecated.  The import machinery does the job itself.\n        \"\"\"\n        return '<module {!r} (namespace)>'.format(module.__name__)\n    def is_package(self, fullname):",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "PathFinder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class PathFinder:\n    \"\"\"Meta path finder for sys.path and package __path__ attributes.\"\"\"\n    @classmethod\n    def invalidate_caches(cls):\n        \"\"\"Call the invalidate_caches() method on all path entry finders\n        stored in sys.path_importer_caches (where implemented).\"\"\"\n        for name, finder in list(sys.path_importer_cache.items()):\n            if finder is None:\n                del sys.path_importer_cache[name]\n            elif hasattr(finder, 'invalidate_caches'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "FileFinder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "class FileFinder:\n    \"\"\"File-based finder.\n    Interactions with the file system are cached for performance, being\n    refreshed when the directory the finder is handling has been modified.\n    \"\"\"\n    def __init__(self, path, *loader_details):\n        \"\"\"Initialize with the path to search on and a variable number of\n        2-tuples containing the loader and the file suffixes the loader\n        recognizes.\"\"\"\n        loaders = []",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "cache_from_source",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "def cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,\n    a True value is the same as setting 'optimization' to the empty string",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "source_from_cache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "def source_from_cache(path):\n    \"\"\"Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147/488 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    if sys.implementation.cache_tag is None:\n        raise NotImplementedError('sys.implementation.cache_tag is None')\n    path = _os.fspath(path)",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "decode_source",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "def decode_source(source_bytes):\n    \"\"\"Decode bytes representing source code and return the string.\n    Universal newline support is used in the decoding.\n    \"\"\"\n    import tokenize  # To avoid bootstrap issues.\n    source_bytes_readline = _io.BytesIO(source_bytes).readline\n    encoding = tokenize.detect_encoding(source_bytes_readline)\n    newline_decoder = _io.IncrementalNewlineDecoder(None, True)\n    return newline_decoder.decode(source_bytes.decode(encoding[0]))\n# Module specifications #######################################################",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "spec_from_file_location",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "def spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"\n    if location is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS_STR_KEY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS_STR_KEY = 'win',\n_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY = 'cygwin', 'darwin'\n_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_CASE_INSENSITIVE_PLATFORMS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_CASE_INSENSITIVE_PLATFORMS =  (_CASE_INSENSITIVE_PLATFORMS_BYTES_KEY\n                                + _CASE_INSENSITIVE_PLATFORMS_STR_KEY)\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS_STR_KEY):\n            key = 'PYTHONCASEOK'\n        else:\n            key = b'PYTHONCASEOK'\n        def _relax_case():\n            \"\"\"True if filenames must be checked case-insensitively.\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_code_type",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_code_type = type(_write_atomic.__code__)\n# Finder/loader utility code ###############################################\n# Magic word to reject .pyc files generated by other Python versions.\n# It should change for each incompatible change to the bytecode.\n#\n# The value of CR and LF is incorporated so if you ever read or write\n# a .pyc file in text mode the magic number will be wrong; also, the\n# Apple MPW compiler swaps their values, botching string constants.\n#\n# There were a variety of old schemes for setting the magic number.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "MAGIC_NUMBER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "MAGIC_NUMBER = (3394).to_bytes(2, 'little') + b'\\r\\n'\n_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_RAW_MAGIC_NUMBER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_RAW_MAGIC_NUMBER = int.from_bytes(MAGIC_NUMBER, 'little')  # For import.c\n_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_PYCACHE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_PYCACHE = '__pycache__'\n_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_OPT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_OPT = 'opt-'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "SOURCE_SUFFIXES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "SOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nBYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "BYTECODE_SUFFIXES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "BYTECODE_SUFFIXES = ['.pyc']\n# Deprecated.\nDEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "DEBUG_BYTECODE_SUFFIXES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "DEBUG_BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES = BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None, *, optimization=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    The 'optimization' parameter controls the presumed optimization level of\n    the bytecode file. If 'optimization' is not None, the string representation\n    of the argument is taken and verified to be alphanumeric (else ValueError\n    is raised).\n    The debug_override parameter is deprecated. If debug_override is not None,",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "_POPULATE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "_POPULATE = object()\ndef spec_from_file_location(name, location=None, *, loader=None,\n                            submodule_search_locations=_POPULATE):\n    \"\"\"Return a module spec based on a file location.\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n    The loader must take a spec as its only __init__() arg.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "EXTENSION_SUFFIXES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "description": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "peekOfCode": "EXTENSION_SUFFIXES = []\nclass ExtensionFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    def __eq__(self, other):\n        return (self.__class__ == other.__class__ and",
        "detail": "uploads.2024.04.30.officesolution.Lib.importlib._bootstrap_external",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.abc",
        "peekOfCode": "class abstractclassmethod(classmethod):\n    \"\"\"A decorator indicating abstract classmethods.\n    Similar to abstractmethod.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractclassmethod\n            def my_abstract_classmethod(cls, ...):\n                ...\n    'abstractclassmethod' is deprecated. Use 'classmethod' with\n    'abstractmethod' instead.",
        "detail": "uploads.2024.04.30.officesolution.Lib.abc",
        "documentation": {}
    },
    {
        "label": "abstractstaticmethod",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.abc",
        "peekOfCode": "class abstractstaticmethod(staticmethod):\n    \"\"\"A decorator indicating abstract staticmethods.\n    Similar to abstractmethod.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractstaticmethod\n            def my_abstract_staticmethod(...):\n                ...\n    'abstractstaticmethod' is deprecated. Use 'staticmethod' with\n    'abstractmethod' instead.",
        "detail": "uploads.2024.04.30.officesolution.Lib.abc",
        "documentation": {}
    },
    {
        "label": "abstractproperty",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.abc",
        "peekOfCode": "class abstractproperty(property):\n    \"\"\"A decorator indicating abstract properties.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract properties are overridden.\n    The abstract properties can be called using any of the normal\n    'super' call mechanisms.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractproperty",
        "detail": "uploads.2024.04.30.officesolution.Lib.abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.abc",
        "peekOfCode": "class ABC(metaclass=ABCMeta):\n    \"\"\"Helper class that provides a standard way to create an ABC using\n    inheritance.\n    \"\"\"\n    __slots__ = ()",
        "detail": "uploads.2024.04.30.officesolution.Lib.abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.abc",
        "description": "uploads.2024.04.30.officesolution.Lib.abc",
        "peekOfCode": "def abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractmethod",
        "detail": "uploads.2024.04.30.officesolution.Lib.abc",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b64encode(s, altchars=None):\n    \"\"\"Encode the bytes-like object s using Base64 and return a bytes object.\n    Optional altchars should be a byte string of length 2 which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n    \"\"\"\n    encoded = binascii.b2a_base64(s, newline=False)\n    if altchars is not None:\n        assert len(altchars) == 2, repr(altchars)\n        return encoded.translate(bytes.maketrans(b'+/', altchars))",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b64decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b64decode(s, altchars=None, validate=False):\n    \"\"\"Decode the Base64 encoded bytes-like object or ASCII string s.\n    Optional altchars must be a bytes-like object or ASCII string of length 2\n    which specifies the alternative alphabet used instead of the '+' and '/'\n    characters.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded.\n    If validate is False (the default), characters that are neither in the\n    normal base-64 alphabet nor the alternative alphabet are discarded prior\n    to the padding check.  If validate is True, these non-alphabet characters",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "standard_b64encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def standard_b64encode(s):\n    \"\"\"Encode bytes-like object s using the standard Base64 alphabet.\n    The result is returned as a bytes object.\n    \"\"\"\n    return b64encode(s)\ndef standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "standard_b64decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def standard_b64decode(s):\n    \"\"\"Decode bytes encoded with the standard Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the standard alphabet\n    are discarded prior to the padding check.\n    \"\"\"\n    return b64decode(s)\n_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "urlsafe_b64encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "urlsafe_b64decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object or ASCII string to decode.  The result\n    is returned as a bytes object.  A binascii.Error is raised if the input\n    is incorrectly padded.  Characters that are not in the URL-safe base-64\n    alphabet, and are not a plus '+' or slash '/', are discarded prior to the\n    padding check.\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    \"\"\"\n    s = _bytes_from_decode_data(s)",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b32encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]\n        b32tab = None",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b32decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b32decode(s, casefold=False, map01=None):\n    \"\"\"Decode the Base32 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n    letter O (oh), and for optional mapping of the digit 1 (one) to\n    either the letter I (eye) or letter L (el).  The optional argument\n    map01 when not None, specifies which letter the digit 1 should be\n    mapped to (when map01 is not None, the digit 0 is always mapped to\n    the letter O).  For security purposes the default is None, so that",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b16encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b16encode(s):\n    \"\"\"Encode the bytes-like object s using Base16 and return a bytes object.\n    \"\"\"\n    return binascii.hexlify(s).upper()\ndef b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b16decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b16decode(s, casefold=False):\n    \"\"\"Decode the Base16 encoded bytes-like object or ASCII string s.\n    Optional casefold is a flag specifying whether a lowercase alphabet is\n    acceptable as input.  For security purposes, the default is False.\n    The result is returned as a bytes object.  A binascii.Error is raised if\n    s is incorrectly padded or if there are non-alphabet characters present\n    in the input.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    if casefold:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "a85encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False):\n    \"\"\"Encode bytes-like object b using Ascii85 and return a bytes object.\n    foldspaces is an optional flag that uses the special short sequence 'y'\n    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This\n    feature is not supported by the \"standard\" Adobe encoding.\n    wrapcol controls whether the output should have newline (b'\\\\n') characters\n    added to it. If this is non-zero, each output line will be at most this\n    many characters long.\n    pad controls whether the input is padded to a multiple of 4 before\n    encoding. Note that the btoa implementation always pads.",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "a85decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n\\r\\v'):\n    \"\"\"Decode the Ascii85 encoded bytes-like object or ASCII string b.\n    foldspaces is a flag that specifies whether the 'y' short sequence should be\n    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is\n    not supported by the \"standard\" Adobe encoding.\n    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.\n    is framed with <~ and ~>).\n    ignorechars should be a byte string containing characters to ignore from the\n    input. This should only contain whitespace characters, and by default\n    contains all whitespace characters in ASCII.",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b85encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:\n        _b85chars = [bytes((i,)) for i in _b85alphabet]",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "b85decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def b85decode(b):\n    \"\"\"Decode the base85-encoded bytes-like object or ASCII string b\n    The result is returned as a bytes object.\n    \"\"\"\n    global _b85dec\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85dec is None:\n        _b85dec = [None] * 256\n        for i, c in enumerate(_b85alphabet):",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:\n                break",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def decode(input, output):\n    \"\"\"Decode a file; input and output are binary files.\"\"\"\n    while True:\n        line = input.readline()\n        if not line:\n            break\n        s = binascii.a2b_base64(line)\n        output.write(s)\ndef _input_type_check(s):\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "encodebytes",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def encodebytes(s):\n    \"\"\"Encode a bytestring into a bytes object containing multiple lines\n    of base-64 data.\"\"\"\n    _input_type_check(s)\n    pieces = []\n    for i in range(0, len(s), MAXBINSIZE):\n        chunk = s[i : i + MAXBINSIZE]\n        pieces.append(binascii.b2a_base64(chunk))\n    return b\"\".join(pieces)\ndef encodestring(s):",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "encodestring",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def encodestring(s):\n    \"\"\"Legacy alias of encodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"encodestring() is a deprecated alias since 3.1, \"\n                  \"use encodebytes()\",\n                  DeprecationWarning, 2)\n    return encodebytes(s)\ndef decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "decodebytes",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytes object.\"\"\"\n    _input_type_check(s)\n    return binascii.a2b_base64(s)\ndef decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "decodestring",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias since Python 3.1, \"\n                  \"use decodebytes()\",\n                  DeprecationWarning, 2)\n    return decodebytes(s)\n# Usable as a script...\ndef main():\n    \"\"\"Small main program\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def main():\n    \"\"\"Small main program\"\"\"\n    import sys, getopt\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'deut')\n    except getopt.error as msg:\n        sys.stdout = sys.stderr\n        print(msg)\n        print(\"\"\"usage: %s [-d|-e|-u|-t] [file|-]\n        -d, -u: decode",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "def test():\n    s0 = b\"Aladdin:open sesame\"\n    print(repr(s0))\n    s1 = encodebytes(s0)\n    print(repr(s1))\n    s2 = decodebytes(s1)\n    print(repr(s2))\n    assert s0 == s2\nif __name__ == '__main__':\n    main()",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "__all__ = [\n    # Legacy interface exports traditional RFC 2045 Base64 encodings\n    'encode', 'decode', 'encodebytes', 'decodebytes',\n    # Generalized interface for other encodings\n    'b64encode', 'b64decode', 'b32encode', 'b32decode',\n    'b16encode', 'b16decode',\n    # Base85 and Ascii85 encodings\n    'b85encode', 'b85decode', 'a85encode', 'a85decode',\n    # Standard Base64 encoding\n    'standard_b64encode', 'standard_b64decode',",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "bytes_types",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "bytes_types = (bytes, bytearray)  # Types acceptable as binary data\ndef _bytes_from_decode_data(s):\n    if isinstance(s, str):\n        try:\n            return s.encode('ascii')\n        except UnicodeEncodeError:\n            raise ValueError('string argument should contain only ASCII characters')\n    if isinstance(s, bytes_types):\n        return s\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_urlsafe_encode_translation",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_urlsafe_encode_translation = bytes.maketrans(b'+/', b'-_')\n_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_urlsafe_decode_translation",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_urlsafe_decode_translation = bytes.maketrans(b'-_', b'+/')\ndef urlsafe_b64encode(s):\n    \"\"\"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n    Argument s is a bytes-like object to encode.  The result is returned as a\n    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode bytes using the URL- and filesystem-safe Base64 alphabet.",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b32alphabet",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b32alphabet = b'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\n_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b32tab2",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b32tab2 = None\n_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b32rev",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b32rev = None\ndef b32encode(s):\n    \"\"\"Encode the bytes-like object s using Base32 and return a bytes object.\n    \"\"\"\n    global _b32tab2\n    # Delay the initialization of the table to not waste memory\n    # if the function is never called\n    if _b32tab2 is None:\n        b32tab = [bytes((i,)) for i in _b32alphabet]\n        _b32tab2 = [a + b for a in b32tab for b in b32tab]",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_a85chars",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_a85chars = None\n_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_a85chars2",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_a85chars2 = None\n_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_A85START",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_A85START = b\"<~\"\n_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_A85END",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_A85END = b\"~>\"\ndef _85encode(b, chars, chars2, pad=False, foldnuls=False, foldspaces=False):\n    # Helper function for a85encode and b85encode\n    if not isinstance(b, bytes_types):\n        b = memoryview(b).tobytes()\n    padding = (-len(b)) % 4\n    if padding:\n        b = b + b'\\0' * padding\n    words = struct.Struct('!%dI' % (len(b) // 4)).unpack(b)\n    chunks = [b'z' if foldnuls and not word else",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b85alphabet",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b85alphabet = (b\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                b\"abcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~\")\n_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b85chars",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b85chars = None\n_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b85chars2",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b85chars2 = None\n_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "_b85dec",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "_b85dec = None\ndef b85encode(b, pad=False):\n    \"\"\"Encode bytes-like object b in base85 format and return a bytes object.\n    If pad is true, the input is padded with b'\\\\0' so its length is a multiple of\n    4 bytes before encoding.\n    \"\"\"\n    global _b85chars, _b85chars2\n    # Delay the initialization of tables to not waste memory\n    # if the function is never called\n    if _b85chars is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "MAXLINESIZE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "MAXLINESIZE = 76 # Excluding the CRLF\nMAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "MAXBINSIZE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.base64",
        "description": "uploads.2024.04.30.officesolution.Lib.base64",
        "peekOfCode": "MAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:",
        "detail": "uploads.2024.04.30.officesolution.Lib.base64",
        "documentation": {}
    },
    {
        "label": "insort_right",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "def insort_right(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the right of the rightmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "def bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "insort_left",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "def insort_left(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the left of the leftmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "def bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "bisect",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "bisect = bisect_right\ninsort = insort_right",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "insort",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.bisect",
        "description": "uploads.2024.04.30.officesolution.Lib.bisect",
        "peekOfCode": "insort = insort_right",
        "detail": "uploads.2024.04.30.officesolution.Lib.bisect",
        "documentation": {}
    },
    {
        "label": "CodecInfo",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619\n    _is_text_encoding = True # Assume codecs are text encodings by default\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "Codec",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class Codec:\n    \"\"\" Defines the interface for stateless encoders/decoders.\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "IncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n        The IncrementalEncoder may use different error handling schemes by",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BufferedIncrementalEncoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        # unencoded input that is kept between calls to encode()\n        self.buffer = \"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "IncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create an IncrementalDecoder instance.\n        The IncrementalDecoder may use different error handling schemes by",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BufferedIncrementalDecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        # undecoded input that is kept between calls to decode()\n        self.buffer = b\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "StreamWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class StreamWriter(Codec):\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamWriter instance.\n            stream must be a file-like object open for writing.\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "StreamReader",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class StreamReader(Codec):\n    charbuffertype = str\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamReader instance.\n            stream must be a file-like object open for reading.\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "StreamReaderWriter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class StreamReaderWriter:\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n    \"\"\"\n    # Optional attributes set by the file wrappers below\n    encoding = 'unknown'\n    def __init__(self, stream, Reader, Writer, errors='strict'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "StreamRecoder",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "class StreamRecoder:\n    \"\"\" StreamRecoder instances translate data from one encoding to another.\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def open(filename, mode='r', encoding=None, errors='strict', buffering=1):\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n        encoding specifies the encoding which is to be used for the",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "EncodedFile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n        If file_encoding is not given, it defaults to data_encoding.",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getencoder",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).encode\ndef getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getdecoder",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).decode\ndef getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getincrementalencoder",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getincrementaldecoder",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getincrementaldecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getreader",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getreader(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamreader\ndef getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "getwriter",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamwriter\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "iterencode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using an IncrementalEncoder.\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "iterdecode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n    Decodes the input strings from the iterator using an IncrementalDecoder.\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "make_identity_dict",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def make_identity_dict(rng):\n    \"\"\" make_identity_dict(rng) -> dict\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n    \"\"\"\n    return {i:i for i in rng}\ndef make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "make_encoding_map",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "def make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n        One example where this happens is cp875.py which decodes\n        multiple character to \\\\u001a.\n    \"\"\"\n    m = {}",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"CodecInfo\", \"Codec\", \"IncrementalEncoder\", \"IncrementalDecoder\",\n           \"StreamReader\", \"StreamWriter\",\n           \"StreamReaderWriter\", \"StreamRecoder\",\n           \"getencoder\", \"getdecoder\", \"getincrementalencoder\",\n           \"getincrementaldecoder\", \"getreader\", \"getwriter\",\n           \"encode\", \"decode\", \"iterencode\", \"iterdecode\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM_UTF8",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM_UTF8 = b'\\xef\\xbb\\xbf'\n# UTF-16, little endian\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM_LE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\n# UTF-16, big endian\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM_BE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\n# UTF-32, little endian\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM_UTF32_LE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\n# UTF-32, big endian\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM_UTF32_BE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    # UTF-32, native endianness\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    # UTF-16, native endianness\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n    # UTF-32, native endianness",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM32_LE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM32_BE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM64_LE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "BOM64_BE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "BOM64_BE = BOM_UTF32_BE\n### Codec base classes (defining the API)\nclass CodecInfo(tuple):\n    \"\"\"Codec details when looking up the codec registry\"\"\"\n    # Private API to allow Python 3.4 to blacklist the known non-Unicode\n    # codecs in the standard library. A more general mechanism to\n    # reliably distinguish test encodings from other codecs will hopefully\n    # be defined for Python 3.5\n    #\n    # See http://bugs.python.org/issue19619",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "_false",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.codecs",
        "description": "uploads.2024.04.30.officesolution.Lib.codecs",
        "peekOfCode": "_false = 0\nif _false:\n    import encodings\n### Tests\nif __name__ == '__main__':\n    # Make stdout translate Latin-1 output into UTF-8 output\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n    # Have stdin translate Latin-1 input into UTF-8 input\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')",
        "detail": "uploads.2024.04.30.officesolution.Lib.codecs",
        "documentation": {}
    },
    {
        "label": "instances)",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "class instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "class Error(Exception):\n    pass\nerror = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "def copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    try:\n        issc = issubclass(cls, type)",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "def deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "error = Error   # backward compatibility\ntry:\n    from org.python.core import PyStringMap\nexcept ImportError:\n    PyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "_copy_dispatch",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, complex, str, tuple,\n          bytes, frozenset, type, range, slice,\n          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "t = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nd[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[list] = list.copy\nd[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[dict] = dict.copy\nd[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[set]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[set] = set.copy\nd[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[bytearray]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[bytearray] = bytearray.copy\nif PyStringMap is not None:\n    d[PyStringMap] = PyStringMap.copy\ndel d, t\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "_deepcopy_dispatch",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[type(None)]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[type(Ellipsis)]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[type(Ellipsis)] = _deepcopy_atomic\nd[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[type(NotImplemented)]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[type(NotImplemented)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[int]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[float]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[bool]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[bool] = _deepcopy_atomic\nd[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[complex]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[complex] = _deepcopy_atomic\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[bytes]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[str]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[type]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[type] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[types.BuiltinFunctionType]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[types.FunctionType]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[weakref.ref]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo, deepcopy=deepcopy):\n    y = []\n    memo[id(x)] = y\n    append = y.append\n    for a in x:\n        append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo, deepcopy=deepcopy):\n    y = [deepcopy(a, memo) for a in x]\n    # We're not going to put the tuple in the memo, but it's still important we\n    # check for it, in case the tuple contains recursive mutable structures.\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for k, j in zip(x, y):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[tuple]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo, deepcopy=deepcopy):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\nd[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "d[types.MethodType]",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copy",
        "description": "uploads.2024.04.30.officesolution.Lib.copy",
        "peekOfCode": "d[types.MethodType] = _deepcopy_method\ndel d\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...",
        "detail": "uploads.2024.04.30.officesolution.Lib.copy",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "def pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):\n    if not callable(object):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "constructor",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "def constructor(object):\n    if not callable(object):\n        raise TypeError(\"constructors must be callable\")\n# Example: provide pickling support for complex numbers.\ntry:\n    complex\nexcept NameError:\n    pass\nelse:\n    def pickle_complex(c):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "add_extension",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "def add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and\n        _inverted_registry.get(code) == key):\n        return # Redundant registrations are benign\n    if key in _extension_registry:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "remove_extension",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "def remove_extension(module, name, code):\n    \"\"\"Unregister an extension code.  For testing only.\"\"\"\n    key = (module, name)\n    if (_extension_registry.get(key) != code or\n        _inverted_registry.get(code) != key):\n        raise ValueError(\"key %s is not registered with code %s\" %\n                         (key, code))\n    del _extension_registry[key]\n    del _inverted_registry[code]\n    if code in _extension_cache:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "clear_extension_cache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "def clear_extension_cache():\n    _extension_cache.clear()\n# Standard extension code assignments\n# Reserved ranges\n# First  Last Count  Purpose\n#     1   127   127  Reserved for Python standard library\n#   128   191    64  Reserved for Zope\n#   192   239    48  Reserved for 3rd parties\n#   240   255    16  Reserved for private use (will never be assigned)\n#   256   Inf   Inf  Reserved for future assignment",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "__all__ = [\"pickle\", \"constructor\",\n           \"add_extension\", \"remove_extension\", \"clear_extension_cache\"]\ndispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "dispatch_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "dispatch_table = {}\ndef pickle(ob_type, pickle_function, constructor_ob=None):\n    if not callable(pickle_function):\n        raise TypeError(\"reduction functions must be callable\")\n    dispatch_table[ob_type] = pickle_function\n    # The constructor_ob function is a vestige of safe for unpickling.\n    # There is no reason for the caller to pass it anymore.\n    if constructor_ob is not None:\n        constructor(constructor_ob)\ndef constructor(object):",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "_HEAPTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "_HEAPTYPE = 1<<9\n# Python code for object.__reduce_ex__ for protocols 0 and 1\ndef _reduce_ex(self, proto):\n    assert proto < 2\n    for base in self.__class__.__mro__:\n        if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:\n            break\n    else:\n        base = object # not really reachable\n    if base is object:",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "_extension_registry",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "_extension_registry = {}                # key -> code\n_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "_inverted_registry",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "_inverted_registry = {}                 # code -> key\n_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "_extension_cache",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "description": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "peekOfCode": "_extension_cache = {}                   # code -> object\n# Don't ever rebind those names:  pickling grabs a reference to them when\n# it's initialized, and won't see a rebinding.\ndef add_extension(module, name, code):\n    \"\"\"Register an extension code.\"\"\"\n    code = int(code)\n    if not 1 <= code <= 0x7fffffff:\n        raise ValueError(\"code out of range\")\n    key = (module, name)\n    if (_extension_registry.get(key) == code and",
        "detail": "uploads.2024.04.30.officesolution.Lib.copyreg",
        "documentation": {}
    },
    {
        "label": "auto",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "_EnumDict",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "EnumMeta",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(first_enum, '_generate_next_value_', None)",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class Enum(metaclass=EnumMeta):\n    \"\"\"Generic enumeration.\n    Derive from this class to define new enumerations.\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\ndef _reduce_ex_by_name(self, proto):\n    return self.name\nclass Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "Flag",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class Flag(Enum):\n    \"\"\"Support for flags\"\"\"\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n        name: the name of the member\n        start: the initital start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "class IntFlag(int, Flag):\n    \"\"\"Support for integer-based Flags\"\"\"\n    @classmethod\n    def _missing_(cls, value):\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n    @classmethod\n    def _create_pseudo_member_(cls, value):",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "def unique(enumeration):\n    \"\"\"Class decorator for enumerations ensuring unique member values.\"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\ndef _is_descriptor(obj):\n    \"\"\"Returns True if obj is a descriptor, False otherwise.\"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "_auto_null",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\nclass _EnumDict(dict):\n    \"\"\"Track enum member order and ensure member names are not reused.\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.enum",
        "description": "uploads.2024.04.30.officesolution.Lib.enum",
        "peekOfCode": "Enum = None\nclass EnumMeta(type):\n    \"\"\"Metaclass for Enum\"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(bases)\n        if first_enum is not None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.enum",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "description": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "peekOfCode": "def fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.",
        "detail": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "documentation": {}
    },
    {
        "label": "filter",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "description": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "peekOfCode": "def filter(names, pat):\n    \"\"\"Return the subset of the list NAMES that match PAT.\"\"\"\n    result = []\n    pat = os.path.normcase(pat)\n    match = _compile_pattern(pat)\n    if os.path is posixpath:\n        # normcase on posix is NOP. Optimize it away from the loop.\n        for name in names:\n            if match(name):\n                result.append(name)",
        "detail": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "documentation": {}
    },
    {
        "label": "fnmatchcase",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "description": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "peekOfCode": "def fnmatchcase(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN, including case.\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    \"\"\"\n    match = _compile_pattern(pat)\n    return match(name) is not None\ndef translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.",
        "detail": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "description": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "peekOfCode": "def translate(pat):\n    \"\"\"Translate a shell PATTERN to a regular expression.\n    There is no way to quote meta-characters.\n    \"\"\"\n    i, n = 0, len(pat)\n    res = ''\n    while i < n:\n        c = pat[i]\n        i = i+1\n        if c == '*':",
        "detail": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "description": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "peekOfCode": "__all__ = [\"filter\", \"fnmatch\", \"fnmatchcase\", \"translate\"]\ndef fnmatch(name, pat):\n    \"\"\"Test whether FILENAME matches PATTERN.\n    Patterns are Unix shell style:\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized",
        "detail": "uploads.2024.04.30.officesolution.Lib.fnmatch",
        "documentation": {}
    },
    {
        "label": "partial",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "class partial:\n    \"\"\"New function with partial application of the given arguments\n    and keywords.\n    \"\"\"\n    __slots__ = \"func\", \"args\", \"keywords\", \"__dict__\", \"__weakref__\"\n    def __new__(*args, **keywords):\n        if not args:\n            raise TypeError(\"descriptor '__new__' of partial needs an argument\")\n        if len(args) < 2:\n            raise TypeError(\"type 'partial' takes at least one argument\")",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "partialmethod",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "class partialmethod(object):\n    \"\"\"Method descriptor with partial application of the given arguments\n    and keywords.\n    Supports wrapping existing descriptors and handles non-descriptor\n    callables as instance methods.\n    \"\"\"\n    def __init__(self, func, *args, **keywords):\n        if not callable(func) and not hasattr(func, \"__get__\"):\n            raise TypeError(\"{!r} is not callable or a descriptor\"\n                                 .format(func))",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "_HashedSeq",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "class _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n    def __hash__(self):",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def total_ordering(cls):\n    \"\"\"Class decorator that fills in missing ordering methods\"\"\"\n    # Find user-defined comparisons (not those inherited from object).\n    roots = {op for op in _convert if getattr(cls, op, None) is not getattr(object, op, None)}\n    if not roots:\n        raise ValueError('must define at least one ordering operation: < > <= >=')\n    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__\n    for opname, opfunc in _convert[root]:\n        if opname not in roots:\n            opfunc.__name__ = opname",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"Least-recently-used cache decorator.\n    If *maxsize* is set to None, the LRU features are disabled and the cache\n    can grow without bound.\n    If *typed* is True, arguments of different types will be cached separately.\n    For example, f(3.0) and f(3) will be treated as distinct calls with\n    distinct results.\n    Arguments to the cached function must be hashable.\n    View the cache statistics named tuple (hits, misses, maxsize, currsize)\n    with f.cache_info().  Clear the cache and statistics with f.cache_clear().",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "singledispatch",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "def singledispatch(func):\n    \"\"\"Single-dispatch generic function decorator.\n    Transforms a function into a generic function, which can have different\n    behaviours depending upon the type of its first argument. The decorated\n    function acts as the default implementation, and additional\n    implementations can be registered using the register() attribute of the\n    generic function.\n    \"\"\"\n    # There are many programs that use functools without singledispatch, so we\n    # trade-off making singledispatch marginally slower for the benefit of",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "__all__ = ['update_wrapper', 'wraps', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES',\n           'total_ordering', 'cmp_to_key', 'lru_cache', 'reduce', 'partial',\n           'partialmethod', 'singledispatch']\ntry:\n    from _functools import reduce\nexcept ImportError:\n    pass\nfrom abc import get_cache_token\nfrom collections import namedtuple\n# import types, weakref  # Deferred to single_dispatch()",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "WRAPPER_ASSIGNMENTS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "WRAPPER_UPDATES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "WRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "_convert",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "_convert = {\n    '__lt__': [('__gt__', _gt_from_lt),\n               ('__le__', _le_from_lt),\n               ('__ge__', _ge_from_lt)],\n    '__le__': [('__ge__', _ge_from_le),\n               ('__lt__', _lt_from_le),\n               ('__gt__', _gt_from_le)],\n    '__gt__': [('__lt__', _lt_from_gt),\n               ('__ge__', _ge_from_gt),\n               ('__le__', _le_from_gt)],",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "_CacheInfo",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.functools",
        "description": "uploads.2024.04.30.officesolution.Lib.functools",
        "peekOfCode": "_CacheInfo = namedtuple(\"CacheInfo\", [\"hits\", \"misses\", \"maxsize\", \"currsize\"])\nclass _HashedSeq(list):\n    \"\"\" This class guarantees that hash() will be called no more than once\n        per element.  This is important because the lru_cache() will hash\n        the key multiple times on a cache miss.\n    \"\"\"\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)",
        "detail": "uploads.2024.04.30.officesolution.Lib.functools",
        "documentation": {}
    },
    {
        "label": "exists",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except OSError:\n        return False\n    return True\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "isfile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except OSError:\n        return False\n    return stat.S_ISREG(st.st_mode)\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "isdir",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except OSError:\n        return False\n    return stat.S_ISDIR(st.st_mode)\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "getsize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "getmtime",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "getatime",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "getctime",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "commonprefix",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "samestat",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file\"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "samefile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file\"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "sameopenfile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "def sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n# Generic implementation of splitext, to be parametrized with",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "description": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "peekOfCode": "__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except OSError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.genericpath",
        "documentation": {}
    },
    {
        "label": "__doc__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "__doc__ = \"\"\"hashlib module - A common interface to many hash functions.\nnew(name, data=b'', **kwargs) - returns a new hash object implementing the\n                                given hash function; initializing the hash\n                                using the given binary data.\nNamed constructor functions are also available, these are faster\nthan using new(name):\nmd5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),\nsha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.\nMore algorithms may be available on your platform but the above are guaranteed\nto exist.  See the algorithms_guaranteed and algorithms_available attributes",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "__always_supported",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "__always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n                      'blake2b', 'blake2s',\n                      'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',\n                      'shake_128', 'shake_256')\nalgorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\ndef __get_builtin_constructor(name):",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "algorithms_guaranteed",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "algorithms_guaranteed = set(__always_supported)\nalgorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "algorithms_available",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "algorithms_available = set(__always_supported)\n__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "__all__ = __always_supported + ('new', 'algorithms_guaranteed',\n                                'algorithms_available', 'pbkdf2_hmac')\n__builtin_constructor_cache = {}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor\n    try:\n        if name in ('SHA1', 'sha1'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "__builtin_constructor_cache",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "description": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "peekOfCode": "__builtin_constructor_cache = {}\ndef __get_builtin_constructor(name):\n    cache = __builtin_constructor_cache\n    constructor = cache.get(name)\n    if constructor is not None:\n        return constructor\n    try:\n        if name in ('SHA1', 'sha1'):\n            import _sha1\n            cache['SHA1'] = cache['sha1'] = _sha1.sha1",
        "detail": "uploads.2024.04.30.officesolution.Lib.hashlib",
        "documentation": {}
    },
    {
        "label": "heappush",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n        return returnitem\n    return lastelt\ndef heapreplace(heap, item):",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "heapreplace",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def heapreplace(heap, item):\n    \"\"\"Pop and return the current smallest value, and add the new item.\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    \"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "heappushpop",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def heappushpop(heap, item):\n    \"\"\"Fast version of a heappush followed by a heappop.\"\"\"\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "heapify",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    # Transform bottom-up.  The largest index there's any point to looking at\n    # is the largest with a child index in-range, so must have 2*i + 1 < n,\n    # or i < (n-1)/2.  If n is even = 2*j, this is (2*j-1)/2 = j-1/2 so\n    # j-1 is the largest, which is n//2 - 1.  If n is odd = 2*j+1, this is\n    # (2*j+1-1)/2 = j so j-1 is the largest, and that's again n//2-1.\n    for i in reversed(range(n//2)):\n        _siftup(x, i)",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "merge",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def merge(*iterables, key=None, reverse=False):\n    '''Merge multiple sorted inputs into a single sorted output.\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n    If *key* is not None, applies a key function to each element to determine\n    its sort order.\n    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "nsmallest",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def nsmallest(n, iterable, key=None):\n    \"\"\"Find the n smallest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use min()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        if key is None:\n            result = min(it, default=sentinel)",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "nlargest",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "def nlargest(n, iterable, key=None):\n    \"\"\"Find the n largest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    \"\"\"\n    # Short-cut for n==1 is to use max()\n    if n == 1:\n        it = iter(iterable)\n        sentinel = object()\n        if key is None:\n            result = max(it, default=sentinel)",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "heap",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "heap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "item = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "item = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "item = heapreplace(heap, item) # pops and returns smallest item, and adds\n                               # new item; the heap size is unchanged\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "__about__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "__about__ = \"\"\"Heap queues\n[explanation by François Pinard]\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k', not a[k]:\n                                   0\n                  1                                 2",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.heapq",
        "description": "uploads.2024.04.30.officesolution.Lib.heapq",
        "peekOfCode": "__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',\n           'nlargest', 'nsmallest', 'heappushpop']\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:",
        "detail": "uploads.2024.04.30.officesolution.Lib.heapq",
        "documentation": {}
    },
    {
        "label": "HMAC",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "class HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n        digestmod: A module supporting PEP 247.  *OR*",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "new",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "def new(key, msg = None, digestmod = None):\n    \"\"\"Create a new hashing object and return it.\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    \"\"\"\n    return HMAC(key, msg, digestmod)",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "digest",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "def digest(key, msg, digest):\n    \"\"\"Fast inline implementation of HMAC\n    key:    key for the keyed hash object.\n    msg:    input message\n    digest: A hash name suitable for hashlib.new() for best performance. *OR*\n            A hashlib constructor returning a new hash object. *OR*\n            A module supporting PEP 247.\n    Note: key and msg must be a bytes or bytearray objects.\n    \"\"\"\n    if (_hashopenssl is not None and",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "trans_5C",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "trans_5C = bytes((x ^ 0x5C) for x in range(256))\ntrans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "trans_36",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "trans_36 = bytes((x ^ 0x36) for x in range(256))\n# The size of the digests returned by HMAC depends on the underlying\n# hashing module used.  Use digest_size from the instance of HMAC instead.\ndigest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "digest_size",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.hmac",
        "description": "uploads.2024.04.30.officesolution.Lib.hmac",
        "peekOfCode": "digest_size = None\nclass HMAC:\n    \"\"\"RFC 2104 HMAC class.  Also complies with RFC 4231.\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    \"\"\"\n    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.\n    def __init__(self, key, msg = None, digestmod = None):\n        \"\"\"Create a new HMAC object.\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.",
        "detail": "uploads.2024.04.30.officesolution.Lib.hmac",
        "documentation": {}
    },
    {
        "label": "NullImporter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "class NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"\n    def __init__(self, path):\n        if path == '':\n            raise ImportError('empty pathname', path='')\n        elif os.path.isdir(path):\n            raise ImportError('existing directory', path=path)\n    def find_module(self, fullname):",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "_HackedGetData",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "class _HackedGetData:\n    \"\"\"Compatibility support for 'file' arguments of various load_*()\n    functions.\"\"\"\n    def __init__(self, fullname, path, file=None):\n        super().__init__(fullname, path)\n        self.file = file\n    def get_data(self, path):\n        \"\"\"Gross hack to contort loader to deal w/ load_*()'s bad API.\"\"\"\n        if self.file and path == self.path:\n            # The contract of get_data() requires us to return bytes. Reopen the",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "_LoadSourceCompatibility",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "class _LoadSourceCompatibility(_HackedGetData, machinery.SourceFileLoader):\n    \"\"\"Compatibility support for implementing load_source().\"\"\"\ndef load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "_LoadCompiledCompatibility",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "class _LoadCompiledCompatibility(_HackedGetData, SourcelessFileLoader):\n    \"\"\"Compatibility support for implementing load_compiled().\"\"\"\ndef load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "new_module",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "get_magic",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.\n    \"\"\"\n    return util.MAGIC_NUMBER\ndef get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "get_tag",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def get_tag():\n    \"\"\"Return the magic tag for .pyc files.\"\"\"\n    return sys.implementation.cache_tag\ndef cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "cache_from_source",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def cache_from_source(path, debug_override=None):\n    \"\"\"**DEPRECATED**\n    Given the path to a .py file, return the path to its .pyc file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc file calculated as if the .py file were imported.\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.\n    If sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    with warnings.catch_warnings():",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "source_from_cache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def source_from_cache(path):\n    \"\"\"**DEPRECATED**\n    Given the path to a .pyc. file, return the path to its .py file.\n    The .pyc file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc file.  If path does\n    not conform to PEP 3147 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    return util.source_from_cache(path)\ndef get_suffixes():",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "get_suffixes",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def get_suffixes():\n    \"\"\"**DEPRECATED**\"\"\"\n    extensions = [(s, 'rb', C_EXTENSION) for s in machinery.EXTENSION_SUFFIXES]\n    source = [(s, 'r', PY_SOURCE) for s in machinery.SOURCE_SUFFIXES]\n    bytecode = [(s, 'rb', PY_COMPILED) for s in machinery.BYTECODE_SUFFIXES]\n    return extensions + source + bytecode\nclass NullImporter:\n    \"\"\"**DEPRECATED**\n    Null import object.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "load_source",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def load_source(name, pathname, file=None):\n    loader = _LoadSourceCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.\n    module.__loader__ = machinery.SourceFileLoader(name, pathname)",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "load_compiled",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def load_compiled(name, pathname, file=None):\n    \"\"\"**DEPRECATED**\"\"\"\n    loader = _LoadCompiledCompatibility(name, pathname, file)\n    spec = util.spec_from_file_location(name, pathname, loader=loader)\n    if name in sys.modules:\n        module = _exec(spec, sys.modules[name])\n    else:\n        module = _load(spec)\n    # To allow reloading to potentially work, use a non-hacked loader which\n    # won't rely on a now-closed file object.",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "load_package",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def load_package(name, path):\n    \"\"\"**DEPRECATED**\"\"\"\n    if os.path.isdir(path):\n        extensions = (machinery.SOURCE_SUFFIXES[:] +\n                      machinery.BYTECODE_SUFFIXES[:])\n        for extension in extensions:\n            init_path = os.path.join(path, '__init__' + extension)\n            if os.path.exists(init_path):\n                path = init_path\n                break",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "load_module",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def load_module(name, file, filename, details):\n    \"\"\"**DEPRECATED**\n    Load a module, given information returned by find_module().\n    The module name must include the full package name, if any.\n    \"\"\"\n    suffix, mode, type_ = details\n    if mode and (not mode.startswith(('r', 'U')) or '+' in mode):\n        raise ValueError('invalid file open mode {!r}'.format(mode))\n    elif file is None and type_ in {PY_SOURCE, PY_COMPILED}:\n        msg = 'file object required for import (type code {})'.format(type_)",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "find_module",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def find_module(name, path=None):\n    \"\"\"**DEPRECATED**\n    Search for a module.\n    If path is omitted or None, search for a built-in, frozen or special\n    module and continue search in sys.path. The module name cannot\n    contain '.'; to search for a submodule of a package, pass the\n    submodule name and the package's __path__.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"'name' must be a str, not {}\".format(type(name)))",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "reload",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def reload(module):\n    \"\"\"**DEPRECATED**\n    Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    return importlib.reload(module)\ndef init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "init_builtin",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "def init_builtin(name):\n    \"\"\"**DEPRECATED**\n    Load and return a built-in module by name, or None is such module doesn't\n    exist\n    \"\"\"\n    try:\n        return _builtin_from_name(name)\n    except ImportError:\n        return None\nif create_dynamic:",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "SEARCH_ERROR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "SEARCH_ERROR = 0\nPY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PY_SOURCE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PY_COMPILED",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "C_EXTENSION",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "C_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PY_RESOURCE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PKG_DIRECTORY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "C_BUILTIN",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "C_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PY_FROZEN",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "PY_CODERESOURCE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "PY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "IMP_HOOK",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.imp",
        "description": "uploads.2024.04.30.officesolution.Lib.imp",
        "peekOfCode": "IMP_HOOK = 9\ndef new_module(name):\n    \"\"\"**DEPRECATED**\n    Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return types.ModuleType(name)\ndef get_magic():\n    \"\"\"**DEPRECATED**\n    Return the magic number for .pyc files.",
        "detail": "uploads.2024.04.30.officesolution.Lib.imp",
        "documentation": {}
    },
    {
        "label": "IOBase",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "class IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "RawIOBase",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "class RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "BufferedIOBase",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "class BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__\nclass TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "TextIOBase",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "class TextIOBase(_io._TextIOBase, IOBase):\n    __doc__ = _io._TextIOBase.__doc__\nRawIOBase.register(FileIO)\nfor klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,\n              BufferedRWPair):\n    BufferedIOBase.register(klass)\nfor klass in (StringIO, TextIOWrapper):\n    TextIOBase.register(klass)\ndel klass\ntry:",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "__author__ = (\"Guido van Rossum <guido@python.org>, \"\n              \"Mike Verdone <mike.verdone@gmail.com>, \"\n              \"Mark Russell <mark.russell@zen.co.uk>, \"\n              \"Antoine Pitrou <solipsis@pitrou.net>, \"\n              \"Amaury Forgeot d'Arc <amauryfa@gmail.com>, \"\n              \"Benjamin Peterson <benjamin@python.org>\")\n__all__ = [\"BlockingIOError\", \"open\", \"IOBase\", \"RawIOBase\", \"FileIO\",\n           \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "__all__ = [\"BlockingIOError\", \"open\", \"IOBase\", \"RawIOBase\", \"FileIO\",\n           \"BytesIO\", \"StringIO\", \"BufferedIOBase\",\n           \"BufferedReader\", \"BufferedWriter\", \"BufferedRWPair\",\n           \"BufferedRandom\", \"TextIOBase\", \"TextIOWrapper\",\n           \"UnsupportedOperation\", \"SEEK_SET\", \"SEEK_CUR\", \"SEEK_END\"]\nimport _io\nimport abc\nfrom _io import (DEFAULT_BUFFER_SIZE, BlockingIOError, UnsupportedOperation,\n                 open, FileIO, BytesIO, StringIO, BufferedReader,\n                 BufferedWriter, BufferedRWPair, BufferedRandom,",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "OpenWrapper",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "OpenWrapper = _io.open # for compatibility with _pyio\n# Pretend this exception was created here.\nUnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "UnsupportedOperation.__module__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "UnsupportedOperation.__module__ = \"io\"\n# for seek()\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.io",
        "description": "uploads.2024.04.30.officesolution.Lib.io",
        "peekOfCode": "SEEK_END = 2\n# Declaring ABCs in C is tricky so we do it here.\n# Method descriptions and default implementations are inherited from the C\n# version however.\nclass IOBase(_io._IOBase, metaclass=abc.ABCMeta):\n    __doc__ = _io._IOBase.__doc__\nclass RawIOBase(_io._RawIOBase, IOBase):\n    __doc__ = _io._RawIOBase.__doc__\nclass BufferedIOBase(_io._BufferedIOBase, IOBase):\n    __doc__ = _io._BufferedIOBase.__doc__",
        "detail": "uploads.2024.04.30.officesolution.Lib.io",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.keyword",
        "description": "uploads.2024.04.30.officesolution.Lib.keyword",
        "peekOfCode": "def main():\n    import sys, re\n    args = sys.argv[1:]\n    iptfile = args and args[0] or \"Python/graminit.c\"\n    if len(args) > 1: optfile = args[1]\n    else: optfile = \"Lib/keyword.py\"\n    # load the output skeleton from the target, taking care to preserve its\n    # newline convention.\n    with open(optfile, newline='') as fp:\n        format = fp.readlines()",
        "detail": "uploads.2024.04.30.officesolution.Lib.keyword",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.keyword",
        "description": "uploads.2024.04.30.officesolution.Lib.keyword",
        "peekOfCode": "__all__ = [\"iskeyword\", \"kwlist\"]\nkwlist = [\n#--start keywords--\n        'False',\n        'None',\n        'True',\n        'and',\n        'as',\n        'assert',\n        'async',",
        "detail": "uploads.2024.04.30.officesolution.Lib.keyword",
        "documentation": {}
    },
    {
        "label": "kwlist",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.keyword",
        "description": "uploads.2024.04.30.officesolution.Lib.keyword",
        "peekOfCode": "kwlist = [\n#--start keywords--\n        'False',\n        'None',\n        'True',\n        'and',\n        'as',\n        'assert',\n        'async',\n        'await',",
        "detail": "uploads.2024.04.30.officesolution.Lib.keyword",
        "documentation": {}
    },
    {
        "label": "iskeyword",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.keyword",
        "description": "uploads.2024.04.30.officesolution.Lib.keyword",
        "peekOfCode": "iskeyword = frozenset(kwlist).__contains__\ndef main():\n    import sys, re\n    args = sys.argv[1:]\n    iptfile = args and args[0] or \"Python/graminit.c\"\n    if len(args) > 1: optfile = args[1]\n    else: optfile = \"Lib/keyword.py\"\n    # load the output skeleton from the target, taking care to preserve its\n    # newline convention.\n    with open(optfile, newline='') as fp:",
        "detail": "uploads.2024.04.30.officesolution.Lib.keyword",
        "documentation": {}
    },
    {
        "label": "getline",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.\ncache = {}",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "clearcache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "getlines",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]\n        if len(entry) != 1:\n            return cache[filename][2]\n    try:\n        return updatecache(filename, module_globals)\n    except MemoryError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "checkcache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def checkcache(filename=None):\n    \"\"\"Discard cache entries that are out of date.\n    (This is not checked upon each call!)\"\"\"\n    if filename is None:\n        filenames = list(cache.keys())\n    else:\n        if filename in cache:\n            filenames = [filename]\n        else:\n            return",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "updatecache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n    if filename in cache:\n        if len(cache[filename]) != 1:\n            del cache[filename]\n    if not filename or (filename.startswith('<') and filename.endswith('>')):\n        return []\n    fullname = filename",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "lazycache",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "def lazycache(filename, module_globals):\n    \"\"\"Seed the cache for filename with module_globals.\n    The module loader will be asked for the source only when getlines is\n    called, not immediately.\n    If there is an entry in the cache already, it is not altered.\n    :return: True if a lazy load is registered in the cache,\n        otherwise False. To register such a load a module loader with a\n        get_source method must be found, the filename must be a cachable\n        filename, and the filename must not be already cached.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "__all__ = [\"getline\", \"clearcache\", \"checkcache\"]\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\n# The cache\n# The cache. Maps filenames to either a thunk which will provide source code,\n# or a tuple (size, mtime, lines, fullname) once loaded.",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.linecache",
        "description": "uploads.2024.04.30.officesolution.Lib.linecache",
        "peekOfCode": "cache = {}\ndef clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a Python source file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        entry = cache[filename]",
        "detail": "uploads.2024.04.30.officesolution.Lib.linecache",
        "documentation": {}
    },
    {
        "label": "localeconv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl\n# Iterate over grouping intervals\ndef _grouping_intervals(grouping):",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "format_string",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def format_string(f, val, grouping=False, monetary=False):\n    \"\"\"Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.\n    Conversion uses monetary thousands separator and grouping strings if\n    forth parameter monetary is true.\"\"\"\n    percents = list(_percent_re.finditer(f))\n    new_f = _percent_re.sub('%s', f)\n    if isinstance(val, _collections_abc.Mapping):\n        new_val = []",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "format",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def format(percent, value, grouping=False, monetary=False, *additional):\n    \"\"\"Deprecated, use format_string instead.\"\"\"\n    import warnings\n    warnings.warn(\n        \"This method will be removed in a future version of Python. \"\n        \"Use 'locale.format_string()' instead.\",\n        DeprecationWarning, stacklevel=2\n    )\n    match = _percent_re.match(percent)\n    if not match or len(match.group())!= len(percent):",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "currency",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def currency(val, symbol=True, grouping=False, international=False):\n    \"\"\"Formats val according to the currency settings\n    in the current locale.\"\"\"\n    conv = localeconv()\n    # check for illegal values\n    digits = conv[international and 'int_frac_digits' or 'frac_digits']\n    if digits == 127:\n        raise ValueError(\"Currency formatting is not possible using \"\n                         \"the 'C' locale.\")\n    s = _format('%%.%if' % digits, abs(val), grouping, monetary=True)",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def str(val):\n    \"\"\"Convert float to string, taking the locale into account.\"\"\"\n    return _format(\"%.12g\", val)\ndef delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "delocalize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def delocalize(string):\n    \"Parses a string as a normalized number according to the locale settings.\"\n    conv = localeconv()\n    #First, get rid of the grouping\n    ts = conv['thousands_sep']\n    if ts:\n        string = string.replace(ts, '')\n    #next, replace the decimal point with a dot\n    dd = conv['decimal_point']\n    if dd:",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "atof",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def atof(string, func=float):\n    \"Parses a string as a float according to the locale settings.\"\n    return func(delocalize(string))\ndef atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "atoi",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def atoi(string):\n    \"Converts a string to an integer according to the locale settings.\"\n    return int(delocalize(string))\ndef _test():\n    setlocale(LC_ALL, \"\")\n    #do grouping\n    s1 = format_string(\"%d\", 123456789,1)\n    print(s1, \"is\", atoi(s1))\n    #standard formatting\n    s1 = str(3.14)",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def normalize(localename):\n    \"\"\" Returns a normalized locale code for the given locale\n        name.\n        The returned locale code is formatted for use with\n        setlocale().\n        If normalization fails, the original name is returned\n        unchanged.\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "getdefaultlocale",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):\n    \"\"\" Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.\n        Calling setlocale(LC_ALL, \"\") lets it use the default locale as\n        defined by the LANG variable. Since we don't want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n        To maintain compatibility with other platforms, not only the",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "getlocale",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def getlocale(category=LC_CTYPE):\n    \"\"\" Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n    \"\"\"\n    localename = _setlocale(category)",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "setlocale",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def setlocale(category, locale=None):\n    \"\"\" Set the locale for the given category.  The locale can be\n        a string, an iterable of two strings (language code and encoding),\n        or None.\n        Iterables are converted to strings using the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n        category may be given as one of the LC_* values.\n    \"\"\"\n    if locale and not isinstance(locale, _builtin_str):\n        # convert to string",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "resetlocale",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "def resetlocale(category=LC_ALL):\n    \"\"\" Sets the locale for category to the default setting.\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n    \"\"\"\n    _setlocale(category, _build_localename(getdefaultlocale()))\nif sys.platform.startswith(\"win\"):\n    # On Win32, this will return the ANSI code page\n    def getpreferredencoding(do_setlocale = True):\n        \"\"\"Return the charset that the user is likely using.\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "__all__ = [\"getlocale\", \"getdefaultlocale\", \"getpreferredencoding\", \"Error\",\n           \"setlocale\", \"resetlocale\", \"localeconv\", \"strcoll\", \"strxfrm\",\n           \"str\", \"atof\", \"atoi\", \"format\", \"format_string\", \"currency\",\n           \"normalize\", \"LC_CTYPE\", \"LC_COLLATE\", \"LC_TIME\", \"LC_MONETARY\",\n           \"LC_NUMERIC\", \"LC_ALL\", \"CHAR_MAX\"]\ndef _strcoll(a,b):\n    \"\"\" strcoll(string,string) -> int.\n        Compares two strings according to the locale.\n    \"\"\"\n    return (a > b) - (a < b)",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "_localeconv",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "_localeconv = localeconv\n# With this dict, you can override some items of localeconv's return value.\n# This is useful for testing purposes.\n_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "_override_localeconv",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "_override_localeconv = {}\n@functools.wraps(_localeconv)\ndef localeconv():\n    d = _localeconv()\n    if _override_localeconv:\n        d.update(_override_localeconv)\n    return d\n### Number formatting APIs\n# Author: Martin von Loewis\n# improved by Georg Brandl",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "_percent_re",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "_percent_re = re.compile(r'%(?:\\((?P<key>.*?)\\))?'\n                         r'(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')\ndef _format(percent, value, grouping=False, monetary=False, *additional):\n    if additional:\n        formatted = percent % ((value,) + additional)\n    else:\n        formatted = percent % value\n    # floats and decimal ints need special action!\n    if percent[-1] in 'eEfFgG':\n        seps = 0",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "_setlocale",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "_setlocale = setlocale\ndef _replace_encoding(code, encoding):\n    if '.' in code:\n        langname = code[:code.index('.')]\n    else:\n        langname = code\n    # Convert the encoding to a C lib compatible encoding string\n    norm_encoding = encodings.normalize_encoding(encoding)\n    #print('norm encoding: %r' % norm_encoding)\n    norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "locale_encoding_alias",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "locale_encoding_alias = {\n    # Mappings for non-standard encoding names used in locale names\n    '437':                          'C',\n    'c':                            'C',\n    'en':                           'ISO8859-1',\n    'jis':                          'JIS7',\n    'jis7':                         'JIS7',\n    'ajec':                         'eucJP',\n    'koi8c':                        'KOI8-C',\n    'microsoftcp1251':              'CP1251',",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "locale_alias",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "locale_alias = {\n    'a3':                                   'az_AZ.KOI8-C',\n    'a3_az':                                'az_AZ.KOI8-C',\n    'a3_az.koic':                           'az_AZ.KOI8-C',\n    'aa_dj':                                'aa_DJ.ISO8859-1',\n    'aa_er':                                'aa_ER.UTF-8',\n    'aa_et':                                'aa_ET.UTF-8',\n    'af':                                   'af_ZA.ISO8859-1',\n    'af_za':                                'af_ZA.ISO8859-1',\n    'agr_pe':                               'agr_PE.UTF-8',",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "windows_locale",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.locale",
        "description": "uploads.2024.04.30.officesolution.Lib.locale",
        "peekOfCode": "windows_locale = {\n    0x0436: \"af_ZA\", # Afrikaans\n    0x041c: \"sq_AL\", # Albanian\n    0x0484: \"gsw_FR\",# Alsatian - France\n    0x045e: \"am_ET\", # Amharic - Ethiopia\n    0x0401: \"ar_SA\", # Arabic - Saudi Arabia\n    0x0801: \"ar_IQ\", # Arabic - Iraq\n    0x0c01: \"ar_EG\", # Arabic - Egypt\n    0x1001: \"ar_LY\", # Arabic - Libya\n    0x1401: \"ar_DZ\", # Arabic - Algeria",
        "detail": "uploads.2024.04.30.officesolution.Lib.locale",
        "documentation": {}
    },
    {
        "label": "normcase",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def normcase(s):\n    \"\"\"Normalize case of pathname.\n    Makes all characters lowercase and all slashes into backslashes.\"\"\"\n    s = os.fspath(s)\n    try:\n        if isinstance(s, bytes):\n            return s.replace(b'/', b'\\\\').lower()\n        else:\n            return s.replace('/', '\\\\').lower()\n    except (TypeError, AttributeError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "isabs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    s = splitdrive(s)[1]\n    return len(s) > 0 and s[0] in _get_bothseps(s)\n# Join two (or more) paths.\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "join",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        seps = b'\\\\/'\n        colon = b':'\n    else:\n        sep = '\\\\'\n        seps = '\\\\/'\n        colon = ':'",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "splitdrive",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def splitdrive(p):\n    \"\"\"Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n    If the path contained a UNC path, the drive_or_unc will contain the host name",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def split(p):\n    \"\"\"Split a pathname.\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    seps = _get_bothseps(p)\n    d, p = splitdrive(p)\n    # set i to index beyond p's last slash\n    i = len(p)\n    while i and p[i-1] not in seps:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "splitext",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        return genericpath._splitext(p, b'\\\\', b'/', b'.')\n    else:\n        return genericpath._splitext(p, '\\\\', '/', '.')\nsplitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "basename",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "dirname",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "islink",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "lexists",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        st = os.lstat(path)\n    except OSError:\n        return False\n    return True\n# Is a path a mount point?\n# Any drive letter root (eg c:\\)\n# Any share UNC (eg \\\\server\\share)",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "ismount",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def ismount(path):\n    \"\"\"Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)\"\"\"\n    path = os.fspath(path)\n    seps = _get_bothseps(path)\n    path = abspath(path)\n    root, rest = splitdrive(path)\n    if root and root[0] in seps:\n        return (not rest) or (rest in seps)\n    if rest in seps:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "expanduser",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def expanduser(path):\n    \"\"\"Expand ~ and ~user constructs.\n    If user or $HOME is unknown, do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "expandvars",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def expandvars(path):\n    \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n    Unknown variables are left unchanged.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        if b'$' not in path and b'%' not in path:\n            return path\n        import string\n        varchars = bytes(string.ascii_letters + string.digits + '_-', 'ascii')\n        quote = b'\\''",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "normpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n        special_prefixes = (b'\\\\\\\\.\\\\', b'\\\\\\\\?\\\\')\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "relpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '\\\\'\n        curdir = '.'",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "commonpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "def commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "curdir",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "curdir = '.'\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "pardir",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "pardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "extsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "extsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "sep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "pathsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "pathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "altsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "altsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "defpath",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "defpath = '.;C:\\\\bin'\ndevnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "devnull",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "devnull = 'nul'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\n           \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]\ndef _get_bothseps(path):\n    if isinstance(path, bytes):\n        return b'\\\\/'",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "splitext.__doc__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "splitext.__doc__ = genericpath._splitext.__doc__\n# Return the tail (basename) part of a path.\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n# Return the head (dirname) part of a path.\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n# Is a path a symbolic link?",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "realpath",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "realpath = abspath\n# Win9x family and earlier have no Unicode filename support.\nsupports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "supports_unicode_filenames",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "description": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "peekOfCode": "supports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.ntpath",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "class attrgetter:\n    \"\"\"\n    Return a callable object that fetches the given attribute(s) from its operand.\n    After f = attrgetter('name'), the call f(r) returns r.name.\n    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\n    After h = attrgetter('name.first', 'name.last'), the call h(r) returns\n    (r.name.first, r.name.last).\n    \"\"\"\n    __slots__ = ('_attrs', '_call')\n    def __init__(self, attr, *attrs):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "class itemgetter:\n    \"\"\"\n    Return a callable object that fetches the given item(s) from its operand.\n    After f = itemgetter(2), the call f(r) returns r[2].\n    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])\n    \"\"\"\n    __slots__ = ('_items', '_call')\n    def __init__(self, item, *items):\n        if not items:\n            self._items = (item,)",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "methodcaller",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "class methodcaller:\n    \"\"\"\n    Return a callable object that calls the given method on its operand.\n    After f = methodcaller('name'), the call f(r) returns r.name().\n    After g = methodcaller('name', 'date', foo=1), the call g(r) returns\n    r.name('date', foo=1).\n    \"\"\"\n    __slots__ = ('_name', '_args', '_kwargs')\n    def __init__(*args, **kwargs):\n        if len(args) < 2:",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "lt",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def lt(a, b):\n    \"Same as a < b.\"\n    return a < b\ndef le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def le(a, b):\n    \"Same as a <= b.\"\n    return a <= b\ndef eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "eq",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def eq(a, b):\n    \"Same as a == b.\"\n    return a == b\ndef ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ne(a, b):\n    \"Same as a != b.\"\n    return a != b\ndef ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ge",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ge(a, b):\n    \"Same as a >= b.\"\n    return a >= b\ndef gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "gt",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def gt(a, b):\n    \"Same as a > b.\"\n    return a > b\n# Logical Operations **********************************************************#\ndef not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "not_",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def not_(a):\n    \"Same as not a.\"\n    return not a\ndef truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "truth",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def truth(a):\n    \"Return True if a is true, False otherwise.\"\n    return True if a else False\ndef is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "is_",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def is_(a, b):\n    \"Same as a is b.\"\n    return a is b\ndef is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "is_not",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def is_not(a, b):\n    \"Same as a is not b.\"\n    return a is not b\n# Mathematical/Bitwise Operations *********************************************#\ndef abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "abs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def abs(a):\n    \"Same as abs(a).\"\n    return _abs(a)\ndef add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def add(a, b):\n    \"Same as a + b.\"\n    return a + b\ndef and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "and_",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def and_(a, b):\n    \"Same as a & b.\"\n    return a & b\ndef floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "floordiv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def floordiv(a, b):\n    \"Same as a // b.\"\n    return a // b\ndef index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def index(a):\n    \"Same as a.__index__().\"\n    return a.__index__()\ndef inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "inv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def inv(a):\n    \"Same as ~a.\"\n    return ~a\ninvert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "lshift",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "mod",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def mul(a, b):\n    \"Same as a * b.\"\n    return a * b\ndef matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "matmul",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def matmul(a, b):\n    \"Same as a @ b.\"\n    return a @ b\ndef neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "neg",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def neg(a):\n    \"Same as -a.\"\n    return -a\ndef or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "or_",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def or_(a, b):\n    \"Same as a | b.\"\n    return a | b\ndef pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def pos(a):\n    \"Same as +a.\"\n    return +a\ndef pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "pow",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def pow(a, b):\n    \"Same as a ** b.\"\n    return a ** b\ndef rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "rshift",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def rshift(a, b):\n    \"Same as a >> b.\"\n    return a >> b\ndef sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def sub(a, b):\n    \"Same as a - b.\"\n    return a - b\ndef truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "truediv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def truediv(a, b):\n    \"Same as a / b.\"\n    return a / b\ndef xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "xor",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def xor(a, b):\n    \"Same as a ^ b.\"\n    return a ^ b\n# Sequence Operations *********************************************************#\ndef concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def concat(a, b):\n    \"Same as a + b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    return a + b\ndef contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "contains",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def contains(a, b):\n    \"Same as b in a (note reversed operands).\"\n    return b in a\ndef countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "countOf",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def countOf(a, b):\n    \"Return the number of times b occurs in a.\"\n    count = 0\n    for i in a:\n        if i == b:\n            count += 1\n    return count\ndef delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "delitem",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def delitem(a, b):\n    \"Same as del a[b].\"\n    del a[b]\ndef getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "getitem",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def getitem(a, b):\n    \"Same as a[b].\"\n    return a[b]\ndef indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "indexOf",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def indexOf(a, b):\n    \"Return the first index of b in a.\"\n    for i, j in enumerate(a):\n        if j == b:\n            return i\n    else:\n        raise ValueError('sequence.index(x): x not in sequence')\ndef setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "setitem",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def setitem(a, b, c):\n    \"Same as a[b] = c.\"\n    a[b] = c\ndef length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "length_hint",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def length_hint(obj, default=0):\n    \"\"\"\n    Return an estimate of the number of items in obj.\n    This is useful for presizing containers when building from an iterable.\n    If the object supports len(), the result will be exact. Otherwise, it may\n    over- or under-estimate by an arbitrary amount. The result will be an\n    integer >= 0.\n    \"\"\"\n    if not isinstance(default, int):\n        msg = (\"'%s' object cannot be interpreted as an integer\" %",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "iadd",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def iadd(a, b):\n    \"Same as a += b.\"\n    a += b\n    return a\ndef iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "iand",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def iand(a, b):\n    \"Same as a &= b.\"\n    a &= b\n    return a\ndef iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "iconcat",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def iconcat(a, b):\n    \"Same as a += b, for a and b sequences.\"\n    if not hasattr(a, '__getitem__'):\n        msg = \"'%s' object can't be concatenated\" % type(a).__name__\n        raise TypeError(msg)\n    a += b\n    return a\ndef ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ifloordiv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ifloordiv(a, b):\n    \"Same as a //= b.\"\n    a //= b\n    return a\ndef ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ilshift",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ilshift(a, b):\n    \"Same as a <<= b.\"\n    a <<= b\n    return a\ndef imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "imod",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def imod(a, b):\n    \"Same as a %= b.\"\n    a %= b\n    return a\ndef imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "imul",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def imul(a, b):\n    \"Same as a *= b.\"\n    a *= b\n    return a\ndef imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "imatmul",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def imatmul(a, b):\n    \"Same as a @= b.\"\n    a @= b\n    return a\ndef ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ior",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ior(a, b):\n    \"Same as a |= b.\"\n    a |= b\n    return a\ndef ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ipow",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ipow(a, b):\n    \"Same as a **= b.\"\n    a **=b\n    return a\ndef irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "irshift",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def irshift(a, b):\n    \"Same as a >>= b.\"\n    a >>= b\n    return a\ndef isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "isub",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def isub(a, b):\n    \"Same as a -= b.\"\n    a -= b\n    return a\ndef itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "itruediv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def itruediv(a, b):\n    \"Same as a /= b.\"\n    a /= b\n    return a\ndef ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "ixor",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "def ixor(a, b):\n    \"Same as a ^= b.\"\n    a ^= b\n    return a\ntry:\n    from _operator import *\nexcept ImportError:\n    pass\nelse:\n    from _operator import __doc__",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__all__ = ['abs', 'add', 'and_', 'attrgetter', 'concat', 'contains', 'countOf',\n           'delitem', 'eq', 'floordiv', 'ge', 'getitem', 'gt', 'iadd', 'iand',\n           'iconcat', 'ifloordiv', 'ilshift', 'imatmul', 'imod', 'imul',\n           'index', 'indexOf', 'inv', 'invert', 'ior', 'ipow', 'irshift',\n           'is_', 'is_not', 'isub', 'itemgetter', 'itruediv', 'ixor', 'le',\n           'length_hint', 'lshift', 'lt', 'matmul', 'methodcaller', 'mod',\n           'mul', 'ne', 'neg', 'not_', 'or_', 'pos', 'pow', 'rshift',\n           'setitem', 'sub', 'truediv', 'truth', 'xor']\nfrom builtins import abs as _abs\n# Comparison Operations *******************************************************#",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "invert",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "invert = inv\ndef lshift(a, b):\n    \"Same as a << b.\"\n    return a << b\ndef mod(a, b):\n    \"Same as a % b.\"\n    return a % b\ndef mul(a, b):\n    \"Same as a * b.\"\n    return a * b",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__lt__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__lt__ = lt\n__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__le__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__le__ = le\n__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__eq__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__eq__ = eq\n__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ne__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ne__ = ne\n__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ge__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ge__ = ge\n__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__gt__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__gt__ = gt\n__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__not__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__not__ = not_\n__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__abs__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__abs__ = abs\n__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__add__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__add__ = add\n__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__and__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__and__ = and_\n__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__floordiv__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__floordiv__ = floordiv\n__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__index__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__index__ = index\n__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__inv__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__inv__ = inv\n__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__invert__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__invert__ = invert\n__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__lshift__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__lshift__ = lshift\n__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__mod__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__mod__ = mod\n__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__mul__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__mul__ = mul\n__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__matmul__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__matmul__ = matmul\n__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__neg__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__neg__ = neg\n__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__or__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__or__ = or_\n__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__pos__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__pos__ = pos\n__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__pow__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__pow__ = pow\n__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__rshift__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__rshift__ = rshift\n__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__sub__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__sub__ = sub\n__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__truediv__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__truediv__ = truediv\n__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__xor__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__xor__ = xor\n__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__concat__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__concat__ = concat\n__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__contains__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__contains__ = contains\n__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__delitem__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__delitem__ = delitem\n__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__getitem__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__getitem__ = getitem\n__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__setitem__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__setitem__ = setitem\n__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__iadd__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__iadd__ = iadd\n__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__iand__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__iand__ = iand\n__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__iconcat__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__iconcat__ = iconcat\n__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ifloordiv__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ifloordiv__ = ifloordiv\n__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ilshift__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ilshift__ = ilshift\n__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__imod__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__imod__ = imod\n__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__imul__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__imul__ = imul\n__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__imatmul__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__imatmul__ = imatmul\n__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ior__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ior__ = ior\n__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ipow__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ipow__ = ipow\n__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__irshift__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__irshift__ = irshift\n__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__isub__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__isub__ = isub\n__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__itruediv__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__itruediv__ = itruediv\n__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "__ixor__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.operator",
        "description": "uploads.2024.04.30.officesolution.Lib.operator",
        "peekOfCode": "__ixor__ = ixor",
        "detail": "uploads.2024.04.30.officesolution.Lib.operator",
        "documentation": {}
    },
    {
        "label": "_Environ",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "class _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n    def __getitem__(self, key):",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "_wrap_close",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "class _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "PathLike",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "class PathLike(abc.ABC):\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return hasattr(subclass, '__fspath__')",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "makedirs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "removedirs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def removedirs(name):\n    \"\"\"removedirs(name)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "renames",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "walk",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execl",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execle",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execlp",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execlpe",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execvp",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "execvpe",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "get_exec_path",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "popen",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "fdopen",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "def fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n    If str or bytes is passed in, it is returned unchanged. Otherwise the",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "_names",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "_names = sys.builtin_module_names\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "sys.modules['os.path']",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "sys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n    _set = set()",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "SEEK_SET",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "SEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "SEEK_CUR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "SEEK_CUR = 1\nSEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "SEEK_END",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "SEEK_END = 2\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "environ = _createenviron()\ndel _createenviron\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "supports_bytes_environ",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.os",
        "description": "uploads.2024.04.30.officesolution.Lib.os",
        "peekOfCode": "supports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,",
        "detail": "uploads.2024.04.30.officesolution.Lib.os",
        "documentation": {}
    },
    {
        "label": "normcase",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    s = os.fspath(s)\n    if not isinstance(s, (bytes, str)):\n        raise TypeError(\"normcase() argument must be str or bytes, \"\n                        \"not '{}'\".format(s.__class__.__name__))\n    return s\n# Return whether a path is absolute.\n# Trivial in Posix, harder on the Mac or MS-DOS.\ndef isabs(s):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "isabs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    sep = _get_sep(s)\n    return s.startswith(sep)\n# Join pathnames.\n# Ignore the previous parts if a part is absolute.\n# Insert a '/' unless the first part is empty or already ends in '/'.\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "join",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    a = os.fspath(a)\n    sep = _get_sep(a)\n    path = a\n    try:\n        if not p:",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "splitext",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "splitdrive",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "basename",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\n# Return the head (dirname) part of a path, same as split(path)[0].\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "dirname",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    p = os.fspath(p)\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\n# Is a path a symbolic link?",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "islink",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n# Being true for dangling symbolic links is also useful.\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "lexists",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except OSError:\n        return False\n    return True\n# Is a path a mount point?\n# (Does this work for all UNIXes?  Is it even guaranteed to work by Posix?)\ndef ismount(path):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "ismount",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    try:\n        s1 = os.lstat(path)\n    except OSError:\n        # It doesn't exist -- so not a mount point. :-)\n        return False\n    else:\n        # A symlink can never be a mount point\n        if stat.S_ISLNK(s1.st_mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "expanduser",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "expandvars",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "normpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "abspath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "realpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    filename = os.fspath(filename)\n    path, ok = _joinrealpath(filename[:0], filename, {})\n    return abspath(path)\n# Join two paths, normalizing and eliminating any symbolic links\n# encountered in the second path.\ndef _joinrealpath(path, rest, seen):\n    if isinstance(path, bytes):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "relpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "commonpath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "def commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'/'\n        curdir = b'.'\n    else:\n        sep = '/'",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "curdir",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "curdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "pardir",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "pardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "extsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "extsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "sep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "sep = '/'\npathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "pathsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "pathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "defpath",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "defpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "altsep",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "altsep = None\ndevnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "devnull",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "devnull = '/dev/null'\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"commonpath\"]\ndef _get_sep(path):\n    if isinstance(path, bytes):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "splitext.__doc__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "splitext.__doc__ = genericpath._splitext.__doc__\n# Split a pathname into a drive specification and the rest of the\n# path.  Useful on DOS/Windows/NT; on Unix, the drive is always empty.\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    p = os.fspath(p)\n    return p[:0], p\n# Return the tail (basename) part of a path, same as split(path)[1].\ndef basename(p):",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "_varprog",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "_varprog = None\n_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "_varprogb",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    path = os.fspath(path)\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "supports_unicode_filenames",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "description": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "peekOfCode": "supports_unicode_filenames = (sys.platform == 'darwin')\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'",
        "detail": "uploads.2024.04.30.officesolution.Lib.posixpath",
        "documentation": {}
    },
    {
        "label": "Random",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "class Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "SystemRandom",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "class SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n    def getrandbits(self, k):",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\", \"choices\",\n           \"SystemRandom\"]\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "NV_MAGICCONST",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "TWOPI",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "TWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "LOG4",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "LOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "SG_MAGICCONST",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "SG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "BPF",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "BPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "RECIP_BPF",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "RECIP_BPF = 2**-BPF\n# Translated by Guido van Rossum from C source provided by\n# Adrian Baddeley.  Adapted by Raymond Hettinger for use with\n# the Mersenne Twister  and os.urandom() core generators.\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "_inst",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "seed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "random = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "uniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "triangular",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "triangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "randint",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "randint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "choice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "randrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "sample = _inst.sample\nshuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "shuffle = _inst.shuffle\nchoices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "choices",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "choices = _inst.choices\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "normalvariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "normalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "lognormvariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "lognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "expovariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "expovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "vonmisesvariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "vonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "gammavariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "gammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "gauss",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "gauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "betavariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "betavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "paretovariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "paretovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "weibullvariate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "weibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "getstate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "getstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "setstate",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "setstate = _inst.setstate\ngetrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "getrandbits",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.random",
        "description": "uploads.2024.04.30.officesolution.Lib.random",
        "peekOfCode": "getrandbits = _inst.getrandbits\nif hasattr(_os, \"fork\"):\n    _os.register_at_fork(after_in_child=_inst.seed)\nif __name__ == '__main__':\n    _test()",
        "detail": "uploads.2024.04.30.officesolution.Lib.random",
        "documentation": {}
    },
    {
        "label": "RegexFlag",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "class RegexFlag(enum.IntFlag):\n    ASCII = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    A = ASCII\n    I = IGNORECASE",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "Scanner",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "class Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.Pattern()\n        s.flags = flags",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "match",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "fullmatch",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "subn",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "split",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\ndef findall(pattern, string, flags=0):",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "findall",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "finditer",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "purge",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "escape",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "def escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\nPattern = type(sre_compile.compile('', 0))",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "__version__ = \"2.2.1\"\nclass RegexFlag(enum.IntFlag):\n    ASCII = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    A = ASCII",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "error = sre_compile.error\n# --------------------------------------------------------------------\n# public interface\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "_special_chars_map",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "Pattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "Match",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "Match = type(sre_compile.compile('', 0).match(''))\n# --------------------------------------------------------------------\n# internals\n_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "_cache",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "_cache = {}  # ordered!\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "_MAXCACHE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.re",
        "description": "uploads.2024.04.30.officesolution.Lib.re",
        "peekOfCode": "_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):",
        "detail": "uploads.2024.04.30.officesolution.Lib.re",
        "documentation": {}
    },
    {
        "label": "Repr",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "description": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "peekOfCode": "class Repr:\n    def __init__(self):\n        self.maxlevel = 6\n        self.maxtuple = 6\n        self.maxlist = 6\n        self.maxarray = 5\n        self.maxdict = 4\n        self.maxset = 6\n        self.maxfrozenset = 6\n        self.maxdeque = 6",
        "detail": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "documentation": {}
    },
    {
        "label": "recursive_repr",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "description": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "peekOfCode": "def recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()\n            if key in repr_running:\n                return fillvalue\n            repr_running.add(key)\n            try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "description": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "peekOfCode": "__all__ = [\"Repr\", \"repr\", \"recursive_repr\"]\nimport builtins\nfrom itertools import islice\nfrom _thread import get_ident\ndef recursive_repr(fillvalue='...'):\n    'Decorator to make a repr function return fillvalue for a recursive call'\n    def decorating_function(user_function):\n        repr_running = set()\n        def wrapper(self):\n            key = id(self), get_ident()",
        "detail": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "documentation": {}
    },
    {
        "label": "aRepr",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "description": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "peekOfCode": "aRepr = Repr()\nrepr = aRepr.repr",
        "detail": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "documentation": {}
    },
    {
        "label": "repr",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "description": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "peekOfCode": "repr = aRepr.repr",
        "detail": "uploads.2024.04.30.officesolution.Lib.reprlib",
        "documentation": {}
    },
    {
        "label": "Completer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "description": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "peekOfCode": "class Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:\n        readline.set_completer(Completer(my_namespace).complete)",
        "detail": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "documentation": {}
    },
    {
        "label": "get_class_members",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "description": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "peekOfCode": "def get_class_members(klass):\n    ret = dir(klass)\n    if hasattr(klass,'__bases__'):\n        for base in klass.__bases__:\n            ret = ret + get_class_members(base)\n    return ret\ntry:\n    import readline\nexcept ImportError:\n    _readline_available = False",
        "detail": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "description": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "peekOfCode": "__all__ = [\"Completer\"]\nclass Completer:\n    def __init__(self, namespace = None):\n        \"\"\"Create a new completer for the command line.\n        Completer([namespace]) -> completer instance.\n        If unspecified, the default namespace where completions are performed\n        is __main__ (technically, __main__.__dict__). Namespaces should be\n        given as dictionaries.\n        Completer instances should be used as the completion mechanism of\n        readline via the set_completer() call:",
        "detail": "uploads.2024.04.30.officesolution.Lib.rlcompleter",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class Error(OSError):\n    pass\nclass SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "SameFileError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class SameFileError(Error):\n    \"\"\"Raised when source and destination are the same file.\"\"\"\nclass SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "SpecialFileError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class SpecialFileError(OSError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "ExecError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class ExecError(OSError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\ndef copyfileobj(fsrc, fdst, length=16*1024):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    while 1:",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "ReadError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class ReadError(OSError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\ndef copyfileobj(fsrc, fdst, length=16*1024):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    while 1:\n        buf = fsrc.read(length)\n        if not buf:",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "RegistryError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "class RegistryError(Exception):\n    \"\"\"Raised when a registry operation with the archiving\n    and unpacking registries fails\"\"\"\ndef copyfileobj(fsrc, fdst, length=16*1024):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    while 1:\n        buf = fsrc.read(length)\n        if not buf:\n            break\n        fdst.write(buf)",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copyfileobj",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copyfileobj(fsrc, fdst, length=16*1024):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    while 1:\n        buf = fsrc.read(length)\n        if not buf:\n            break\n        fdst.write(buf)\ndef _samefile(src, dst):\n    # Macintosh, Unix.\n    if hasattr(os.path, 'samefile'):",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copyfile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copyfile(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data from src to dst.\n    If follow_symlinks is not set and src is a symbolic link, a new\n    symlink will be created instead of copying the file it points to.\n    \"\"\"\n    if _samefile(src, dst):\n        raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    for fn in [src, dst]:\n        try:\n            st = os.stat(fn)",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copymode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copymode(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy mode bits from src to dst.\n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n    \"\"\"\n    if not follow_symlinks and os.path.islink(src) and os.path.islink(dst):\n        if hasattr(os, 'lchmod'):\n            stat_func, chmod_func = os.lstat, os.lchmod\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copystat",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copystat(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy all stat info (mode bits, atime, mtime, flags) from src to dst.\n    If the optional flag `follow_symlinks` is not set, symlinks aren't followed if and\n    only if both `src` and `dst` are symlinks.\n    \"\"\"\n    def _nop(*args, ns=None, follow_symlinks=None):\n        pass\n    # follow symlinks (aka don't not follow symlinks)\n    follow = follow_symlinks or not (os.path.islink(src) and os.path.islink(dst))\n    if follow:",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copy(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    If source and destination are the same file, a SameFileError will be\n    raised.\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copy2",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copy2(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and all stat info (\"cp -p src dst\"). Return the file's\n    destination.\"\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst, follow_symlinks=follow_symlinks)",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "ignore_patterns",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def ignore_patterns(*patterns):\n    \"\"\"Function that can be used as copytree() ignore parameter.\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files\"\"\"\n    def _ignore_patterns(path, names):\n        ignored_names = []\n        for pattern in patterns:\n            ignored_names.extend(fnmatch.filter(names, pattern))\n        return set(ignored_names)\n    return _ignore_patterns",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "copytree",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n             ignore_dangling_symlinks=False):\n    \"\"\"Recursively copy a directory tree.\n    The destination directory must not already exist.\n    If exception(s) occur, an Error is raised with a list of reasons.\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't\n    exist, an exception will be added in the list of errors raised in",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "rmtree",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n    \"\"\"\n    if ignore_errors:",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n    If the destination is on our current filesystem, then rename() is used.",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "get_archive_formats",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def get_archive_formats():\n    \"\"\"Returns a list of supported formats for archiving and unarchiving.\n    Each element of the returned sequence is a tuple (name, description)\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "register_archive_format",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "unregister_archive_format",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def unregister_archive_format(name):\n    del _ARCHIVE_FORMATS[name]\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "make_archive",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"gztar\",\n    \"bztar\", or \"xztar\".  Or any other registered format.\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "get_unpack_formats",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def get_unpack_formats():\n    \"\"\"Returns a list of supported formats for unpacking.\n    Each element of the returned sequence is a tuple\n    (name, extensions, description)\n    \"\"\"\n    formats = [(name, info[0], info[3]) for name, info in\n               _UNPACK_FORMATS.items()]\n    formats.sort()\n    return formats\ndef _check_unpack_options(extensions, function, extra_args):",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "register_unpack_format",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def register_unpack_format(name, extensions, function, extra_args=None,\n                           description=''):\n    \"\"\"Registers an unpack format.\n    `name` is the name of the format. `extensions` is a list of extensions\n    corresponding to the format.\n    `function` is the callable that will be\n    used to unpack archives. The callable will receive archives to unpack.\n    If it's unable to handle an archive, it needs to raise a ReadError\n    exception.\n    If provided, `extra_args` is a sequence of",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "unregister_unpack_format",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def unregister_unpack_format(name):\n    \"\"\"Removes the pack format from the registry.\"\"\"\n    del _UNPACK_FORMATS[name]\ndef _ensure_directory(path):\n    \"\"\"Ensure that the parent directory of `path` exists\"\"\"\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\ndef _unpack_zipfile(filename, extract_dir):\n    \"\"\"Unpack zip `filename` to `extract_dir`",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "unpack_archive",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def unpack_archive(filename, extract_dir=None, format=None):\n    \"\"\"Unpack an archive.\n    `filename` is the name of the archive.\n    `extract_dir` is the name of the target directory, where the archive\n    is unpacked. If not provided, the current working directory is used.\n    `format` is the archive format: one of \"zip\", \"tar\", \"gztar\", \"bztar\",\n    or \"xztar\".  Or any other registered format.  If not provided,\n    unpack_archive will use the filename extension and see if an unpacker\n    was registered for that extension.\n    In case none is found, a ValueError is raised.",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "chown",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def chown(path, user=None, group=None):\n    \"\"\"Change owner user and group of the given path.\n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n    \"\"\"\n    if user is None and group is None:\n        raise ValueError(\"user and/or group must be set\")\n    _user = user\n    _group = group\n    # -1 means don't change it",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "get_terminal_size",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def get_terminal_size(fallback=(80, 24)):\n    \"\"\"Get the size of the terminal window.\n    For each of the two dimensions, the environment variable, COLUMNS\n    and LINES respectively, is checked. If the variable is defined and\n    the value is a positive integer, it is used.\n    When COLUMNS or LINES is not defined, which is the common case,\n    the terminal connected to sys.__stdout__ is queried\n    by invoking os.get_terminal_size.\n    If the terminal size cannot be successfully queried, either because\n    the system doesn't support querying, or because we are not",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "which",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "def which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    \"\"\"Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(\"PATH\"), or can be overridden with a custom search\n    path.\n    \"\"\"\n    # Check that a given file can be accessed with the correct mode.\n    # Additionally check that `file` is not a directory, as on Windows",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\", \"get_terminal_size\",\n           \"SameFileError\"]\n           # disk_usage is added later, if available on the platform\nclass Error(OSError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "_use_fd_functions",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=\n                     os.supports_dir_fd and\n                     os.scandir in os.supports_fd and\n                     os.stat in os.supports_follow_symlinks)\ndef rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "rmtree.avoids_symlink_attacks",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "rmtree.avoids_symlink_attacks = _use_fd_functions\ndef _basename(path):\n    # A basename() variant which first strips the trailing slash, if present.\n    # Thus we always get the last component of the path, even for directories.\n    sep = os.path.sep + (os.path.altsep or '')\n    return os.path.basename(path.rstrip(sep))\ndef move(src, dst, copy_function=copy2):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "_ARCHIVE_FORMATS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "_ARCHIVE_FORMATS = {\n    'tar':   (_make_tarball, [('compress', None)], \"uncompressed tar file\"),\n}\nif _ZLIB_SUPPORTED:\n    _ARCHIVE_FORMATS['gztar'] = (_make_tarball, [('compress', 'gzip')],\n                                \"gzip'ed tar-file\")\n    _ARCHIVE_FORMATS['zip'] = (_make_zipfile, [], \"ZIP file\")\nif _BZ2_SUPPORTED:\n    _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],\n                                \"bzip2'ed tar-file\")",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "_UNPACK_FORMATS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.shutil",
        "description": "uploads.2024.04.30.officesolution.Lib.shutil",
        "peekOfCode": "_UNPACK_FORMATS = {\n    'tar':   (['.tar'], _unpack_tarfile, [], \"uncompressed tar file\"),\n    'zip':   (['.zip'], _unpack_zipfile, [], \"ZIP file\"),\n}\nif _ZLIB_SUPPORTED:\n    _UNPACK_FORMATS['gztar'] = (['.tar.gz', '.tgz'], _unpack_tarfile, [],\n                                \"gzip'ed tar-file\")\nif _BZ2_SUPPORTED:\n    _UNPACK_FORMATS['bztar'] = (['.tar.bz2', '.tbz2'], _unpack_tarfile, [],\n                                \"bzip2'ed tar-file\")",
        "detail": "uploads.2024.04.30.officesolution.Lib.shutil",
        "documentation": {}
    },
    {
        "label": "_Printer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "class _Printer(object):\n    \"\"\"interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.\"\"\"\n    MAXLINES = 23\n    def __init__(self, name, data, files=(), dirs=()):\n        self.__name = name\n        self.__data = data\n        self.__files = files\n        self.__dirs = dirs\n        self.__lines = None",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "_Helper",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "class _Helper(object):\n    \"\"\"Define the built-in 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n    \"\"\"\n    def __repr__(self):\n        return \"Type help() for interactive help, \" \"or help(object) for help about object.\"\n    def __call__(self, *args, **kwds):\n        import pydoc\n        return pydoc.help(*args, **kwds)\ndef sethelper():",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "makepath",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "abs__file__",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:\n            continue\n        m.__file__ = os.path.abspath(f)\ndef removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "removeduppaths",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def removeduppaths():\n    \"\"\" Remove duplicate entries from sys.path along with making them\n    absolute\"\"\"\n    # This ensures that the initial path provided by the interpreter contains\n    # only absolute pathnames, even if we're running from the build directory.\n    L = []\n    known_paths = set()\n    for dir in sys.path:\n        # Filter out duplicate paths (on case-insensitive file systems also\n        # if they only differ in case); turn relative paths into absolute",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "addbuilddir",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def addbuilddir():\n    \"\"\"Append ./build/lib.<platform> in case we're running in the build dir\n    (especially for Guido :-)\"\"\"\n    from distutils.util import get_platform\n    s = \"build/lib.{}-{:.3}\".format(get_platform(), sys.version)\n    if hasattr(sys, \"gettotalrefcount\"):\n        s += \"-pydebug\"\n    s = os.path.join(os.path.dirname(sys.path[-1]), s)\n    sys.path.append(s)\ndef _init_pathinfo():",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "addpackage",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def addpackage(sitedir, name, known_paths):\n    \"\"\"Add a new path to known_paths by combining sitedir and 'name' or execute\n    sitedir if it starts with 'import'\"\"\"\n    if known_paths is None:\n        _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    fullname = os.path.join(sitedir, name)\n    try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "addsitedir",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def addsitedir(sitedir, known_paths=None):\n    \"\"\"Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'\"\"\"\n    if known_paths is None:\n        known_paths = _init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = makepath(sitedir)\n    if not sitedircase in known_paths:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "addsitepackages",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def addsitepackages(known_paths, sys_prefix=sys.prefix, exec_prefix=sys.exec_prefix):\n    \"\"\"Add site-packages (and possibly site-python) to sys.path\"\"\"\n    prefixes = [os.path.join(sys_prefix, \"local\"), sys_prefix]\n    if exec_prefix != sys_prefix:\n        prefixes.append(os.path.join(exec_prefix, \"local\"))\n    for prefix in prefixes:\n        if prefix:\n            if sys.platform in (\"os2emx\", \"riscos\"):\n                sitedirs = [os.path.join(prefix, \"Lib\", \"site-packages\")]\n            elif _is_pypy:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "check_enableusersite",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def check_enableusersite():\n    \"\"\"Check if user site directory is safe for inclusion\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    \"\"\"\n    if hasattr(sys, \"flags\") and getattr(sys.flags, \"no_user_site\", False):\n        return False",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "addusersitepackages",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def addusersitepackages(known_paths):\n    \"\"\"Add a per user site-package to sys.path\n    Each user has its own python directory with site-packages in the\n    home directory.\n    USER_BASE is the root directory for all Python versions\n    USER_SITE is the user specific site-packages directory\n    USER_SITE/.. can be used for data.\n    \"\"\"\n    global USER_BASE, USER_SITE, ENABLE_USER_SITE\n    env_base = os.environ.get(\"PYTHONUSERBASE\", None)",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "setBEGINLIBPATH",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def setBEGINLIBPATH():\n    \"\"\"The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n    \"\"\"\n    dllpath = os.path.join(sys.prefix, \"Lib\", \"lib-dynload\")\n    libpath = os.environ[\"BEGINLIBPATH\"].split(\";\")\n    if libpath[-1]:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "setquit",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def setquit():\n    \"\"\"Define new built-ins 'quit' and 'exit'.\n    These are simply strings that display a hint on how to exit.\n    \"\"\"\n    if os.sep == \":\":\n        eof = \"Cmd-Q\"\n    elif os.sep == \"\\\\\":\n        eof = \"Ctrl-Z plus Return\"\n    else:\n        eof = \"Ctrl-D (i.e. EOF)\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "setcopyright",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def setcopyright():\n    \"\"\"Set 'copyright' and 'credits' in __builtin__\"\"\"\n    builtins.copyright = _Printer(\"copyright\", sys.copyright)\n    if _is_pypy:\n        builtins.credits = _Printer(\"credits\", \"PyPy is maintained by the PyPy developers: http://pypy.org/\")\n    else:\n        builtins.credits = _Printer(\n            \"credits\",\n            \"\"\"\\\n    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "sethelper",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def sethelper():\n    builtins.help = _Helper()\ndef aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "aliasmbcs",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def aliasmbcs():\n    \"\"\"On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.\"\"\"\n    if sys.platform == \"win32\":\n        import locale, codecs\n        enc = locale.getdefaultlocale()[1]\n        if enc.startswith(\"cp\"):  # \"cp***\" ?\n            try:\n                codecs.lookup(enc)",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "setencoding",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def setencoding():\n    \"\"\"Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this.\"\"\"\n    encoding = \"ascii\"  # Default value set by _PyUnicode_Init()\n    if 0:\n        # Enable to support locale aware default string encodings.\n        import locale\n        loc = locale.getdefaultlocale()\n        if loc[1]:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "execsitecustomize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def execsitecustomize():\n    \"\"\"Run custom site specific code, if available.\"\"\"\n    try:\n        import sitecustomize\n    except ImportError:\n        pass\ndef virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "virtual_install_main_packages",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def virtual_install_main_packages():\n    f = open(os.path.join(os.path.dirname(__file__), \"orig-prefix.txt\"))\n    sys.real_prefix = f.read().strip()\n    f.close()\n    pos = 2\n    hardcoded_relative_dirs = []\n    if sys.path[0] == \"\":\n        pos += 1\n    if _is_pypy:\n        if sys.version_info > (3, 2):",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "force_global_eggs_after_local_site_packages",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def force_global_eggs_after_local_site_packages():\n    \"\"\"\n    Force easy_installed eggs in the global environment to get placed\n    in sys.path after all packages inside the virtualenv.  This\n    maintains the \"least surprise\" result that packages in the\n    virtualenv always mask global packages, never the other way\n    around.\n    \"\"\"\n    egginsert = getattr(sys, \"__egginsert\", 0)\n    for i, path in enumerate(sys.path):",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "virtual_addsitepackages",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def virtual_addsitepackages(known_paths):\n    force_global_eggs_after_local_site_packages()\n    return addsitepackages(known_paths, sys_prefix=sys.real_prefix)\ndef execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "execusercustomize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def execusercustomize():\n    \"\"\"Run custom user specific code, if available.\"\"\"\n    try:\n        import usercustomize\n    except ImportError:\n        pass\ndef enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "enablerlcompleter",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def enablerlcompleter():\n    \"\"\"Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overridden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    \"\"\"\n    def register_readline():\n        import atexit",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "def main():\n    global ENABLE_USER_SITE\n    virtual_install_main_packages()\n    if _is_pypy:\n        import_builtin_stuff()\n    abs__file__()\n    paths_in_sys = removeduppaths()\n    if os.name == \"posix\" and sys.path and os.path.basename(sys.path[-1]) == \"Modules\":\n        addbuilddir()\n    GLOBAL_SITE_PACKAGES = not os.path.exists(os.path.join(os.path.dirname(__file__), \"no-global-site-packages.txt\"))",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "PREFIXES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "PREFIXES = [sys.prefix, sys.exec_prefix]\n# Enable per user site-packages directory\n# set it to False to disable the feature or True to force the feature\nENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "ENABLE_USER_SITE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "ENABLE_USER_SITE = None\n# for distutils.commands.install\nUSER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "USER_SITE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "USER_SITE = None\nUSER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "USER_BASE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "USER_BASE = None\n_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "_is_64bit",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "_is_64bit = (getattr(sys, \"maxsize\", None) or getattr(sys, \"maxint\")) > 2 ** 32\n_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "_is_pypy",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.site",
        "description": "uploads.2024.04.30.officesolution.Lib.site",
        "peekOfCode": "_is_pypy = hasattr(sys, \"pypy_version_info\")\ndef makepath(*paths):\n    dir = os.path.join(*paths)\n    dir = os.path.abspath(dir)\n    return dir, os.path.normcase(dir)\ndef abs__file__():\n    \"\"\"Set all module' __file__ attribute to an absolute path\"\"\"\n    for m in sys.modules.values():\n        f = getattr(m, \"__file__\", None)\n        if f is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.site",
        "documentation": {}
    },
    {
        "label": "isstring",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "def isstring(obj):\n    return isinstance(obj, (str, bytes))\ndef _code(p, flags):\n    flags = p.pattern.flags | flags\n    code = []\n    # compile info block\n    _compile_info(code, p, flags)\n    # compile the pattern\n    _compile(code, p.data, flags)\n    code.append(SUCCESS)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "dis",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "def dis(code):\n    import sys\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "def compile(p, flags=0):\n    # internal: convert pattern list to internal format\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n    code = _code(p, flags)\n    if flags & SRE_FLAG_DEBUG:\n        print()",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_LITERAL_CODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_REPEATING_CODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_SUCCESS_CODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_ASSERT_CODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_UNIT_CODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_equivalences",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # iı\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # sſ\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # µμ\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345ιι\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_ignorecase_fixes",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_CODEBITS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "MAXCODE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "MAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "_BITS_TRANS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "peekOfCode": "_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_compile",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "class error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)\n        lineno: The line corresponding to pos (may be None)\n        colno: The column corresponding to pos (may be None)\n    \"\"\"\n    __module__ = 're'",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "_NamedIntConstant",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "class _NamedIntConstant(int):\n    def __new__(cls, value, name):\n        self = super(_NamedIntConstant, cls).__new__(cls, value)\n        self.name = name\n        return self\n    def __str__(self):\n        return self.name\n    __repr__ = __str__\nMAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "MAGIC",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "MAGIC = 20171005\nfrom _sre import MAXREPEAT, MAXGROUPS\n# SRE standard exception (access as sre.error)\n# should this really be here?\nclass error(Exception):\n    \"\"\"Exception raised for invalid regular expressions.\n    Attributes:\n        msg: The unformatted error message\n        pattern: The regular expression pattern\n        pos: The index in the pattern where compilation failed (may be None)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "MAXREPEAT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "MAXREPEAT = _NamedIntConstant(MAXREPEAT, 'MAXREPEAT')\ndef _makecodes(names):\n    names = names.strip().split()\n    items = [_NamedIntConstant(i, name) for i, name in enumerate(names)]\n    globals().update({item.name: item for item in items})\n    return items\n# operators\n# failure=0 success=1 (just because it looks better that way :-)\nOPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "OPCODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "OPCODES = _makecodes(\"\"\"\n    FAILURE SUCCESS\n    ANY ANY_ALL\n    ASSERT ASSERT_NOT\n    AT\n    BRANCH\n    CALL\n    CATEGORY\n    CHARSET BIGCHARSET\n    GROUPREF GROUPREF_EXISTS",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "ATCODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "ATCODES = _makecodes(\"\"\"\n    AT_BEGINNING AT_BEGINNING_LINE AT_BEGINNING_STRING\n    AT_BOUNDARY AT_NON_BOUNDARY\n    AT_END AT_END_LINE AT_END_STRING\n    AT_LOC_BOUNDARY AT_LOC_NON_BOUNDARY\n    AT_UNI_BOUNDARY AT_UNI_NON_BOUNDARY\n\"\"\")\n# categories\nCHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "CHCODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "CHCODES = _makecodes(\"\"\"\n    CATEGORY_DIGIT CATEGORY_NOT_DIGIT\n    CATEGORY_SPACE CATEGORY_NOT_SPACE\n    CATEGORY_WORD CATEGORY_NOT_WORD\n    CATEGORY_LINEBREAK CATEGORY_NOT_LINEBREAK\n    CATEGORY_LOC_WORD CATEGORY_LOC_NOT_WORD\n    CATEGORY_UNI_DIGIT CATEGORY_UNI_NOT_DIGIT\n    CATEGORY_UNI_SPACE CATEGORY_UNI_NOT_SPACE\n    CATEGORY_UNI_WORD CATEGORY_UNI_NOT_WORD\n    CATEGORY_UNI_LINEBREAK CATEGORY_UNI_NOT_LINEBREAK",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "OP_IGNORE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "OP_IGNORE = {\n    LITERAL: LITERAL_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_IGNORE,\n}\nOP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "OP_LOCALE_IGNORE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "OP_LOCALE_IGNORE = {\n    LITERAL: LITERAL_LOC_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_LOC_IGNORE,\n}\nOP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "OP_UNICODE_IGNORE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "OP_UNICODE_IGNORE = {\n    LITERAL: LITERAL_UNI_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_UNI_IGNORE,\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "AT_MULTILINE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "AT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "AT_LOCALE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "AT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "AT_UNICODE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "AT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "CH_LOCALE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "CH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_LOC_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_NOT_LINEBREAK\n}",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "CH_UNICODE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "CH_UNICODE = {\n    CATEGORY_DIGIT: CATEGORY_UNI_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_UNI_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_UNI_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_UNI_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_UNI_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_UNI_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_UNI_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_UNI_NOT_LINEBREAK\n}",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_TEMPLATE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_TEMPLATE = 1 # template mode (disable backtracking)\nSRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_IGNORECASE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_LOCALE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_MULTILINE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_DOTALL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_UNICODE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_VERBOSE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_DEBUG",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_FLAG_ASCII",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_FLAG_ASCII = 256 # use ascii \"locale\"\n# flags for INFO primitive\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_INFO_PREFIX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_INFO_LITERAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "SRE_INFO_CHARSET",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "peekOfCode": "SRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d)\n        for item in items:\n            f.write(\"#define %s_%s %d\\n\" % (prefix, item, item))\n    with open(\"sre_constants.h\", \"w\") as f:\n        f.write(\"\"\"\\\n/*\n * Secret Labs' Regular Expression Engine",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_constants",
        "documentation": {}
    },
    {
        "label": "Verbose",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "class Verbose(Exception):\n    pass\nclass Pattern:\n    # master pattern object.  keeps track of global attributes\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "class Pattern:\n    # master pattern object.  keeps track of global attributes\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "SubPattern",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "class SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, pattern, data=None):\n        self.pattern = pattern\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n    def dump(self, level=0):\n        nl = True",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "Tokenizer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "class Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "fix_flags",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "def fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "def parse(str, flags=0, pattern=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n    source = Tokenizer(str)\n    if pattern is None:\n        pattern = Pattern()\n    pattern.flags = flags\n    pattern.str = str\n    try:\n        p = _parse_sub(source, pattern, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "parse_template",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "def parse_template(source, pattern):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "expand_template",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "def expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "SPECIAL_CHARS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "SPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "REPEAT_CHARS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "REPEAT_CHARS = \"*+?{\"\nDIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "DIGITS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "DIGITS = frozenset(\"0123456789\")\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "OCTDIGITS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "OCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "HEXDIGITS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "HEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "ASCIILETTERS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "ASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "WHITESPACE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "WHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "_REPEATCODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "_UNITCODES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "ESCAPES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "ESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "CATEGORIES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "CATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "FLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "TYPE_FLAGS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "TYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass Pattern:\n    # master pattern object.  keeps track of global attributes\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "GLOBAL_FLAGS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "description": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "peekOfCode": "GLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\nclass Verbose(Exception):\n    pass\nclass Pattern:\n    # master pattern object.  keeps track of global attributes\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None",
        "detail": "uploads.2024.04.30.officesolution.Lib.sre_parse",
        "documentation": {}
    },
    {
        "label": "S_IMODE",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IFMT",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.\n    \"\"\"\n    return mode & 0o170000\n# Constants used as S_IFMT() for various file types\n# (not all are implemented on all systems)\nS_IFDIR  = 0o040000  # directory\nS_IFCHR  = 0o020000  # character device\nS_IFBLK  = 0o060000  # block device",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISDIR",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISCHR",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISBLK",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\n    return S_IFMT(mode) == S_IFBLK\ndef S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISREG",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISREG(mode):\n    \"\"\"Return True if mode is from a regular file.\"\"\"\n    return S_IFMT(mode) == S_IFREG\ndef S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISFIFO",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISFIFO(mode):\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\n    return S_IFMT(mode) == S_IFIFO\ndef S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\n# Names for permission bits",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISLNK",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISLNK(mode):\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\n    return S_IFMT(mode) == S_IFLNK\ndef S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISSOCK",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def S_ISSOCK(mode):\n    \"\"\"Return True if mode is from a socket.\"\"\"\n    return S_IFMT(mode) == S_IFSOCK\n# Names for permission bits\nS_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "filemode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "def filemode(mode):\n    \"\"\"Convert a file's mode to a string of the form '-rwxrwxrwx'.\"\"\"\n    perm = []\n    for table in _filemode_table:\n        for bit, char in table:\n            if mode & bit == bit:\n                perm.append(char)\n                break\n        else:\n            perm.append(\"-\")",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "ST_NLINK",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "ST_NLINK = 3\nST_UID   = 4\nST_GID   = 5\nST_SIZE  = 6\nST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "ST_ATIME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "ST_ATIME = 7\nST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "ST_MTIME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "ST_MTIME = 8\nST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "ST_CTIME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "ST_CTIME = 9\n# Extract bits from the mode\ndef S_IMODE(mode):\n    \"\"\"Return the portion of the file's mode that can be set by\n    os.chmod().\n    \"\"\"\n    return mode & 0o7777\ndef S_IFMT(mode):\n    \"\"\"Return the portion of the file's mode that describes the\n    file type.",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IFSOCK",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IFSOCK = 0o140000  # socket file\n# Functions to test for each file type\ndef S_ISDIR(mode):\n    \"\"\"Return True if mode is from a directory.\"\"\"\n    return S_IFMT(mode) == S_IFDIR\ndef S_ISCHR(mode):\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\n    return S_IFMT(mode) == S_IFCHR\ndef S_ISBLK(mode):\n    \"\"\"Return True if mode is from a block special device file.\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISUID",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_ISUID = 0o4000  # set UID bit\nS_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISGID",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_ISGID = 0o2000  # set GID bit\nS_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ENFMT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_ENFMT = S_ISGID # file locking enforcement\nS_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_ISVTX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_ISVTX = 0o1000  # sticky bit\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IREAD",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IWRITE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IEXEC",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\nS_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IRWXU",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IRWXU = 0o0700  # mask for owner permissions\nS_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IRUSR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IRUSR = 0o0400  # read by owner\nS_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IWUSR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IWUSR = 0o0200  # write by owner\nS_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IXUSR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IXUSR = 0o0100  # execute by owner\nS_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IRWXG",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IRWXG = 0o0070  # mask for group permissions\nS_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IRGRP",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IRGRP = 0o0040  # read by group\nS_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IWGRP",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IWGRP = 0o0020  # write by group\nS_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IXGRP",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IXGRP = 0o0010  # execute by group\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IRWXO",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IRWXO = 0o0007  # mask for others (not in group) permissions\nS_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IROTH",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IROTH = 0o0004  # read by others\nS_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IWOTH",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IWOTH = 0o0002  # write by others\nS_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "S_IXOTH",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "S_IXOTH = 0o0001  # execute by others\n# Names for file flags\nUF_NODUMP    = 0x00000001  # do not dump file\nUF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "UF_IMMUTABLE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "UF_IMMUTABLE = 0x00000002  # file may not be changed\nUF_APPEND    = 0x00000004  # file may only be appended to\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "UF_COMPRESSED",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "UF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\nSF_ARCHIVED  = 0x00010000  # file may be archived\nSF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFREG,         \"-\"),",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "SF_IMMUTABLE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "SF_IMMUTABLE = 0x00020000  # file may not be changed\nSF_APPEND    = 0x00040000  # file may only be appended to\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\n_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),\n     (S_IFCHR,         \"c\"),",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "_filemode_table",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "_filemode_table = (\n    ((S_IFLNK,         \"l\"),\n     (S_IFREG,         \"-\"),\n     (S_IFBLK,         \"b\"),\n     (S_IFDIR,         \"d\"),\n     (S_IFCHR,         \"c\"),\n     (S_IFIFO,         \"p\")),\n    ((S_IRUSR,         \"r\"),),\n    ((S_IWUSR,         \"w\"),),\n    ((S_IXUSR|S_ISUID, \"s\"),",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_ARCHIVE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_ARCHIVE = 32\nFILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_COMPRESSED",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_COMPRESSED = 2048\nFILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_DEVICE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_DEVICE = 64\nFILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_DIRECTORY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_DIRECTORY = 16\nFILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_ENCRYPTED",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_ENCRYPTED = 16384\nFILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_HIDDEN",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_HIDDEN = 2\nFILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_INTEGRITY_STREAM",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768\nFILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_NORMAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NORMAL = 128\nFILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192\nFILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_NO_SCRUB_DATA",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072\nFILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_OFFLINE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_OFFLINE = 4096\nFILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_READONLY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_READONLY = 1\nFILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_REPARSE_POINT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_REPARSE_POINT = 1024\nFILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_SPARSE_FILE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_SPARSE_FILE = 512\nFILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_SYSTEM",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_SYSTEM = 4\nFILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_TEMPORARY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_TEMPORARY = 256\nFILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "FILE_ATTRIBUTE_VIRTUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.stat",
        "description": "uploads.2024.04.30.officesolution.Lib.stat",
        "peekOfCode": "FILE_ATTRIBUTE_VIRTUAL = 65536\n# If available, use C implementation\ntry:\n    from _stat import *\nexcept ImportError:\n    pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.stat",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.struct",
        "description": "uploads.2024.04.30.officesolution.Lib.struct",
        "peekOfCode": "__all__ = [\n    # Functions\n    'calcsize', 'pack', 'pack_into', 'unpack', 'unpack_from',\n    'iter_unpack',\n    # Classes\n    'Struct',\n    # Exceptions\n    'error'\n    ]\nfrom _struct import *",
        "detail": "uploads.2024.04.30.officesolution.Lib.struct",
        "documentation": {}
    },
    {
        "label": "TarError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class TarError(Exception):\n    \"\"\"Base exception.\"\"\"\n    pass\nclass ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "ExtractError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "ReadError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class ReadError(TarError):\n    \"\"\"Exception for unreadable tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "CompressionError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "StreamError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "HeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "EmptyHeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "TruncatedHeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "EOFHeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "InvalidHeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "SubsequentHeaderError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\n#---------------------------\n# internal stream interface\n#---------------------------\nclass _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "_LowLevelFile",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    \"\"\"\n    def __init__(self, name, mode):\n        mode = {\n            \"r\": os.O_RDONLY,\n            \"w\": os.O_WRONLY | os.O_CREAT | os.O_TRUNC,\n        }[mode]",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "_Stream",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class _Stream:\n    \"\"\"Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n       _Stream is intended to be used only internally.\n    \"\"\"\n    def __init__(self, name, mode, comptype, fileobj, bufsize):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "_StreamProxy",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class _StreamProxy(object):\n    \"\"\"Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    \"\"\"\n    def __init__(self, fileobj):\n        self.fileobj = fileobj\n        self.buf = self.fileobj.read(BLOCKSIZE)\n    def read(self, size):\n        self.read = self.fileobj.read\n        return self.buf",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "_FileInFile",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class _FileInFile(object):\n    \"\"\"A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    \"\"\"\n    def __init__(self, fileobj, offset, size, blockinfo=None):\n        self.fileobj = fileobj\n        self.offset = offset\n        self.size = size\n        self.position = 0",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "ExFileObject",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class ExFileObject(io.BufferedReader):\n    def __init__(self, tarfile, tarinfo):\n        fileobj = _FileInFile(tarfile.fileobj, tarinfo.offset_data,\n                tarinfo.size, tarinfo.sparse)\n        super().__init__(fileobj)\n#class ExFileObject\n#------------------\n# Exported Classes\n#------------------\nclass TarInfo(object):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "TarInfo",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class TarInfo(object):\n    \"\"\"Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    \"\"\"\n    __slots__ = (\"name\", \"mode\", \"uid\", \"gid\", \"size\", \"mtime\",\n                 \"chksum\", \"type\", \"linkname\", \"uname\", \"gname\",\n                 \"devmajor\", \"devminor\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "TarFile",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "class TarFile(object):\n    \"\"\"The TarFile Class provides an interface to tar archives.\n    \"\"\"\n    debug = 0                   # May be set from 0 (no msgs) to 3 (all msgs)\n    dereference = False         # If true, add content of linked file to the\n                                # tar file, else the link.\n    ignore_zeros = False        # If true, skips empty or invalid blocks and\n                                # continues processing.\n    errorlevel = 1              # If 0, fatal errors only appear in debug\n                                # messages (if debug >= 0). If > 0, errors",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "stn",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def stn(s, length, encoding, errors):\n    \"\"\"Convert a string to a null-terminated bytes object.\n    \"\"\"\n    s = s.encode(encoding, errors)\n    return s[:length] + (length - len(s)) * NUL\ndef nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "nts",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:\n        s = s[:p]\n    return s.decode(encoding, errors)\ndef nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "nti",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"\n    # There are two possible encodings for a number field, see\n    # itn() below.\n    if s[0] in (0o200, 0o377):\n        n = 0\n        for i in range(len(s) - 1):\n            n <<= 8\n            n += s[i + 1]",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "itn",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def itn(n, digits=8, format=DEFAULT_FORMAT):\n    \"\"\"Convert a python number to a number field.\n    \"\"\"\n    # POSIX 1003.1-1988 requires numbers to be encoded as a string of\n    # octal digits followed by a null-byte, this allows values up to\n    # (8**(digits-1))-1. GNU tar allows storing numbers greater than\n    # that if necessary. A leading 0o200 or 0o377 byte indicate this\n    # particular encoding, the following digits-1 bytes are a big-endian\n    # base-256 representation. This allows values up to (256**(digits-1))-1.\n    # A 0o200 byte indicates a positive number, a 0o377 byte a negative",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "calc_chksums",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def calc_chksums(buf):\n    \"\"\"Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    \"\"\"\n    unsigned_chksum = 256 + sum(struct.unpack_from(\"148B8x356B\", buf))",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "copyfileobj",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def copyfileobj(src, dst, length=None, exception=OSError, bufsize=None):\n    \"\"\"Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    \"\"\"\n    bufsize = bufsize or 16 * 1024\n    if length == 0:\n        return\n    if length is None:\n        shutil.copyfileobj(src, dst, bufsize)\n        return",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "filemode",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def filemode(mode):\n    \"\"\"Deprecated in this location; use stat.filemode.\"\"\"\n    import warnings\n    warnings.warn(\"deprecated in favor of stat.filemode\",\n                  DeprecationWarning, 2)\n    return stat.filemode(mode)\ndef _safe_print(s):\n    encoding = getattr(sys.stdout, 'encoding', None)\n    if encoding is not None:\n        s = s.encode(encoding, 'backslashreplace').decode(encoding)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "is_tarfile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def is_tarfile(name):\n    \"\"\"Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    \"\"\"\n    try:\n        t = open(name)\n        t.close()\n        return True\n    except TarError:\n        return False",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "def main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')\n    group.add_argument('-e', '--extract', nargs='+',",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "__credits__ = \"Gustavo Niemeyer, Niels Gust\\u00e4bel, Richard Townsend.\"\n#---------\n# Imports\n#---------\nfrom builtins import open as bltn_open\nimport sys\nimport os\nimport io\nimport shutil\nimport stat",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "symlink_exception",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "symlink_exception = (AttributeError, NotImplementedError)\ntry:\n    # OSError (winerror=1314) will be raised if the caller does not hold the\n    # SeCreateSymbolicLinkPrivilege privilege\n    symlink_exception += (OSError,)\nexcept NameError:\n    pass\n# from tarfile import *\n__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\", \"ReadError\",\n           \"CompressionError\", \"StreamError\", \"ExtractError\", \"HeaderError\",\n           \"ENCODING\", \"USTAR_FORMAT\", \"GNU_FORMAT\", \"PAX_FORMAT\",\n           \"DEFAULT_FORMAT\", \"open\"]\n#---------------------------------------------------------\n# tar constants\n#---------------------------------------------------------\nNUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "NUL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "NUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "BLOCKSIZE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "BLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "RECORDSIZE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "RECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNU_MAGIC",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "POSIX_MAGIC",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "POSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "LENGTH_NAME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "LENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "LENGTH_LINK",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "LENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "LENGTH_PREFIX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "LENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "REGTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "REGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "AREGTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "AREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "LNKTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "LNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "SYMTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "SYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "CHRTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "CHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "BLKTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "BLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "DIRTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "DIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "FIFOTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "FIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "CONTTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "CONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNUTYPE_LONGNAME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNUTYPE_LONGLINK",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNUTYPE_SPARSE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "XHDTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "XHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "XGLTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "XGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "SOLARIS_XHDTYPE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "SOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "USTAR_FORMAT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "USTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNU_FORMAT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "PAX_FORMAT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "PAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FORMAT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "DEFAULT_FORMAT = GNU_FORMAT\n#---------------------------------------------------------\n# tarfile constants\n#---------------------------------------------------------\n# File types that tarfile supports:\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_TYPES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "SUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)\n# File types that will be treated as a regular file.\nREGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "REGULAR_TYPES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "REGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\n# File types that are part of the GNU tar format.\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "GNU_TYPES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "GNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\n# Fields from a pax header that override a TarInfo attribute.\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "PAX_FIELDS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "PAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\n# Fields from a pax header that are affected by hdrcharset.\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "PAX_NAME_FIELDS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "PAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\n# Fields in a pax header that are numbers, all other fields\n# are treated as strings.\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "PAX_NUMBER_FIELDS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "PAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int\n}\n#---------------------------------------------------------\n# initialization",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "peekOfCode": "open = TarFile.open\ndef main():\n    import argparse\n    description = 'A simple command-line interface for tarfile module.'\n    parser = argparse.ArgumentParser(description=description)\n    parser.add_argument('-v', '--verbose', action='store_true', default=False,\n                        help='Verbose output')\n    group = parser.add_mutually_exclusive_group(required=True)\n    group.add_argument('-l', '--list', metavar='<tarfile>',\n                       help='Show listing of a tarfile')",
        "detail": "uploads.2024.04.30.officesolution.Lib.tarfile",
        "documentation": {}
    },
    {
        "label": "_RandomNameSequence",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "class _RandomNameSequence:\n    \"\"\"An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is eight characters long.  Multiple\n    threads can safely use the same instance at the same time.\n    _RandomNameSequence is an iterator.\"\"\"\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\n    @property\n    def rng(self):\n        cur_pid = _os.getpid()",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_TemporaryFileCloser",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "class _TemporaryFileCloser:\n    \"\"\"A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.\"\"\"\n    file = None  # Set here since __del__ checks it\n    close_called = False\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_TemporaryFileWrapper",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "class _TemporaryFileWrapper:\n    \"\"\"Temporary file wrapper\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    \"\"\"\n    def __init__(self, file, name, delete=True):\n        self.file = file\n        self.name = name\n        self.delete = delete",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "SpooledTemporaryFile",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "class SpooledTemporaryFile:\n    \"\"\"Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    \"\"\"\n    _rolled = False\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\n                 encoding=None, newline=None,\n                 suffix=None, prefix=None, dir=None):\n        if 'b' in mode:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryDirectory",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "class TemporaryDirectory(object):\n    \"\"\"Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n        with TemporaryDirectory() as tmpdir:\n            ...\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    \"\"\"\n    def __init__(self, suffix=None, prefix=None, dir=None):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "gettempprefix",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def gettempprefix():\n    \"\"\"The default prefix for temporary directories.\"\"\"\n    return template\ndef gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "gettempprefixb",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def gettempprefixb():\n    \"\"\"The default prefix for temporary directories as bytes.\"\"\"\n    return _os.fsencode(gettempprefix())\ntempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "gettempdir",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:\n            _once_lock.release()",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "gettempdirb",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def gettempdirb():\n    \"\"\"A bytes version of tempfile.gettempdir().\"\"\"\n    return _os.fsencode(gettempdir())\ndef mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "mkstemp",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def mkstemp(suffix=None, prefix=None, dir=None, text=False):\n    \"\"\"User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n    If 'suffix' is not None, the file name will end with that suffix,\n    otherwise there will be no suffix.\n    If 'prefix' is not None, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n    If 'dir' is not None, the file will be created in that directory,\n    otherwise a default directory is used.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "mkdtemp",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def mkdtemp(suffix=None, prefix=None, dir=None):\n    \"\"\"User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n    The directory is readable, writable, and searchable only by the\n    creating user.\n    Caller is responsible for deleting the directory when done with it.\n    \"\"\"\n    prefix, suffix, dir, output_type = _sanitize_params(prefix, suffix, dir)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "mktemp",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def mktemp(suffix=\"\", prefix=template, dir=None):\n    \"\"\"User-callable function to return a unique temporary file name.  The\n    file is not created.\n    Arguments are similar to mkstemp, except that the 'text' argument is\n    not accepted, and suffix=None, prefix=None and bytes file names are not\n    supported.\n    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may\n    refer to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "def NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\n                       newline=None, suffix=None, prefix=None,\n                       dir=None, delete=True):\n    \"\"\"Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "__all__ = [\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\n    \"mktemp\",                              # deprecated unsafe interface\n    \"TMP_MAX\", \"gettempprefix\",            # constants\n    \"tempdir\", \"gettempdir\",\n    \"gettempprefixb\", \"gettempdirb\",\n   ]\n# Imports.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_allocate_lock",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "_allocate_lock = _thread.allocate_lock\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_text_openflags",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\nif hasattr(_os, 'O_NOFOLLOW'):\n    _text_openflags |= _os.O_NOFOLLOW\n_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_bin_openflags",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "_bin_openflags = _text_openflags\nif hasattr(_os, 'O_BINARY'):\n    _bin_openflags |= _os.O_BINARY\nif hasattr(_os, 'TMP_MAX'):\n    TMP_MAX = _os.TMP_MAX\nelse:\n    TMP_MAX = 10000\n# This variable _was_ unused for legacy reasons, see issue 10354.\n# But as of 3.5 we actually use it at runtime so changing it would\n# have a possibly desirable side effect...  But we do not want to support",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "template = \"tmp\"\n# Internal routines.\n_once_lock = _allocate_lock()\nif hasattr(_os, \"lstat\"):\n    _stat = _os.lstat\nelif hasattr(_os, \"stat\"):\n    _stat = _os.stat\nelse:\n    # Fallback.  All we need is something that raises OSError if the\n    # file doesn't exist.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_once_lock",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "_once_lock = _allocate_lock()\nif hasattr(_os, \"lstat\"):\n    _stat = _os.lstat\nelif hasattr(_os, \"stat\"):\n    _stat = _os.stat\nelse:\n    # Fallback.  All we need is something that raises OSError if the\n    # file doesn't exist.\n    def _stat(fn):\n        fd = _os.open(fn, _os.O_RDONLY)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "_name_sequence",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "_name_sequence = None\ndef _get_candidate_names():\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\n    global _name_sequence\n    if _name_sequence is None:\n        _once_lock.acquire()\n        try:\n            if _name_sequence is None:\n                _name_sequence = _RandomNameSequence()\n        finally:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "tempdir",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "description": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "peekOfCode": "tempdir = None\ndef gettempdir():\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\n    global tempdir\n    if tempdir is None:\n        _once_lock.acquire()\n        try:\n            if tempdir is None:\n                tempdir = _get_default_tempdir()\n        finally:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tempfile",
        "documentation": {}
    },
    {
        "label": "ISTERMINAL",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "def ISTERMINAL(x):\n    return x < NT_OFFSET\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER\ndef _main():\n    import re\n    import sys\n    args = sys.argv[1:]",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ISNONTERMINAL",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "def ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER\ndef _main():\n    import re\n    import sys\n    args = sys.argv[1:]\n    inFileName = args and args[0] or \"Include/token.h\"\n    outFileName = \"Lib/token.py\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ISEOF",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "def ISEOF(x):\n    return x == ENDMARKER\ndef _main():\n    import re\n    import sys\n    args = sys.argv[1:]\n    inFileName = args and args[0] or \"Include/token.h\"\n    outFileName = \"Lib/token.py\"\n    if len(args) > 1:\n        outFileName = args[1]",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\n#  This file is automatically generated; please don't muck it up!\n#\n#  To update the symbols in this file, 'cd' to the top directory of\n#  the python source tree after building the interpreter and run:\n#\n#    ./python Lib/token.py\n#--start constants--\nENDMARKER = 0\nNAME = 1",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ENDMARKER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "ENDMARKER = 0\nNAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NAME = 1\nNUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NUMBER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NUMBER = 2\nSTRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "STRING = 3\nNEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NEWLINE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NEWLINE = 4\nINDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "INDENT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "INDENT = 5\nDEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DEDENT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DEDENT = 6\nLPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LPAR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LPAR = 7\nRPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RPAR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RPAR = 8\nLSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LSQB",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LSQB = 9\nRSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RSQB",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RSQB = 10\nCOLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "COLON",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "COLON = 11\nCOMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "COMMA",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "COMMA = 12\nSEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "SEMI",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "SEMI = 13\nPLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "PLUS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "PLUS = 14\nMINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "MINUS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "MINUS = 15\nSTAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "STAR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "STAR = 16\nSLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "SLASH",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "SLASH = 17\nVBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "VBAR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "VBAR = 18\nAMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "AMPER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "AMPER = 19\nLESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LESS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LESS = 20\nGREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "GREATER",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "GREATER = 21\nEQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "EQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "EQUAL = 22\nDOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DOT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DOT = 23\nPERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "PERCENT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "PERCENT = 24\nLBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LBRACE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LBRACE = 25\nRBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RBRACE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RBRACE = 26\nEQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "EQEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "EQEQUAL = 27\nNOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NOTEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NOTEQUAL = 28\nLESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LESSEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LESSEQUAL = 29\nGREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "GREATEREQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "GREATEREQUAL = 30\nTILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "TILDE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "TILDE = 31\nCIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "CIRCUMFLEX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "CIRCUMFLEX = 32\nLEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LEFTSHIFT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LEFTSHIFT = 33\nRIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RIGHTSHIFT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RIGHTSHIFT = 34\nDOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DOUBLESTAR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DOUBLESTAR = 35\nPLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "PLUSEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "PLUSEQUAL = 36\nMINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "MINEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "MINEQUAL = 37\nSTAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "STAREQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "STAREQUAL = 38\nSLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "SLASHEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "SLASHEQUAL = 39\nPERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "PERCENTEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "PERCENTEQUAL = 40\nAMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "AMPEREQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "AMPEREQUAL = 41\nVBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "VBAREQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "VBAREQUAL = 42\nCIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "CIRCUMFLEXEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "CIRCUMFLEXEQUAL = 43\nLEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "LEFTSHIFTEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "LEFTSHIFTEQUAL = 44\nRIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RIGHTSHIFTEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RIGHTSHIFTEQUAL = 45\nDOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DOUBLESTAREQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DOUBLESTAREQUAL = 46\nDOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DOUBLESLASH",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DOUBLESLASH = 47\nDOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "DOUBLESLASHEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "DOUBLESLASHEQUAL = 48\nAT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "AT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "AT = 49\nATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ATEQUAL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "ATEQUAL = 50\nRARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56\nENCODING = 57",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "RARROW",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "RARROW = 51\nELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56\nENCODING = 57\nN_TOKENS = 58",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ELLIPSIS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "ELLIPSIS = 52\n# Don't forget to update the table _PyParser_TokenNames in tokenizer.c!\nOP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56\nENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "OP",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "OP = 53\nERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56\nENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ERRORTOKEN",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "ERRORTOKEN = 54\n# These aren't used by the C tokenizer but are needed for tokenize.py\nCOMMENT = 55\nNL = 56\nENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--\ntok_name = {value: name",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "COMMENT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "COMMENT = 55\nNL = 56\nENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NL = 56\nENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "ENCODING",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "ENCODING = 57\nN_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\ndef ISTERMINAL(x):",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "N_TOKENS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "N_TOKENS = 58\n# Special definitions for cooperation with parser\nNT_OFFSET = 256\n#--end constants--\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\ndef ISTERMINAL(x):\n    return x < NT_OFFSET",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "NT_OFFSET",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "NT_OFFSET = 256\n#--end constants--\ntok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\ndef ISTERMINAL(x):\n    return x < NT_OFFSET\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "tok_name",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.token",
        "description": "uploads.2024.04.30.officesolution.Lib.token",
        "peekOfCode": "tok_name = {value: name\n            for name, value in globals().items()\n            if isinstance(value, int) and not name.startswith('_')}\n__all__.extend(tok_name.values())\ndef ISTERMINAL(x):\n    return x < NT_OFFSET\ndef ISNONTERMINAL(x):\n    return x >= NT_OFFSET\ndef ISEOF(x):\n    return x == ENDMARKER",
        "detail": "uploads.2024.04.30.officesolution.Lib.token",
        "documentation": {}
    },
    {
        "label": "TokenInfo",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "class TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):\n        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n            return EXACT_TOKEN_TYPES[self.string]\n        else:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "TokenError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "class TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "StopTokenizing",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "class StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Untokenizer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "class Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        if row < self.prev_row or row == self.prev_row and col < self.prev_col:\n            raise ValueError(\"start ({},{}) precedes previous end ({},{})\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def group(*choices): return '(' + '|'.join(choices) + ')'\ndef any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "any",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "maybe",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def maybe(*choices): return group(*choices) + '?'\n# Note: we use unicode matching for names (\"\\w\") but ascii matching for\n# number literals.\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "untokenize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def untokenize(iterable):\n    \"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n    Round-trip invariant for limited input:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "detect_encoding",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def detect_encoding(readline):\n    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "open",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def open(filename):\n    \"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"\n    buffer = _builtin_open(filename, 'rb')\n    try:\n        encoding, lines = detect_encoding(buffer.readline)\n        buffer.seek(0)\n        text = TextIOWrapper(buffer, encoding, line_buffering=True)\n        text.mode = 'r'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def tokenize(readline):\n    \"\"\"\n    The tokenize() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternatively, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "generate_tokens",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def generate_tokens(readline):\n    return _tokenize(readline, None)\ndef main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):\n        print(message, file=sys.stderr)\n    def error(message, filename=None, location=None):\n        if location:\n            args = (filename,) + location + (message,)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "def main():\n    import argparse\n    # Helper error handling routines\n    def perror(message):\n        print(message, file=sys.stderr)\n    def error(message, filename=None, location=None):\n        if location:\n            args = (filename,) + location + (message,)\n            perror(\"%s:%d:%d: error: %s\" % args)\n        elif filename:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nfrom itertools import chain\nimport itertools as _itertools",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nfrom builtins import open as _builtin_open\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\nfrom itertools import chain\nimport itertools as _itertools\nimport re",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "cookie_re",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "cookie_re = re.compile(r'^[ \\t\\f]*#.*?coding[:=][ \\t]*([-\\w.]+)', re.ASCII)\nblank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nEXACT_TOKEN_TYPES = {\n    '(':   LPAR,\n    ')':   RPAR,\n    '[':   LSQB,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "blank_re",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "blank_re = re.compile(br'^[ \\t\\f]*(?:[#\\r\\n]|$)', re.ASCII)\nimport token\n__all__ = token.__all__ + [\"tokenize\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nEXACT_TOKEN_TYPES = {\n    '(':   LPAR,\n    ')':   RPAR,\n    '[':   LSQB,\n    ']':   RSQB,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "__all__ = token.__all__ + [\"tokenize\", \"detect_encoding\",\n                           \"untokenize\", \"TokenInfo\"]\ndel token\nEXACT_TOKEN_TYPES = {\n    '(':   LPAR,\n    ')':   RPAR,\n    '[':   LSQB,\n    ']':   RSQB,\n    ':':   COLON,\n    ',':   COMMA,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "EXACT_TOKEN_TYPES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "EXACT_TOKEN_TYPES = {\n    '(':   LPAR,\n    ')':   RPAR,\n    '[':   LSQB,\n    ']':   RSQB,\n    ':':   COLON,\n    ',':   COMMA,\n    ';':   SEMI,\n    '+':   PLUS,\n    '-':   MINUS,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Whitespace",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Whitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Comment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Ignore",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Ignore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Name",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Name = r'\\w+'\nHexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Hexnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Hexnumber = r'0[xX](?:_?[0-9a-fA-F])+'\nBinnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Binnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Binnumber = r'0[bB](?:_?[01])+'\nOctnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Octnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Octnumber = r'0[oO](?:_?[0-7])+'\nDecnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Decnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Decnumber = r'(?:0(?:_?0)*|[1-9](?:_?[0-9])*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Intnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Intnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Exponent",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Exponent = r'[eE][-+]?[0-9](?:_?[0-9])*'\nPointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Pointfloat",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Pointfloat = group(r'[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?',\n                   r'\\.[0-9](?:_?[0-9])*') + maybe(Exponent)\nExpfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permuations (include 'fr', but not",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Expfloat",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Expfloat = r'[0-9](?:_?[0-9])*' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permuations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Floatnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Floatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permuations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Imagnumber",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Imagnumber = group(r'[0-9](?:_?[0-9])*[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permuations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Number",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Number = group(Imagnumber, Floatnumber, Intnumber)\n# Return the empty string, plus all of the valid string prefixes.\ndef _all_string_prefixes():\n    # The valid string prefixes. Only contain the lower case versions,\n    #  and don't contain any permuations (include 'fr', but not\n    #  'rf'). The various permutations will be generated.\n    _valid_string_prefixes = ['b', 'r', 'u', 'f', 'br', 'fr']\n    # if we add binary f-strings, add: ['fb', 'fbr']\n    result = {''}\n    for prefix in _valid_string_prefixes:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "StringPrefix",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "StringPrefix = group(*_all_string_prefixes())\n# Tail end of ' string.\nSingle = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Single",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Single = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\n# Tail end of \" string.\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Double",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Double = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\n# Tail end of ''' string.\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Because of leftmost-then-longest match semantics, be sure to put the",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Single3",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Single3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\n# Tail end of \"\"\" string.\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Because of leftmost-then-longest match semantics, be sure to put the\n# longest operators first (e.g., if = came before ==, == would get\n# recognized as two instances of =).",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Double3",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Double3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Because of leftmost-then-longest match semantics, be sure to put the\n# longest operators first (e.g., if = came before ==, == would get\n# recognized as two instances of =).\nOperator = group(r\"\\*\\*=?\", r\">>=?\", r\"<<=?\", r\"!=\",\n                 r\"//=?\", r\"->\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Triple",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Triple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\n# Single-line ' or \" string.\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Because of leftmost-then-longest match semantics, be sure to put the\n# longest operators first (e.g., if = came before ==, == would get\n# recognized as two instances of =).\nOperator = group(r\"\\*\\*=?\", r\">>=?\", r\"<<=?\", r\"!=\",\n                 r\"//=?\", r\"->\",\n                 r\"[+\\-*/%&@|^=<>]=?\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "String = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\n# Because of leftmost-then-longest match semantics, be sure to put the\n# longest operators first (e.g., if = came before ==, == would get\n# recognized as two instances of =).\nOperator = group(r\"\\*\\*=?\", r\">>=?\", r\"<<=?\", r\"!=\",\n                 r\"//=?\", r\"->\",\n                 r\"[+\\-*/%&@|^=<>]=?\",\n                 r\"~\")\nBracket = '[][(){}]'",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Operator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Operator = group(r\"\\*\\*=?\", r\">>=?\", r\"<<=?\", r\"!=\",\n                 r\"//=?\", r\"->\",\n                 r\"[+\\-*/%&@|^=<>]=?\",\n                 r\"~\")\nBracket = '[][(){}]'\nSpecial = group(r'\\r?\\n', r'\\.\\.\\.', r'[:;.,@]')\nFunny = group(Operator, Bracket, Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Bracket",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Bracket = '[][(){}]'\nSpecial = group(r'\\r?\\n', r'\\.\\.\\.', r'[:;.,@]')\nFunny = group(Operator, Bracket, Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Special",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Special = group(r'\\r?\\n', r'\\.\\.\\.', r'[:;.,@]')\nFunny = group(Operator, Bracket, Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Funny",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Funny = group(Operator, Bracket, Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "PlainToken",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "PlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "Token = Ignore + PlainToken\n# First (or only) line of ' or \" string.\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "ContStr",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "ContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "PseudoExtras",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "PseudoExtras = group(r'\\\\\\r?\\n|\\Z', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "PseudoToken",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "PseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\n# For a given string prefix plus quotes, endpats maps it to a regex\n#  to match the remainder of that string. _prefix can be empty, for\n#  a normal single or triple quoted string (with no prefix).\nendpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "endpats",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "endpats = {}\nfor _prefix in _all_string_prefixes():\n    endpats[_prefix + \"'\"] = Single\n    endpats[_prefix + '\"'] = Double\n    endpats[_prefix + \"'''\"] = Single3\n    endpats[_prefix + '\"\"\"'] = Double3\n# A set of all of the single and triple quoted string prefixes,\n#  including the opening quotes.\nsingle_quoted = set()\ntriple_quoted = set()",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "single_quoted",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "single_quoted = set()\ntriple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "triple_quoted",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "triple_quoted = set()\nfor t in _all_string_prefixes():\n    for u in (t + '\"', t + \"'\"):\n        single_quoted.add(u)\n    for u in (t + '\"\"\"', t + \"'''\"):\n        triple_quoted.add(u)\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "tabsize",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "description": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "peekOfCode": "tabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):",
        "detail": "uploads.2024.04.30.officesolution.Lib.tokenize",
        "documentation": {}
    },
    {
        "label": "_C",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "class _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "DynamicClassAttribute",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "class DynamicClassAttribute:\n    \"\"\"Route attribute access on a class to __getattr__.\n    This is a descriptor, used to define attributes that act differently when\n    accessed through an instance and through a class.  Instance access remains\n    normal, but access to an attribute through a class will be routed to the\n    class's __getattr__ method; this is done by raising AttributeError.\n    This allows one to have properties active on an instance, and have virtual\n    attributes on the class with the same name (see Enum for an example).\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "_GeneratorWrapper",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "class _GeneratorWrapper:\n    # TODO: Implement this in C.\n    def __init__(self, gen):\n        self.__wrapped = gen\n        self.__isgen = gen.__class__ is GeneratorType\n        self.__name__ = getattr(gen, '__name__', None)\n        self.__qualname__ = getattr(gen, '__qualname__', None)\n    def send(self, val):\n        return self.__wrapped.send(val)\n    def throw(self, tp, *rest):",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "new_class",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "def new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:\n        ns['__orig_bases__'] = bases\n    return meta(name, resolved_bases, ns, **kwds)\ndef resolve_bases(bases):",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "resolve_bases",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "def resolve_bases(bases):\n    \"\"\"Resolve MRO entries dynamically as specified by PEP 560.\"\"\"\n    new_bases = list(bases)\n    updated = False\n    shift = 0\n    for i, base in enumerate(bases):\n        if isinstance(base, type):\n            continue\n        if not hasattr(base, \"__mro_entries__\"):\n            continue",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "prepare_class",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "def prepare_class(name, bases=(), kwds=None):\n    \"\"\"Call the __prepare__ method of the appropriate metaclass.\n    Returns (metaclass, namespace, kwds) as a 3-tuple\n    *metaclass* is the appropriate metaclass\n    *namespace* is the prepared class namespace\n    *kwds* is an updated copy of the passed in kwds argument with any\n    'metaclass' entry removed. If no kwds argument is passed in, this will\n    be an empty dict.\n    \"\"\"\n    if kwds is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "coroutine",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "def coroutine(func):\n    \"\"\"Convert regular generator function to a coroutine.\"\"\"\n    if not callable(func):\n        raise TypeError('types.coroutine() expects a callable')\n    if (func.__class__ is FunctionType and\n        getattr(func, '__code__', None).__class__ is CodeType):\n        co_flags = func.__code__.co_flags\n        # Check if 'func' is a coroutine function.\n        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)\n        if co_flags & 0x180:",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "FunctionType = type(_f)\nLambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "LambdaType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "LambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "CodeType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "CodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "MappingProxyType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "MappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "SimpleNamespace",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "SimpleNamespace = type(sys.implementation)\ndef _g():\n    yield 1\nGeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "GeneratorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "GeneratorType = type(_g())\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "_c",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "CoroutineType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "CoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "_ag",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "_ag = _ag()\nAsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "AsyncGeneratorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "AsyncGeneratorType = type(_ag)\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "MethodType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "MethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "BuiltinFunctionType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "BuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "BuiltinMethodType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "BuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "WrapperDescriptorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "WrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "MethodWrapperType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "MethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "MethodDescriptorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "MethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "ClassMethodDescriptorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "ClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\nModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "ModuleType = type(sys)\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n# For Jython, the following two types are identical\nGetSetDescriptorType = type(FunctionType.__code__)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "GetSetDescriptorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "GetSetDescriptorType = type(FunctionType.__code__)\nMemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c,                           # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "MemberDescriptorType",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "MemberDescriptorType = type(FunctionType.__globals__)\ndel sys, _f, _g, _C, _c,                           # Not for export\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.types",
        "description": "uploads.2024.04.30.officesolution.Lib.types",
        "peekOfCode": "__all__ = [n for n in globals() if n[:1] != '_']",
        "detail": "uploads.2024.04.30.officesolution.Lib.types",
        "documentation": {}
    },
    {
        "label": "_OptionError",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "class _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:\n        try:\n            _setoption(arg)\n        except _OptionError as msg:\n            print(\"Invalid -W option ignored:\", msg, file=sys.stderr)",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "WarningMessage",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "class WarningMessage(object):\n    _WARNING_DETAILS = (\"message\", \"category\", \"filename\", \"lineno\", \"file\",\n                        \"line\", \"source\")\n    def __init__(self, message, category, filename, lineno, file=None,\n                 line=None, source=None):\n        self.message = message\n        self.category = category\n        self.filename = filename\n        self.lineno = lineno\n        self.file = file",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "catch_warnings",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "class catch_warnings(object):\n    \"\"\"A context manager that copies and restores the warnings filter upon\n    exiting the context.\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "showwarning",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "formatwarning",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)\n    return _formatwarnmsg_impl(msg)\ndef _showwarnmsg_impl(msg):\n    file = msg.file\n    if file is None:\n        file = sys.stderr\n        if file is None:\n            # sys.stderr is None when run with pythonw.exe:",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "filterwarnings",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def filterwarnings(action, message=\"\", category=Warning, module=\"\", lineno=0,\n                   append=False):\n    \"\"\"Insert an entry into the list of warnings filters (at the front).\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'message' -- a regex that the warning message must match\n    'category' -- a class that the warning must be a subclass of\n    'module' -- a regex that the module name must match\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "simplefilter",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def simplefilter(action, category=Warning, lineno=0, append=False):\n    \"\"\"Insert a simple entry into the list of warnings filters (at the front).\n    A simple filter matches all modules and messages.\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'category' -- a class that the warning must be a subclass of\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    \"\"\"\n    assert action in (\"error\", \"ignore\", \"always\", \"default\", \"module\",",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "resetwarnings",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def resetwarnings():\n    \"\"\"Clear the list of warning filters, so that no filters are active.\"\"\"\n    filters[:] = []\n    _filters_mutated()\nclass _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\n# Helper to process -W options passed via sys.warnoptions\ndef _processoptions(args):\n    for arg in args:",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def warn(message, category=None, stacklevel=1, source=None):\n    \"\"\"Issue a warning, or maybe ignore it or raise an exception.\"\"\"\n    # Check if message is already a Warning object\n    if isinstance(message, Warning):\n        category = message.__class__\n    # Check category argument\n    if category is None:\n        category = UserWarning\n    if not (isinstance(category, type) and issubclass(category, Warning)):\n        raise TypeError(\"category must be a Warning subclass, \"",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "warn_explicit",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "def warn_explicit(message, category, filename, lineno,\n                  module=None, registry=None, module_globals=None,\n                  source=None):\n    lineno = int(lineno)\n    if module is None:\n        module = filename or \"<unknown>\"\n        if module[-3:].lower() == \".py\":\n            module = module[:-3] # XXX What about leading pathname?\n    if registry is None:\n        registry = {}",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "__all__ = [\"warn\", \"warn_explicit\", \"showwarning\",\n           \"formatwarning\", \"filterwarnings\", \"simplefilter\",\n           \"resetwarnings\", \"catch_warnings\"]\ndef showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, file, line)\n    _showwarnmsg_impl(msg)\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    msg = WarningMessage(message, category, filename, lineno, None, line)",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "_showwarning_orig",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "_showwarning_orig = showwarning\ndef _showwarnmsg(msg):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    try:\n        sw = showwarning\n    except NameError:\n        pass\n    else:\n        if sw is not _showwarning_orig:\n            # warnings.showwarning() was replaced",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "_formatwarning_orig",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.warnings",
        "description": "uploads.2024.04.30.officesolution.Lib.warnings",
        "peekOfCode": "_formatwarning_orig = formatwarning\ndef _formatwarnmsg(msg):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    try:\n        fw = formatwarning\n    except NameError:\n        pass\n    else:\n        if fw is not _formatwarning_orig:\n            # warnings.formatwarning() was replaced",
        "detail": "uploads.2024.04.30.officesolution.Lib.warnings",
        "documentation": {}
    },
    {
        "label": "WeakMethod",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "class WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"\n    def __new__(cls, meth, callback=None):\n        try:\n            obj = meth.__self__\n            func = meth.__func__",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "WeakValueDictionary",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "class WeakValueDictionary(_collections_abc.MutableMapping):\n    \"\"\"Mapping class that references values weakly.\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"\n    # We inherit the constructor without worrying about the input\n    # dictionary; since it uses our .update() method, we get the right\n    # checks (if the other dictionary is a WeakValueDictionary,\n    # objects are unwrapped on the way out, and we always wrap on the\n    # way in).",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "KeyedRef",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "class KeyedRef(ref):\n    \"\"\"Specialized reference that includes a key corresponding to the value.\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n    \"\"\"\n    __slots__ = \"key\",\n    def __new__(type, ob, callback, key):\n        self = ref.__new__(type, ob, callback)",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "WeakKeyDictionary",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "class WeakKeyDictionary(_collections_abc.MutableMapping):\n    \"\"\" Mapping class that references keys weakly.\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"\n    def __init__(self, dict=None):",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "finalize",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "class finalize:\n    \"\"\"Class for finalization of weakrefable objects\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "ProxyTypes",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "ProxyTypes = (ProxyType, CallableProxyType)\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib.weakref",
        "description": "uploads.2024.04.30.officesolution.Lib.weakref",
        "peekOfCode": "__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\n           \"WeakSet\", \"WeakMethod\", \"finalize\"]\nclass WeakMethod(ref):\n    \"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"\n    __slots__ = \"_func_ref\", \"_meth_type\", \"_alive\", \"__weakref__\"",
        "detail": "uploads.2024.04.30.officesolution.Lib.weakref",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Hashable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __hash__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Awaitable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __await__(self):\n        yield\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Coroutine(Awaitable):\n    __slots__ = ()\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class AsyncIterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class AsyncIterator(AsyncIterable):\n    __slots__ = ()\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n    def __aiter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class AsyncGenerator(AsyncIterator):\n    __slots__ = ()\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Iterable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Iterator(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n    def __iter__(self):\n        return self\n    @classmethod\n    def __subclasshook__(cls, C):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Reversible",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Reversible(Iterable):\n    __slots__ = ()\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Generator",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Generator(Iterator):\n    __slots__ = ()\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Sized",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Sized(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __len__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Container(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Collection",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Collection(Sized, Iterable, Container):\n    __slots__ = ()\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\nclass Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Callable(metaclass=ABCMeta):\n    __slots__ = ()\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Set",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Set(Collection):\n    \"\"\"A set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()\n    def __le__(self, other):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "MutableSet",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n    __slots__ = ()",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Mapping(Collection):\n    __slots__ = ()\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "MappingView",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class MappingView(Sized):\n    __slots__ = '_mapping',\n    def __init__(self, mapping):\n        self._mapping = mapping\n    def __len__(self):\n        return len(self._mapping)\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\nclass KeysView(MappingView, Set):\n    __slots__ = ()",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "KeysView",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class KeysView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, key):\n        return key in self._mapping\n    def __iter__(self):\n        yield from self._mapping\nKeysView.register(dict_keys)",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "ItemsView",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class ItemsView(MappingView, Set):\n    __slots__ = ()\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "ValuesView",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class ValuesView(MappingView, Collection):\n    __slots__ = ()\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n    def __iter__(self):\n        for key in self._mapping:",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class MutableMapping(Mapping):\n    __slots__ = ()\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, key, value):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class Sequence(Reversible, Collection):\n    \"\"\"All the operations on a read-only sequence.\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n    def __iter__(self):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "ByteString",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class ByteString(Sequence):\n    \"\"\"This unifies bytes and bytearray.\n    XXX Should add all their methods.\n    \"\"\"\n    __slots__ = ()\nByteString.register(bytes)\nByteString.register(bytearray)\nclass MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "class MutableSequence(Sequence):\n    __slots__ = ()\n    \"\"\"All the operations on a read-write sequence.\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n    \"\"\"\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n    @abstractmethod",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "__name__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "__name__ = \"collections.abc\"\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "bytes_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "bytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "bytearray_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "bytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "#callable_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_keyiterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_valueiterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_itemiterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "list_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "list_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "list_reverseiterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "list_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "range_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "range_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "longrange_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "longrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "set_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "set_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "str_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "str_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "tuple_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "tuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "zip_iterator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "zip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_keys",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_values",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_items",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "dict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "mappingproxy",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "mappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "generator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "_coro",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "coroutine",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "coroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "_ag",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "async_generator",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "description": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "peekOfCode": "async_generator = type(_ag)\ndel _ag\n### ONE-TRICK PONIES ###\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented",
        "detail": "uploads.2024.04.30.officesolution.Lib._collections_abc",
        "documentation": {}
    },
    {
        "label": "LockType",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "class LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n    \"\"\"\n    def __init__(self):\n        self.locked_status = False",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "start_new_thread",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n    \"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "exit",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def exit():\n    \"\"\"Dummy implementation of _thread.exit().\"\"\"\n    raise SystemExit\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "get_ident",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return 1\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "allocate_lock",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "stack_size",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\ndef _set_sentinel():\n    \"\"\"Dummy implementation of _thread._set_sentinel().\"\"\"\n    return LockType()\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "interrupt_main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "def interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',\n           'interrupt_main', 'LockType']\n# A dummy value\nTIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_MAX",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "TIMEOUT_MAX = 2**31\n# NOTE: this module can be imported early in the extension building process,\n# and so top level imports of other modules should be avoided.  Instead, all\n# imports are done when needed on a function-by-function basis.  Since threads\n# are disabled, the import lock should not be an issue anyway (??).\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "error = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "_interrupt",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "_interrupt = False\n# True when not executing in a \"thread\"\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "_main",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "description": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "peekOfCode": "_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True",
        "detail": "uploads.2024.04.30.officesolution.Lib._dummy_thread",
        "documentation": {}
    },
    {
        "label": "_IterationGuard",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "description": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "peekOfCode": "class _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):\n        w = self.weakcontainer()",
        "detail": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "documentation": {}
    },
    {
        "label": "WeakSet",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "description": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "peekOfCode": "class WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)",
        "detail": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "description": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "peekOfCode": "__all__ = ['WeakSet']\nclass _IterationGuard:\n    # This context manager registers itself in the current iterators of the\n    # weak container, such as to delay all removals until the context manager\n    # exits.\n    # This technique should be relatively thread-safe (since sets are).\n    def __init__(self, weakcontainer):\n        # Don't create cycles\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):",
        "detail": "uploads.2024.04.30.officesolution.Lib._weakrefset",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BankBook',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0002_loan_loaninline_delete_bankbook",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0002_loan_loaninline_delete_bankbook",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0001_initial'),\n        ('staff', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Loan',\n            fields=[",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0002_loan_loaninline_delete_bankbook",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0003_loaninline_loan",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0003_loaninline_loan",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0002_loan_loaninline_delete_bankbook'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='loaninline',\n            name='Loan',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='loan.loan'),\n            preserve_default=False,",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0003_loaninline_loan",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0004_remove_loaninline_registered_at_and_more",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0004_remove_loaninline_registered_at_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0003_loaninline_loan'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='loaninline',\n            name='Registered_at',\n        ),\n        migrations.RemoveField(",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0004_remove_loaninline_registered_at_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0005_alter_loan_date_alter_loaninline_date",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0005_alter_loan_date_alter_loaninline_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0004_remove_loaninline_registered_at_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='loan',\n            name='Date',\n            field=models.DateField(),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0005_alter_loan_date_alter_loaninline_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0006_remove_loaninline_balance_loan_balance",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0006_remove_loaninline_balance_loan_balance",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0005_alter_loan_date_alter_loaninline_date'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='loaninline',\n            name='Balance',\n        ),\n        migrations.AddField(",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0006_remove_loaninline_balance_loan_balance",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0007_remove_loaninline_withdrawal",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0007_remove_loaninline_withdrawal",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0006_remove_loaninline_balance_loan_balance'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='loaninline',\n            name='Withdrawal',\n        ),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0007_remove_loaninline_withdrawal",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0008_loan_loan_alter_loan_balance_and_more",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0008_loan_loan_alter_loan_balance_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0007_remove_loaninline_withdrawal'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='loan',\n            name='Loan',\n            field=models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Loan/ብድር'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0008_loan_loan_alter_loan_balance_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.migrations.0009_loaninline_registered_at_loaninline_registered_by_and_more",
        "description": "uploads.2024.04.30.officesolution.loan.migrations.0009_loaninline_registered_at_loaninline_registered_by_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('loan', '0008_loan_loan_alter_loan_balance_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='loaninline',\n            name='Registered_at',\n            field=models.DateTimeField(auto_now=True, verbose_name='Registered at'),",
        "detail": "uploads.2024.04.30.officesolution.loan.migrations.0009_loaninline_registered_at_loaninline_registered_by_and_more",
        "documentation": {}
    },
    {
        "label": "LoanInline",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "class LoanInline(admin.TabularInline):\n    model = LoanInline\n    extra = 0\n    list_filter = ['Date']\n    readonly_fields=('id','Registered_at','Updated_by','Registered_by')\nclass LoanAdmin(ImportExportModelAdmin):\n\tpass     \n\tinlines = [LoanInline]\n\tfields = [('id'), ('Date'), ('Name', 'Loan'), ('Balance'), ('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "LoanAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "class LoanAdmin(ImportExportModelAdmin):\n\tpass     \n\tinlines = [LoanInline]\n\tfields = [('id'), ('Date'), ('Name', 'Loan'), ('Balance'), ('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Name', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tinlines",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tinlines = [LoanInline]\n\tfields = [('id'), ('Date'), ('Name', 'Loan'), ('Balance'), ('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Name', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tfields = [('id'), ('Date'), ('Name', 'Loan'), ('Balance'), ('Registered_at','Updated_by','Registered_by')]\n\tlist_display = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Name', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tlist_display = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\tsearch_fields = ['id', 'Date', 'Name', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tsearch_fields = ['id', 'Date', 'Name', 'Registered_at', 'Updated_by', 'Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tlist_filter = ['Date']\n\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tlist_display_links = ['id', 'Date', 'Name', 'Loan', 'Balance', 'Registered_at', 'Updated_by', 'Registered_by']\n\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\treadonly_fields = ('id','Balance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)\n\tdef after_saving_model_and_related_inlines(self, obj):",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)\n\tdef after_saving_model_and_related_inlines(self, obj):\n\t    if obj.pk:",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\tlist_select_related = True\n\tdef response_add(self, request, new_object):\n\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)\n\tdef after_saving_model_and_related_inlines(self, obj):\n\t    if obj.pk:\n\t        loan_lines = obj.loaninline_set.all()  # Retrieve related LoanInline instances",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\t\tobj = self.after_saving_model_and_related_inlines(new_object)\n\t\treturn super(LoanAdmin, self).response_add(request, obj)\n\tdef response_change(self, request, obj):\n\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)\n\tdef after_saving_model_and_related_inlines(self, obj):\n\t    if obj.pk:\n\t        loan_lines = obj.loaninline_set.all()  # Retrieve related LoanInline instances\n\t        total_deposits = loan_lines.aggregate(total_deposits=Sum('Deposite'))['total_deposits'] or 0\n\t        obj.Balance = obj.Loan - total_deposits",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\t\tobj",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\t\tobj = self.after_saving_model_and_related_inlines(obj)\n\t\treturn super(LoanAdmin, self).response_change(request, obj)\n\tdef after_saving_model_and_related_inlines(self, obj):\n\t    if obj.pk:\n\t        loan_lines = obj.loaninline_set.all()  # Retrieve related LoanInline instances\n\t        total_deposits = loan_lines.aggregate(total_deposits=Sum('Deposite'))['total_deposits'] or 0\n\t        obj.Balance = obj.Loan - total_deposits\n\t        obj.save()  # Save the updated object\n\t    return obj\n    \t# invoice_lines = NewInternalOrder.objects.filter(Total_price=obj.pk)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\t\tmodel = Loan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(Loan, LoanAdmin)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(Loan, LoanAdmin)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.loan.admin",
        "description": "uploads.2024.04.30.officesolution.loan.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(Loan, LoanAdmin)",
        "detail": "uploads.2024.04.30.officesolution.loan.admin",
        "documentation": {}
    },
    {
        "label": "LoanConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.apps",
        "description": "uploads.2024.04.30.officesolution.loan.apps",
        "peekOfCode": "class LoanConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'loan'",
        "detail": "uploads.2024.04.30.officesolution.loan.apps",
        "documentation": {}
    },
    {
        "label": "Loan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.models",
        "description": "uploads.2024.04.30.officesolution.loan.models",
        "peekOfCode": "class Loan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Name = models.ForeignKey(StaffProfile, on_delete=models.CASCADE)\n    Date = models.DateField()\n    Loan = models.DecimalField('Loan/ብድር', max_digits = 9, decimal_places = 2, blank=True, null=True)\n    Balance = models.DecimalField(max_digits = 9, decimal_places = 2, blank=True, null=True)\n    Registered_at = models.DateTimeField(auto_now=True, verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by19\")\n    Registered_by = CurrentUserField(related_name=\"pl_by19\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.loan.models",
        "documentation": {}
    },
    {
        "label": "LoanInline",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.loan.models",
        "description": "uploads.2024.04.30.officesolution.loan.models",
        "peekOfCode": "class LoanInline(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Loan = models.ForeignKey(Loan, on_delete=models.CASCADE)\n    Date = models.DateField()\n    Deposite = models.DecimalField(max_digits = 9, decimal_places = 2, blank=True, null=True)\n    Registered_at = models.DateTimeField(auto_now=True, verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"upd_by\")\n    Registered_by = CurrentUserField(related_name=\"re_by\")\n    def __str__(self):\n        return \"%s\" % (self.id)",
        "detail": "uploads.2024.04.30.officesolution.loan.models",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.asgi",
        "description": "uploads.2024.04.30.officesolution.officesolution.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "uploads.2024.04.30.officesolution.officesolution.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve(strict=True).parent.parent\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = \"/media/\"\n# STATICFILES_DIR = [\n#     BASE_DIR / \"static\",\n#     'Lib/site-packages/django/contrib/admin/static',\n#     ]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = \"/media/\"\n# STATICFILES_DIR = [\n#     BASE_DIR / \"static\",\n#     'Lib/site-packages/django/contrib/admin/static',\n#     ]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 't=!ryv5c^icj%)yip@7z2^h7p=-(s0#(%2a%__o+ynk+f@70xp'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\n# STATICFILES_DIR = [\n#     BASE_DIR / \"static\",\n#     'Lib/site-packages/django/contrib/admin/static',\n#     ]\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 't=!ryv5c^icj%)yip@7z2^h7p=-(s0#(%2a%__o+ynk+f@70xp'\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "SECRET_KEY = 't=!ryv5c^icj%)yip@7z2^h7p=-(s0#(%2a%__o+ynk+f@70xp'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['10.139.41.195', 'localhost', '10.139.41.58']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['10.139.41.195', 'localhost', '10.139.41.58']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['10.139.41.195', 'localhost', '10.139.41.58']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'import_export',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'import_export',\n    'processolutions',\n    'bank',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django_currentuser.middleware.ThreadLocalUserMiddleware',\n]",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "ROOT_URLCONF = 'officesolution.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "WSGI_APPLICATION = 'officesolution.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.settings",
        "description": "uploads.2024.04.30.officesolution.officesolution.settings",
        "peekOfCode": "STATIC_ROOT = 'D:/src/officesolution/static'",
        "detail": "uploads.2024.04.30.officesolution.officesolution.settings",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.urls",
        "description": "uploads.2024.04.30.officesolution.officesolution.urls",
        "peekOfCode": "admin.site.site_header = \"Chuahit Water Supply & Sewerage Service Management\"\nadmin.site.site_title = \"Chuahit Water Supply & Sewerage Service Management\"\nadmin.site.index_title = \"Chuahit Water Supply & Sewerage Service Management Portal\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # urlpatterns += staticfiles_urlpatterns()\n]",
        "detail": "uploads.2024.04.30.officesolution.officesolution.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.urls",
        "description": "uploads.2024.04.30.officesolution.officesolution.urls",
        "peekOfCode": "admin.site.site_title = \"Chuahit Water Supply & Sewerage Service Management\"\nadmin.site.index_title = \"Chuahit Water Supply & Sewerage Service Management Portal\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # urlpatterns += staticfiles_urlpatterns()\n]",
        "detail": "uploads.2024.04.30.officesolution.officesolution.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.urls",
        "description": "uploads.2024.04.30.officesolution.officesolution.urls",
        "peekOfCode": "admin.site.index_title = \"Chuahit Water Supply & Sewerage Service Management Portal\"\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    # urlpatterns += staticfiles_urlpatterns()\n]",
        "detail": "uploads.2024.04.30.officesolution.officesolution.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.urls",
        "description": "uploads.2024.04.30.officesolution.officesolution.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    # urlpatterns += staticfiles_urlpatterns()\n]",
        "detail": "uploads.2024.04.30.officesolution.officesolution.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.officesolution.wsgi",
        "description": "uploads.2024.04.30.officesolution.officesolution.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "uploads.2024.04.30.officesolution.officesolution.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='WaterSupplyPlan',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0002_auto_20200828_0501",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0002_auto_20200828_0501",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='potablewaterrequest',\n            name='Service_type',\n            field=models.CharField(choices=[('Residence', 'Residence'), ('Trade_organization', 'Trade organization'), ('Public_government', 'Public government')], max_length=150),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0002_auto_20200828_0501",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0003_auto_20200828_0503",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0003_auto_20200828_0503",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0002_auto_20200828_0501'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='detailcostrequest',\n            name='For_consultation',\n            field=models.PositiveIntegerField(blank=True, default=1),\n            preserve_default=False,",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0003_auto_20200828_0503",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0004_auto_20200828_0506",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0004_auto_20200828_0506",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0003_auto_20200828_0503'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='detailcostrequest',\n            name='Cashier',\n            field=models.TextField(blank=True, default='በገቢ ደረሰኝ ቁጥር       ብር ስለከፈለ ቀሪው ስራ ታይቶ የሰራለት፡፡'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0004_auto_20200828_0506",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0005_auto_20200828_0601",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0005_auto_20200828_0601",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0004_auto_20200828_0506'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='detailcostrequest',\n            name='Adapter_Quantity',\n            field=models.PositiveIntegerField(blank=True, default=0),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0005_auto_20200828_0601",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0006_auto_20200828_0608",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0006_auto_20200828_0608",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0005_auto_20200828_0601'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Check_no',\n            field=models.PositiveIntegerField(default=0),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0006_auto_20200828_0608",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0007_auto_20200828_0626",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0007_auto_20200828_0626",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0006_auto_20200828_0608'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='financecostplan',\n            name='Month',\n        ),\n        migrations.RemoveField(",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0007_auto_20200828_0626",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0008_watersupplyperformed_dates",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0008_watersupplyperformed_dates",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0007_auto_20200828_0626'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='watersupplyperformed',\n            name='Dates',\n            field=models.CharField(default=1, max_length=100),\n            preserve_default=False,",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0008_watersupplyperformed_dates",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0009_auto_20200828_1057",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0009_auto_20200828_1057",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0008_watersupplyperformed_dates'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Report_Balance_Date',\n            fields=[\n                ('Id', models.AutoField(primary_key=True, serialize=False)),\n                ('Date', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0009_auto_20200828_1057",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0010_auto_20200828_1329",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0010_auto_20200828_1329",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0009_auto_20200828_1057'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Dates',\n            field=models.DateField(verbose_name='Date'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0010_auto_20200828_1329",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0011_auto_20200828_1334",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0011_auto_20200828_1334",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0010_auto_20200828_1329'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReportBalanceDate',\n            fields=[\n                ('Id', models.AutoField(primary_key=True, serialize=False)),\n                ('Date', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0011_auto_20200828_1334",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0012_auto_20200828_1336",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0012_auto_20200828_1336",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0011_auto_20200828_1334'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Report_Balance_Date',\n            fields=[\n                ('Id', models.AutoField(primary_key=True, serialize=False)),\n                ('Date', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0012_auto_20200828_1336",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0013_revenue",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0013_revenue",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0012_auto_20200828_1336'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Revenue',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0013_revenue",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0014_auto_20200828_1350",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0014_auto_20200828_1350",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0013_revenue'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='revenue',\n            name='Amount',\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0014_auto_20200828_1350",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0015_auto_20200828_1352",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0015_auto_20200828_1352",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0014_auto_20200828_1350'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Expense',\n            new_name='ExpenseType',\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0015_auto_20200828_1352",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0016_auto_20200828_1357",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0016_auto_20200828_1357",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0015_auto_20200828_1352'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='expensetype',\n            options={'verbose_name': 'Expense type management', 'verbose_name_plural': 'Expense type management'},\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0016_auto_20200828_1357",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0017_auto_20200828_1408",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0017_auto_20200828_1408",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0016_auto_20200828_1357'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Receipt_no',\n            field=models.PositiveIntegerField(default=0, max_length=250),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0017_auto_20200828_1408",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0018_auto_20200828_1410",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0018_auto_20200828_1410",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0017_auto_20200828_1408'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Receipt_no',\n            field=models.CharField(default=0, max_length=250),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0018_auto_20200828_1410",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0019_auto_20200828_1411",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0019_auto_20200828_1411",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0018_auto_20200828_1410'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Dates',\n            field=models.CharField(default=0, max_length=250),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0019_auto_20200828_1411",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0020_auto_20200828_1413",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0020_auto_20200828_1413",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0019_auto_20200828_1411'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='generalleisure',\n            name='Dates',\n            field=models.DateField(verbose_name='Date'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0020_auto_20200828_1413",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0021_delete_expense",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0021_delete_expense",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0020_auto_20200828_1413'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Expense',\n        ),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0021_delete_expense",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0022_auto_20200828_1418",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0022_auto_20200828_1418",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0021_delete_expense'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='revenue',\n            name='Code',\n        ),\n        migrations.RemoveField(",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0022_auto_20200828_1418",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0023_expense_expensetype_revenue_revenuetype",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0023_expense_expensetype_revenue_revenuetype",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0022_auto_20200828_1418'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='RevenueType',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0023_expense_expensetype_revenue_revenuetype",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0024_auto_20200828_1429",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0024_auto_20200828_1429",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0023_expense_expensetype_revenue_revenuetype'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='revenue',\n            name='Code',\n        ),\n        migrations.RemoveField(",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0024_auto_20200828_1429",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0025_expense_revenue",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0025_expense_revenue",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0024_auto_20200828_1429'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Revenue',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0025_expense_revenue",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0026_delete_revenue",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0026_delete_revenue",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0025_expense_revenue'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Revenue',\n        ),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0026_delete_revenue",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0027_auto_20200828_1431",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0027_auto_20200828_1431",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0026_delete_revenue'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Expense',\n            new_name='ExpensesManagement',\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0027_auto_20200828_1431",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0028_auto_20200828_1435",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0028_auto_20200828_1435",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0027_auto_20200828_1431'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='ExpensesManagement',\n            new_name='AllExpenses',\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0028_auto_20200828_1435",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0029_auto_20200828_1435",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0029_auto_20200828_1435",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0028_auto_20200828_1435'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='allrevenue',\n            name='Code',\n        ),\n        migrations.RemoveField(",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0029_auto_20200828_1435",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0030_allexpenses_allrevenue",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0030_allexpenses_allrevenue",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0029_auto_20200828_1435'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AllRevenue',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0030_allexpenses_allrevenue",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0031_auto_20200828_1437",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0031_auto_20200828_1437",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('processolutions', '0030_allexpenses_allrevenue'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='AllExpenses',\n            new_name='AllExpense',\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0031_auto_20200828_1437",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0032_auto_20200831_2355",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0032_auto_20200831_2355",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0031_auto_20200828_1437'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExpenseReport',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),\n                ('Dates', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0032_auto_20200831_2355",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0033_auto_20200901_0054",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0033_auto_20200901_0054",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0032_auto_20200831_2355'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='maintenancerequest',\n            name='Water_meter_Single_price',\n            field=models.PositiveIntegerField(blank=True, default=0),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0033_auto_20200901_0054",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0034_maintenancerequest_total_55",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0034_maintenancerequest_total_55",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0033_auto_20200901_0054'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='maintenancerequest',\n            name='Total_55',\n            field=models.FloatField(blank=True, default=0),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0034_maintenancerequest_total_55",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0035_auto_20200901_0100",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0035_auto_20200901_0100",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0034_maintenancerequest_total_55'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='maintenancerequest',\n            name='Cashier',\n            field=models.TextField(blank=True, default='በገቢ ደረሰኝ ቁጥር       ብር ስለከፈለ ቀሪው ስራ ታይቶ የሰራለት፡፡'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0035_auto_20200901_0100",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0036_auto_20200901_0916",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0036_auto_20200901_0916",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0035_auto_20200901_0100'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='allexpense',\n            name='Balance',\n            field=models.DecimalField(decimal_places=2, default=0, max_digits=250),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0036_auto_20200901_0916",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0037_expensereportdate_revenuereportdate",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0037_expensereportdate_revenuereportdate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0036_auto_20200901_0916'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ExpenseReportDate',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),\n                ('Dates', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0037_expensereportdate_revenuereportdate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0038_auto_20200901_0942",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0038_auto_20200901_0942",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0037_expensereportdate_revenuereportdate'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='GeneralReportBalanceDate',\n            fields=[\n                ('Id', models.AutoField(primary_key=True, serialize=False)),\n                ('Date', models.DateField(verbose_name='Date')),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0038_auto_20200901_0942",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0039_auto_20210608_0407",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0039_auto_20210608_0407",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0038_auto_20200901_0942'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='detailcostrequest',\n            name='Cashier',\n            field=models.TextField(blank=True, default='በገቢ ደረሰኝ ቁጥር       ብር ስለከፈለ ቀሪው ስራ ታይቶ ይሰራለት፡፡'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0039_auto_20210608_0407",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0040_alter_detailcostrequest_options_and_more",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0040_alter_detailcostrequest_options_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0039_auto_20210608_0407'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='detailcostrequest',\n            options={'verbose_name_plural': 'የ55% አገልግሎት ክፍያ ጥያቄ'},\n        ),\n        migrations.AlterModelOptions(",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0040_alter_detailcostrequest_options_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0041_delete_stockmanagement",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0041_delete_stockmanagement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0040_alter_detailcostrequest_options_and_more'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='StockManagement',\n        ),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0041_delete_stockmanagement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.migrations.0042_delete_staffprofile",
        "description": "uploads.2024.04.30.officesolution.processolutions.migrations.0042_delete_staffprofile",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('processolutions', '0041_delete_stockmanagement'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='StaffProfile',\n        ),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.migrations.0042_delete_staffprofile",
        "documentation": {}
    },
    {
        "label": "WSPlanAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class WSPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = ['Dates',('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "FIPlanAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class FIPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "FEPlanAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class FEPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "HRPlanAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class HRPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PACIPAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PACIPAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "MRAdmin1",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class MRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer','Water_meter_change'),('Examine_or_clean_up','Water_meter_openning','Get_valve_change'),('For_waste','Service_type','For_Digging')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "MRAdmin2",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class MRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "MRAdmin3",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class MRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "MRAdmin4",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class MRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "NCRAdmin1",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class NCRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "NCRAdmin2",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class NCRAdmin2(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "NCRAdmin3",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class NCRAdmin3(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "NCRAdmin4",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class NCRAdmin4(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PWRAdmin1",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PWRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PWRAdmin2",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PWRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PWRAdmin3",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PWRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PWRAdmin4",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PWRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "WaterSupplyPerformedAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class WaterSupplyPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "PlanningAndCustomerIssuePerformedAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class PlanningAndCustomerIssuePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "FinanceIncomePerformedAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class FinanceIncomePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "FinanceCostPerformedAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class FinanceCostPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "HumanResourcePerformedAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class HumanResourcePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class DetailCostRequestAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestAdmin1",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class DetailCostRequestAdmin1(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestAdmin2",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class DetailCostRequestAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestAdmin3",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class DetailCostRequestAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ComplainManagementAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class ComplainManagementAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Category','Sub_category','Complain_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Nature_of_complaint','Complain_details','Complain_related')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "GeneralLeisureAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class GeneralLeisureAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Tasks','Dates'),('General','Check_no','Check_payable','Receipt_no')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Deposit','Withdraw','Balance')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "GeneralReportTotalBalanceAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class GeneralReportTotalBalanceAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Date'),('Total_deposite'),('Total_withdrawal')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Total_balance')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "GeneralReportBalanceDateAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class GeneralReportBalanceDateAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Id'),('Date'),('Total_deposite'),('Total_withdrawal')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Total_balance')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "RevenueTypeAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class RevenueTypeAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Dates','Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Revenue_title_amharic','Revenue_title_english')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ExpenseTypeAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class ExpenseTypeAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Dates','Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Expense_title_amharic','Expense_title_english')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "RevenueAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class RevenueAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Dates','Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': ['Amount','Balance'],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ExpenseAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class ExpenseAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Dates','Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': ['Amount','Balance'],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ExpenseReportAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class ExpenseReportAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Code_id'),('Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Balances')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ExpenseReportDateAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class ExpenseReportDateAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Code_id'),('Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Balances')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "RevenueReportAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class RevenueReportAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Code_id'),('Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Balances')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "RevenueReportDateAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "class RevenueReportDateAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Code_id'),('Code')],\n        }), \n\t\t('Detail information', {\n\t\t\t'fields': [('Balances')],\n\t\t}),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfields = ['Dates',('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPlan, WSPlanAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPlan, WSPlanAdmin) \nclass FIPlanAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = WaterSupplyPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPlan, WSPlanAdmin) \nclass FIPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPlan, WSPlanAdmin) \nclass FIPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Planned_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPlan, WSPlanAdmin) \nclass FIPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePlan, FIPlanAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePlan, FIPlanAdmin) \nclass FEPlanAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = FinanceIncomePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePlan, FIPlanAdmin) \nclass FEPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePlan, FIPlanAdmin) \nclass FEPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Planned_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePlan, FIPlanAdmin) \nclass FEPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPlan, FEPlanAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPlan, FEPlanAdmin) \nclass HRPlanAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = FinanceCostPlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPlan, FEPlanAdmin) \nclass HRPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPlan, FEPlanAdmin) \nclass HRPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Planned_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPlan, FEPlanAdmin) \nclass HRPlanAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePlan, HRPlanAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePlan, HRPlanAdmin) \nclass PACIPAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = HumanResourcePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePlan, HRPlanAdmin) \nclass PACIPAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePlan, HRPlanAdmin) \nclass PACIPAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Planned_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePlan, HRPlanAdmin) \nclass PACIPAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfields = [('Tasks','Measurement'),('First_Quarter_Plan','Second_Quarter_Plan'),('Third_Quarter_Plan','Forth_Quarter_Plan'),('Dates')]\n\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Dates','Tasks','Measurement','Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Dates','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan']\n\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Dates','Tasks','Measurement','First_Quarter_Plan','Second_Quarter_Plan','Third_Quarter_Plan','Forth_Quarter_Plan','Total_budget','Planned_at','Updated_by','Planned_by']\n\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_budget','Planned_at','Updated_by','Planned_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePlan, PACIPAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePlan, PACIPAdmin) \nclass MRAdmin1(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PlanningAndCustomerIssuePlan\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePlan, PACIPAdmin) \nclass MRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePlan, PACIPAdmin) \nclass MRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer','Water_meter_change'),('Examine_or_clean_up','Water_meter_openning','Get_valve_change'),('For_waste','Service_type','For_Digging')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Planned_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Planned_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePlan, PACIPAdmin) \nclass MRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer','Water_meter_change'),('Examine_or_clean_up','Water_meter_openning','Get_valve_change'),('For_waste','Service_type','For_Digging')],\n        }),\n\t\t('Materials information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer','Water_meter_change'),('Examine_or_clean_up','Water_meter_openning','Get_valve_change'),('For_waste','Service_type','For_Digging')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequest, MRAdmin1)  ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequest, MRAdmin1)  \nclass MRAdmin2(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = MaintenanceRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequest, MRAdmin1)  \nclass MRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequest, MRAdmin1)  \nclass MRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequest, MRAdmin1)  \nclass MRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestPotableWater, MRAdmin2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestPotableWater, MRAdmin2)\nclass MRAdmin3(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = MaintenanceRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestPotableWater, MRAdmin2)\nclass MRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestPotableWater, MRAdmin2)\nclass MRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestPotableWater, MRAdmin2)\nclass MRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestIncomeOfficer, MRAdmin3)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestIncomeOfficer, MRAdmin3)\nclass MRAdmin4(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = MaintenanceRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestIncomeOfficer, MRAdmin3)\nclass MRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestIncomeOfficer, MRAdmin3)\nclass MRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestIncomeOfficer, MRAdmin3)\nclass MRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Simple_maintenance','Water_meter_transfer'),('Water_meter_change','Examine_or_clean_up'),('Water_meter_openning','Get_valve_change'),('For_waste','Service_type')],\n        }),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Grand_total','Address','Kebele','House_number','Phone_number','Place','Service_type','Simple_maintenance','For_waste','Water_supply','Income_office','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestCashier, MRAdmin4)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestCashier, MRAdmin4)\nclass NCRAdmin1(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = MaintenanceRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestCashier, MRAdmin4)\nclass NCRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestCashier, MRAdmin4)\nclass NCRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(MaintenanceRequestCashier, MRAdmin4)\nclass NCRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequest, NCRAdmin1)  ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequest, NCRAdmin1)  \nclass NCRAdmin2(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = NameChangeRequest\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequest, NCRAdmin1)  \nclass NCRAdmin2(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequest, NCRAdmin1)  \nclass NCRAdmin2(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequest, NCRAdmin1)  \nclass NCRAdmin2(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestIncomeOfficer, NCRAdmin2) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestIncomeOfficer, NCRAdmin2) \nclass NCRAdmin3(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = NameChangeRequestIncomeOfficer\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestIncomeOfficer, NCRAdmin2) \nclass NCRAdmin3(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestIncomeOfficer, NCRAdmin2) \nclass NCRAdmin3(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestIncomeOfficer, NCRAdmin2) \nclass NCRAdmin3(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Bill_processor','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestCashier, NCRAdmin3)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestCashier, NCRAdmin3)\nclass NCRAdmin4(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = NameChangeRequestCashier\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestCashier, NCRAdmin3)\nclass NCRAdmin4(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestCashier, NCRAdmin3)\nclass NCRAdmin4(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestCashier, NCRAdmin3)\nclass NCRAdmin4(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Income_office','Amount','Cashier','Bill_processor'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Bill_processor','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Address','Kebele','House_number','Phone_number','Place','Service_type','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestBillProcessor, NCRAdmin4)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestBillProcessor, NCRAdmin4)\nclass PWRAdmin1(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = NameChangeRequestBillProcessor\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestBillProcessor, NCRAdmin4)\nclass PWRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestBillProcessor, NCRAdmin4)\nclass PWRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(NameChangeRequestBillProcessor, NCRAdmin4)\nclass PWRAdmin1(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequest, PWRAdmin1)  ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequest, PWRAdmin1)  \nclass PWRAdmin2(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PotableWaterRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequest, PWRAdmin1)  \nclass PWRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequest, PWRAdmin1)  \nclass PWRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequest, PWRAdmin1)  \nclass PWRAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestPotableWater, PWRAdmin2) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestPotableWater, PWRAdmin2) \nclass PWRAdmin3(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PotableWaterRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestPotableWater, PWRAdmin2) \nclass PWRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestPotableWater, PWRAdmin2) \nclass PWRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestPotableWater, PWRAdmin2) \nclass PWRAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestIncomeOfficer, PWRAdmin3) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestIncomeOfficer, PWRAdmin3) \nclass PWRAdmin4(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PotableWaterRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestIncomeOfficer, PWRAdmin3) \nclass PWRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestIncomeOfficer, PWRAdmin3) \nclass PWRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestIncomeOfficer, PWRAdmin3) \nclass PWRAdmin4(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Address'),('Kebele','House_number'),('Phone_number','Place'),('Service_type','Line_joined')],\n        }),\n        ('Approval Requests', {\n            'fields': ['Water_supply','Income_office','Amount','Cashier'],\n        }),\n    ]\n\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Kebele','Place']\n\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Full_name','Address','Kebele','House_number','Phone_number','Place','Service_type','Line_joined','Water_supply','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestCashier, PWRAdmin4) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestCashier, PWRAdmin4) \nclass WaterSupplyPerformedAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PotableWaterRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestCashier, PWRAdmin4) \nclass WaterSupplyPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestCashier, PWRAdmin4) \nclass WaterSupplyPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PotableWaterRequestCashier, PWRAdmin4) \nclass WaterSupplyPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]\n\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPerformed, WaterSupplyPerformedAdmin)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPerformed, WaterSupplyPerformedAdmin)\nclass PlanningAndCustomerIssuePerformedAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = WaterSupplyPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPerformed, WaterSupplyPerformedAdmin)\nclass PlanningAndCustomerIssuePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPerformed, WaterSupplyPerformedAdmin)\nclass PlanningAndCustomerIssuePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(WaterSupplyPerformed, WaterSupplyPerformedAdmin)\nclass PlanningAndCustomerIssuePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]\n\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePerformed, PlanningAndCustomerIssuePerformedAdmin)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePerformed, PlanningAndCustomerIssuePerformedAdmin)\nclass FinanceIncomePerformedAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = PlanningAndCustomerIssuePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePerformed, PlanningAndCustomerIssuePerformedAdmin)\nclass FinanceIncomePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePerformed, PlanningAndCustomerIssuePerformedAdmin)\nclass FinanceIncomePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(PlanningAndCustomerIssuePerformed, PlanningAndCustomerIssuePerformedAdmin)\nclass FinanceIncomePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]\n\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePerformed, FinanceIncomePerformedAdmin)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePerformed, FinanceIncomePerformedAdmin)\nclass FinanceCostPerformedAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = FinanceIncomePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePerformed, FinanceIncomePerformedAdmin)\nclass FinanceCostPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePerformed, FinanceIncomePerformedAdmin)\nclass FinanceCostPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceIncomePerformed, FinanceIncomePerformedAdmin)\nclass FinanceCostPerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]\n\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPerformed, FinanceCostPerformedAdmin) ",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPerformed, FinanceCostPerformedAdmin) \nclass HumanResourcePerformedAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = FinanceCostPerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPerformed, FinanceCostPerformedAdmin) \nclass HumanResourcePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPerformed, FinanceCostPerformedAdmin) \nclass HumanResourcePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(FinanceCostPerformed, FinanceCostPerformedAdmin) \nclass HumanResourcePerformedAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General information', {\n            'fields': ['Dates','Planned_tasks',('First_Quarter_performed','Second_Quarter_performed'),('Forth_Quarter_performed','Third_Quarter_performed')],\n        }),\n\t\t\t('Detail information', {\n            'fields': [('First_Quarter_performance','Second_Quarter_performance'),('Third_Quarter_performance','Forth_Quarter_performance'),'Total_year_performance'],\n        }),\n    ]\n\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Total_year_performance','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance']\n\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Planned_tasks','First_Quarter_performed','Second_Quarter_performed','Third_Quarter_performed','Forth_Quarter_performed','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','First_Quarter_performance','Second_Quarter_performance','Third_Quarter_performance','Forth_Quarter_performance','Total_year_performance','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePerformed, HumanResourcePerformedAdmin)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePerformed, HumanResourcePerformedAdmin)\nclass DetailCostRequestAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = HumanResourcePerformed\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePerformed, HumanResourcePerformedAdmin)\nclass DetailCostRequestAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePerformed, HumanResourcePerformedAdmin)\nclass DetailCostRequestAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(HumanResourcePerformed, HumanResourcePerformedAdmin)\nclass DetailCostRequestAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Grand_total','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequest, DetailCostRequestAdmin)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequest, DetailCostRequestAdmin)\nclass DetailCostRequestAdmin1(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = DetailCostRequest\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequest, DetailCostRequestAdmin)\nclass DetailCostRequestAdmin1(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequest, DetailCostRequestAdmin)\nclass DetailCostRequestAdmin1(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Requested_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequest, DetailCostRequestAdmin)\nclass DetailCostRequestAdmin1(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestPotableWater, DetailCostRequestAdmin1)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestPotableWater, DetailCostRequestAdmin1)\nclass DetailCostRequestAdmin2(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = DetailCostRequestPotableWater\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestPotableWater, DetailCostRequestAdmin1)\nclass DetailCostRequestAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestPotableWater, DetailCostRequestAdmin1)\nclass DetailCostRequestAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Requested_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestPotableWater, DetailCostRequestAdmin1)\nclass DetailCostRequestAdmin2(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Amount','Cashier','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestIncomeOfficer, DetailCostRequestAdmin2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestIncomeOfficer, DetailCostRequestAdmin2)\nclass DetailCostRequestAdmin3(admin.ModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = DetailCostRequestIncomeOfficer\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestIncomeOfficer, DetailCostRequestAdmin2)\nclass DetailCostRequestAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestIncomeOfficer, DetailCostRequestAdmin2)\nclass DetailCostRequestAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Requested_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestIncomeOfficer, DetailCostRequestAdmin2)\nclass DetailCostRequestAdmin3(admin.ModelAdmin):\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Full_name','Kebele'),('House_number','Customer_neighbor'),('Service_type')],\n        }),\n\t\t('Detail information', {\n\t\t\t'fields': [('Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','For_consultation','For_information')],\n\t\t}),\n\t\t('Materials information', {\n\t\t\t'fields': [('Pipe_Quantity','Pipe_Single_price','Pipe_inch'),('HDP_tube_Quantity','HDP_Single_price','HDP_tube_inch'),('Elbow_Quantity','Elbow_Single_price','Elbow_inch'),('Naples_Quantity','Naples_Single_price','Naples_inch'),('Reducer_Quantity','Reducer_Single_price','Reducer_inch'),('Adapter_Quantity','Adapter_Single_price','Adapter_inch'),('Union_metal_Quantity','Union_metal_Single_price','Union_metal_inch'),('Union_HDP_Quantity','Union_HDP_Single_price','Union_HDP_inch'),('Get_valve_Quantity','Get_valve_Single_price','Get_valve_inch'),('Foss_set_Quantity','Foss_set_Single_price','Foss_set_inch'),('T_metal_Quantity','T_metal_Single_price','T_metal_inch'),('T_HDP_Quantity','T_HDP_Single_price','T_HDP_inch'),('Tape_Quantity','Tape_Single_price','Tape_inch'),('Water_meter_Quantity','Water_meter_Single_price','Water_meter_inch'),('Socket_Quantity','Socket_Single_price','Socket_inch'),'Grand_total'],\n\t\t}),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tsearch_fields = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_filter = ['Service_type']\n\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_display_links = ['id','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Cashier','Requested_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\treadonly_fields = ('id','Grand_total','Full_name','Kebele','House_number','Service_type','Customer_neighbor','Total_55','Deposite','For_Digging','For_Rope','For_Agreement','For_Forms','Total_Form','Grand_total','Potable_water','Income_office','Amount','Requested_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestCashier, DetailCostRequestAdmin3)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestCashier, DetailCostRequestAdmin3)\nclass ComplainManagementAdmin(ImportExportModelAdmin):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\tmodel = DetailCostRequestCashier\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestCashier, DetailCostRequestAdmin3)\nclass ComplainManagementAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Update_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Update_by = request.user\n\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestCashier, DetailCostRequestAdmin3)\nclass ComplainManagementAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Category','Sub_category','Complain_type')],\n        }),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Requested_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.admin",
        "description": "uploads.2024.04.30.officesolution.processolutions.admin",
        "peekOfCode": "\t\t\tobj.Requested_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(DetailCostRequestCashier, DetailCostRequestAdmin3)\nclass ComplainManagementAdmin(ImportExportModelAdmin):\n    pass\n    fieldsets = [\n        ('General informations', {\n            'fields': [('Category','Sub_category','Complain_type')],\n        }),\n\t\t('Detail information', {",
        "detail": "uploads.2024.04.30.officesolution.processolutions.admin",
        "documentation": {}
    },
    {
        "label": "ProcessolutionsConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.apps",
        "description": "uploads.2024.04.30.officesolution.processolutions.apps",
        "peekOfCode": "class ProcessolutionsConfig(AppConfig):\n    name = 'processolutions'",
        "detail": "uploads.2024.04.30.officesolution.processolutions.apps",
        "documentation": {}
    },
    {
        "label": "WaterSupplyPlan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class WaterSupplyPlan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    Tasks = models.CharField(max_length = 150)\n    Measurement = models.CharField(max_length=150)\n    First_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Second_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Third_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Forth_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Total_budget = models.DecimalField(max_digits=30, decimal_places=2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "FinanceIncomePlan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class FinanceIncomePlan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    # Year = models.DateField()\n    Tasks = models.CharField(max_length = 150)\n    Measurement = models.CharField(max_length=150)\n    # Month = models.DateField()\n    First_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Second_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Third_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "FinanceCostPlan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class FinanceCostPlan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    # Year = models.DateField()\n    Tasks = models.CharField(max_length = 150)\n    Measurement = models.CharField(max_length=150)\n    # Month = models.DateField()\n    First_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Second_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Third_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "HumanResourcePlan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class HumanResourcePlan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    # Year = models.DateField()\n    Tasks = models.CharField(max_length = 150)\n    Measurement = models.CharField(max_length=150)\n    # Month = models.DateField()\n    First_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Second_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Third_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PlanningAndCustomerIssuePlan",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PlanningAndCustomerIssuePlan(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    # Year = models.DateField()\n    Tasks = models.CharField(max_length = 150)\n    Measurement = models.CharField(max_length=150)\n    # Month = models.DateField()\n    First_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Second_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)\n    Third_Quarter_Plan = models.DecimalField(max_digits=30, decimal_places=2)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PlanningAndCustomerIssuePerformed",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PlanningAndCustomerIssuePerformed(models.Model):\n    THEME_CHOICES = (\n\t\t('First', 'First Quarter'),\n\t\t('Second', 'Second Quarter'),\n\t\t('Third', 'Third Quarter'),\n\t\t('Forth', 'Forth Quarter'),\n\t)\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    Planned_tasks = models.ForeignKey(PlanningAndCustomerIssuePlan, on_delete=models.CASCADE)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "MaintenanceRequest",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class MaintenanceRequest(models.Model):\n    THEME_CHOICES = (\n\t\t('1/2', '1/2'),\n\t\t('3/4', '3/4'),\n\t\t('1', '1'),\n\t\t('1 1/2', '1 1/2'),\n        ('2', '2'),\n        ('2 1/2', '2 1/2'),\n        ('3', '3'),\n        ('3 1/2', '3 1/2'),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "MaintenanceRequestPotableWater",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class MaintenanceRequestPotableWater(MaintenanceRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለመጠጥ ዉኃ የስራ ሂደት የጥገና ጥያቄ'\nclass MaintenanceRequestIncomeOfficer(MaintenanceRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት የጥገና ጥያቄ'\nclass MaintenanceRequestCashier(MaintenanceRequest):\n    class Meta:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "MaintenanceRequestIncomeOfficer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class MaintenanceRequestIncomeOfficer(MaintenanceRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት የጥገና ጥያቄ'\nclass MaintenanceRequestCashier(MaintenanceRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የጥገና ጥያቄ'\nclass NameChangeRequest(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "MaintenanceRequestCashier",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class MaintenanceRequestCashier(MaintenanceRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የጥገና ጥያቄ'\nclass NameChangeRequest(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Full_name = models.CharField(max_length = 150)\n    Address = models.CharField(max_length = 150)\n    Kebele = models.CharField(max_length = 150)\n    Service_type = models.CharField(max_length = 150)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "NameChangeRequest",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class NameChangeRequest(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Full_name = models.CharField(max_length = 150)\n    Address = models.CharField(max_length = 150)\n    Kebele = models.CharField(max_length = 150)\n    Service_type = models.CharField(max_length = 150)\n    # Maintenance_type  = models.CharField(max_length = 150)\n    House_number = models.CharField(max_length = 150)\n    Phone_number = models.CharField(max_length = 150)\n    Place = models.CharField(max_length = 150)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "NameChangeRequestIncomeOfficer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class NameChangeRequestIncomeOfficer(NameChangeRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት የስም ለውጥ ጥያቄ'\n# Water_meter_Single_price\nclass NameChangeRequestCashier(NameChangeRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የስም ለውጥ ጥያቄ'\nclass NameChangeRequestBillProcessor(NameChangeRequest):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "NameChangeRequestCashier",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class NameChangeRequestCashier(NameChangeRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የስም ለውጥ ጥያቄ'\nclass NameChangeRequestBillProcessor(NameChangeRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለቢልና ግምት ክፍል የስራ ሂደት የስም ለውጥ ጥያቄ'\nclass PotableWaterRequest(models.Model):\n    THEME_CHOICES1 = (",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "NameChangeRequestBillProcessor",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class NameChangeRequestBillProcessor(NameChangeRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለቢልና ግምት ክፍል የስራ ሂደት የስም ለውጥ ጥያቄ'\nclass PotableWaterRequest(models.Model):\n    THEME_CHOICES1 = (\n        ('Residence', 'Residence'),\n        ('Trade_organization', 'Trade organization'),\n        ('Public_government', 'Public government'),\n\t)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PotableWaterRequest",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PotableWaterRequest(models.Model):\n    THEME_CHOICES1 = (\n        ('Residence', 'Residence'),\n        ('Trade_organization', 'Trade organization'),\n        ('Public_government', 'Public government'),\n\t)\n    id = models.AutoField(primary_key = True, unique = True)\n    Full_name = models.CharField(max_length = 150)\n    Address = models.CharField(max_length = 150)\n    Kebele = models.CharField(max_length = 150)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PotableWaterRequestPotableWater",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PotableWaterRequestPotableWater(PotableWaterRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለመጠጥ ዉኃ የስራ ሂደት የአዲስ ደንበኛ ጥያቄ'\nclass PotableWaterRequestIncomeOfficer(PotableWaterRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት  የአዲስ ደንበኛ ጥያቄ'\nclass PotableWaterRequestCashier(PotableWaterRequest):\n    class Meta:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PotableWaterRequestIncomeOfficer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PotableWaterRequestIncomeOfficer(PotableWaterRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት  የአዲስ ደንበኛ ጥያቄ'\nclass PotableWaterRequestCashier(PotableWaterRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የአዲስ ደንበኛ ጥያቄ'\nclass DetailCostRequest(models.Model):\n    THEME_CHOICES = (",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "PotableWaterRequestCashier",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class PotableWaterRequestCashier(PotableWaterRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት የአዲስ ደንበኛ ጥያቄ'\nclass DetailCostRequest(models.Model):\n    THEME_CHOICES = (\n\t\t('1/2', '1/2'),\n\t\t('3/4', '3/4'),\n\t\t('1', '1'),\n\t\t('1 1/2', '1 1/2'),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "DetailCostRequest",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class DetailCostRequest(models.Model):\n    THEME_CHOICES = (\n\t\t('1/2', '1/2'),\n\t\t('3/4', '3/4'),\n\t\t('1', '1'),\n\t\t('1 1/2', '1 1/2'),\n        ('2', '2'),\n        ('2 1/2', '2 1/2'),\n        ('3', '3'),\n        ('3 1/2', '3 1/2'),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestPotableWater",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class DetailCostRequestPotableWater(DetailCostRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለመጠጥ ዉኃ የስራ ሂደት 55% አገልግሎት ክፍያ ጥያቄ'\nclass DetailCostRequestIncomeOfficer(DetailCostRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት 55% አገልግሎት ክፍያ ጥያቄ'\nclass DetailCostRequestCashier(DetailCostRequest):\n    class Meta:",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestIncomeOfficer",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class DetailCostRequestIncomeOfficer(DetailCostRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለገቢ ግዥ ፋይናንስ የስራ ሂደት 55% አገልግሎት ክፍያ ጥያቄ'\nclass DetailCostRequestCashier(DetailCostRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት 55% አገልግሎት ክፍያ ጥያቄ'\nclass WaterSupplyPerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "DetailCostRequestCashier",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class DetailCostRequestCashier(DetailCostRequest):\n    class Meta:\n        proxy = True\n        verbose_name_plural='ለንብረትና ገንዘብ ያዥ የስራ ሂደት 55% አገልግሎት ክፍያ ጥያቄ'\nclass WaterSupplyPerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Planned_tasks = models.ForeignKey(WaterSupplyPlan, on_delete=models.CASCADE)\n    Dates = models.CharField(max_length=100)\n    First_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "WaterSupplyPerformed",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class WaterSupplyPerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Planned_tasks = models.ForeignKey(WaterSupplyPlan, on_delete=models.CASCADE)\n    Dates = models.CharField(max_length=100)\n    First_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Third_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Forth_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    First_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "FinanceIncomePerformed",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class FinanceIncomePerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    Planned_tasks = models.ForeignKey(FinanceIncomePlan, on_delete=models.CASCADE)\n    First_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Third_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Forth_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    First_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "FinanceCostPerformed",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class FinanceCostPerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    Planned_tasks = models.ForeignKey(FinanceCostPlan, on_delete=models.CASCADE)\n    First_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Third_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Forth_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    First_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "HumanResourcePerformed",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class HumanResourcePerformed(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.CharField(max_length=100)\n    Planned_tasks = models.ForeignKey(HumanResourcePlan, on_delete=models.CASCADE)\n    First_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Third_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Forth_Quarter_performed = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    First_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)\n    Second_Quarter_performance = models.DecimalField(max_digits=30, decimal_places=2, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "ComplainManagement",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class ComplainManagement(models.Model):\n    THEME_CHOICES1 = (\n\t\t('1', 'First type'),\n\t\t('2', 'Second type'),\n\t\t('3', 'Third type'),\n\t\t('4', 'Forth type'),\n\t)\n    THEME_CHOICES2 = (\n\t\t('1', 'First type'),\n\t\t('2', 'Second type'),",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "GeneralReportTotalBalance",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class GeneralReportTotalBalance(models.Model):\n    Date = models.DateField('Date')\n    Total_deposite = models.DecimalField(decimal_places=2, max_digits=250)\n    Total_withdrawal = models.DecimalField(decimal_places=2, max_digits=250)\n    Total_balance = models.DecimalField(decimal_places=2, max_digits=250)\n    class Meta:\n        managed = False\n        db_table = \"GeneralReportTotalBalance\"\nclass GeneralLeisure(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "GeneralLeisure",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class GeneralLeisure(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Tasks = models.CharField(max_length = 150)\n    General = models.PositiveIntegerField(default=0)\n    Check_no = models.PositiveIntegerField(default=0)\n    Check_payable = models.PositiveIntegerField(default=0)\n    Receipt_no = models.CharField(max_length = 250,default=0)\n    Deposit = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    Withdraw = models.DecimalField(decimal_places=2, max_digits=250, default=0)",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "GeneralReportBalanceDate",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class GeneralReportBalanceDate(models.Model):\n    Id = models.AutoField(primary_key=True)\n    Date = models.DateField('Date')\n    Total_deposite = models.DecimalField(decimal_places=2, max_digits=250)\n    Total_withdrawal = models.DecimalField(decimal_places=2, max_digits=250)\n    Total_balance = models.DecimalField(decimal_places=2, max_digits=250)\n    class Meta:\n        managed = False\n        db_table = \"GeneralReportBalanceDate\"\t\nclass RevenueType(models.Model):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "RevenueType",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class RevenueType(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code = models.CharField(max_length = 150)\n    Revenue_title_amharic = models.CharField(max_length = 150)\n    Revenue_title_english = models.CharField(max_length = 150)\n    Registered_date = models.CharField(max_length=150,verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by11111\")\n    Registered_by = CurrentUserField(related_name=\"pl_by11111\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "ExpenseType",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class ExpenseType(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code = models.CharField(max_length = 150)\n    Expense_title_amharic = models.CharField(max_length = 150)\n    Expense_title_english = models.CharField(max_length = 150)\n    Registered_date = models.CharField(max_length=150,verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by1111111\")\n    Registered_by = CurrentUserField(related_name=\"pl_by1111111\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "RevenueReport",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class RevenueReport(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code_id = models.CharField(max_length = 150)\n    Code = models.CharField(max_length = 150)\n    Balances = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    def __str__(self):\n        return \"%s\" % (self.id)\n    class Meta:\n        verbose_name=\"All Revenue Report\"",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "RevenueReportDate",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class RevenueReportDate(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code_id = models.CharField(max_length = 150)\n    Code = models.CharField(max_length = 150)\n    Balances = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    def __str__(self):\n        return \"%s\" % (self.id)\n    class Meta:\n        verbose_name=\"Revenue Report Date\"",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "ExpenseReport",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class ExpenseReport(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code_id = models.CharField(max_length = 150)\n    Code = models.CharField(max_length = 150)\n    Balances = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    def __str__(self):\n        return \"%s\" % (self.id)\n    class Meta:\n        verbose_name=\"All Expense Report\"",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "ExpenseReportDate",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class ExpenseReportDate(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code_id = models.CharField(max_length = 150)\n    Code = models.CharField(max_length = 150)\n    Balances = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    def __str__(self):\n        return \"%s\" % (self.id)\n    class Meta:\n        verbose_name=\"Expense Report Date\"",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "AllRevenue",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class AllRevenue(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code = models.ForeignKey(RevenueType, on_delete=models.CASCADE)\n    Amount = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    Balance = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    Registered_date = models.CharField(max_length=150,verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by111111\")\n    Registered_by = CurrentUserField(related_name=\"pl_by111111\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "AllExpense",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.processolutions.models",
        "description": "uploads.2024.04.30.officesolution.processolutions.models",
        "peekOfCode": "class AllExpense(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Dates = models.DateField('Date')\n    Code = models.ForeignKey(ExpenseType, on_delete=models.CASCADE)\n    Amount = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    Balance = models.DecimalField(decimal_places=2, max_digits=250, default=0)\n    Registered_date = models.CharField(max_length=150, verbose_name=\"Registered at\")\n    Updated_by = CurrentUserField(related_name=\"up_by11111111\")\n    Registered_by = CurrentUserField(related_name=\"pl_by11111111\")\n    def __str__(self):",
        "detail": "uploads.2024.04.30.officesolution.processolutions.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.staff.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.staff.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StaffProfile',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.staff.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "StaffAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "class StaffAdmin(ImportExportModelAdmin):\n\tpass\n\tfields = [('First_name','Father_name'),('Last_name','Educational_level'),('Position','Employee_status'),'Contact_number']\n\tlist_display = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Position']\n\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tfields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tfields = [('First_name','Father_name'),('Last_name','Educational_level'),('Position','Employee_status'),'Contact_number']\n\tlist_display = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Position']\n\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tlist_display = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Position']\n\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tsearch_fields = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Position']\n\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tlist_filter = ['Position']\n\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tlist_display_links = ['id','First_name','Father_name','Last_name','Contact_number','Educational_level','Position','Employee_status','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StaffProfile, StaffAdmin)",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StaffProfile, StaffAdmin)",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\t\tmodel = StaffProfile\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StaffProfile, StaffAdmin)",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StaffProfile, StaffAdmin)",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.staff.admin",
        "description": "uploads.2024.04.30.officesolution.staff.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StaffProfile, StaffAdmin)",
        "detail": "uploads.2024.04.30.officesolution.staff.admin",
        "documentation": {}
    },
    {
        "label": "StaffConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.staff.apps",
        "description": "uploads.2024.04.30.officesolution.staff.apps",
        "peekOfCode": "class StaffConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'staff'",
        "detail": "uploads.2024.04.30.officesolution.staff.apps",
        "documentation": {}
    },
    {
        "label": "StaffProfile",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.staff.models",
        "description": "uploads.2024.04.30.officesolution.staff.models",
        "peekOfCode": "class StaffProfile(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    First_name = models.CharField(max_length = 150)\n    Father_name = models.CharField(max_length = 150)\n    Last_name = models.CharField(max_length = 150)\n    Educational_level  = models.CharField(max_length = 150)\n    Position  = models.CharField(max_length = 150)\n    Employee_status = models.CharField(max_length = 150)\n    Contact_number = models.CharField(max_length = 150)\n    # image = models.ImageField(blank=True, null=True, upload_to=\"Staff_photo/%Y%M%D/\")",
        "detail": "uploads.2024.04.30.officesolution.staff.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.stock.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.stock.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='StockManagement',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.stock.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MaterialAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "class MaterialAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Name','Model'),('Material_status','Remark')],\n        }),\n        ('Detail information', {\n            'fields': [('Inch','Quantity','Individual_price')],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Name','Model'),('Material_status','Remark')],\n        }),\n        ('Detail information', {\n            'fields': [('Inch','Quantity','Individual_price')],\n        }),\n    ]\n\tlist_display = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tlist_display = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Name','Inch']\n\tlist_display_links = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Total_price','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tsearch_fields = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Name','Inch']\n\tlist_display_links = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Total_price','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tlist_filter = ['Name','Inch']\n\tlist_display_links = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Total_price','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tlist_display_links = ['id','Name','Inch','Model','Quantity','Individual_price','Total_price','Material_status','Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Total_price','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\treadonly_fields = ('id','Total_price','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StockManagement, MaterialAdmin)",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StockManagement, MaterialAdmin)",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\t\tmodel = StockManagement\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StockManagement, MaterialAdmin)",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StockManagement, MaterialAdmin)",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.stock.admin",
        "description": "uploads.2024.04.30.officesolution.stock.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(StockManagement, MaterialAdmin)",
        "detail": "uploads.2024.04.30.officesolution.stock.admin",
        "documentation": {}
    },
    {
        "label": "StockConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.stock.apps",
        "description": "uploads.2024.04.30.officesolution.stock.apps",
        "peekOfCode": "class StockConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'stock'",
        "detail": "uploads.2024.04.30.officesolution.stock.apps",
        "documentation": {}
    },
    {
        "label": "StockManagement",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.stock.models",
        "description": "uploads.2024.04.30.officesolution.stock.models",
        "peekOfCode": "class StockManagement(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Name = models.CharField(max_length = 150)\n    Inch = models.PositiveIntegerField()\n    Model = models.CharField(max_length = 150)\n    Quantity = models.PositiveIntegerField()\n    Individual_price = models.PositiveIntegerField()\n    Total_price = models.PositiveIntegerField()\n    Material_status = models.CharField(max_length = 150)\n    Remark = models.CharField(max_length = 150, blank=True)",
        "detail": "uploads.2024.04.30.officesolution.stock.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.vault.migrations.0001_initial",
        "description": "uploads.2024.04.30.officesolution.vault.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='VaultControl',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),",
        "detail": "uploads.2024.04.30.officesolution.vault.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.vault.migrations.0002_alter_vaultcontrol_date",
        "description": "uploads.2024.04.30.officesolution.vault.migrations.0002_alter_vaultcontrol_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('vault', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='vaultcontrol',\n            name='Date',\n            field=models.DateField(verbose_name='ቀን'),\n        ),",
        "detail": "uploads.2024.04.30.officesolution.vault.migrations.0002_alter_vaultcontrol_date",
        "documentation": {}
    },
    {
        "label": "VaultControlAdmin",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "class VaultControlAdmin(ImportExportModelAdmin):\n\tpass\n\tfieldsets = [\n        ('General informations', {\n            'fields': [('Turned_total','Date'),('Income','Total_income')],\n        }),\n        ('Detail information', {\n            'fields': [('Cost','Balance')],\n        }),\n    ]",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tfieldsets",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tfieldsets = [\n        ('General informations', {\n            'fields': [('Turned_total','Date'),('Income','Total_income')],\n        }),\n        ('Detail information', {\n            'fields': [('Cost','Balance')],\n        }),\n    ]\n\tlist_display = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tlist_display = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\tsearch_fields = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tsearch_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tsearch_fields = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\tlist_filter = ['Date']\n\tlist_display_links = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_filter",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tlist_filter = ['Date']\n\tlist_display_links = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_display_links",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tlist_display_links = ['id','Date', 'Turned_total', 'Income', 'Total_income', 'Cost', 'Balance', 'Remark','Registered_at','Updated_by','Registered_by']\n\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\treadonly_fields",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\treadonly_fields = ('id','Registered_at','Updated_by','Registered_by')\n\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_per_page",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tlist_per_page = 10\n\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(VaultControl, VaultControlAdmin)",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\tlist_select_related",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\tlist_select_related = True\n\tclass Meta:\n\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(VaultControl, VaultControlAdmin)",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\t\tmodel",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\t\tmodel = VaultControl\t\n\tdef save_model(self, request, obj, form, change):\n\t\tif change:\n\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(VaultControl, VaultControlAdmin)",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Updated_by",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\t\t\tobj.Updated_by = request.user\n\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(VaultControl, VaultControlAdmin)",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "\t\t\tobj.Registered_at",
        "kind": 5,
        "importPath": "uploads.2024.04.30.officesolution.vault.admin",
        "description": "uploads.2024.04.30.officesolution.vault.admin",
        "peekOfCode": "\t\t\tobj.Registered_at = datetime.now()\n\t\tobj.save()\nadmin.site.register(VaultControl, VaultControlAdmin)",
        "detail": "uploads.2024.04.30.officesolution.vault.admin",
        "documentation": {}
    },
    {
        "label": "VaultConfig",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.vault.apps",
        "description": "uploads.2024.04.30.officesolution.vault.apps",
        "peekOfCode": "class VaultConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'vault'",
        "detail": "uploads.2024.04.30.officesolution.vault.apps",
        "documentation": {}
    },
    {
        "label": "VaultControl",
        "kind": 6,
        "importPath": "uploads.2024.04.30.officesolution.vault.models",
        "description": "uploads.2024.04.30.officesolution.vault.models",
        "peekOfCode": "class VaultControl(models.Model):\n    id = models.AutoField(primary_key = True, unique = True)\n    Date = models.DateField('ቀን')\n    Turned_total = models.CharField('የዞረ', max_length=150)\n    Income = models.CharField('ገቢ', max_length=150)\n    Total_income = models.CharField('ጠ/ገቢ', max_length=150)\n    Cost = models.CharField('ወጪ', max_length=150)\n    Balance = models.CharField('ከወጪ ቀሪ', max_length=150)\n    Remark = models.CharField('ምርመራ', max_length = 150, blank=True)\n    Registered_at = models.DateTimeField(auto_now=True, verbose_name=\"Registered at\")",
        "detail": "uploads.2024.04.30.officesolution.vault.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "uploads.2024.04.30.officesolution.manage",
        "description": "uploads.2024.04.30.officesolution.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'officesolution.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "uploads.2024.04.30.officesolution.manage",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "water.asgi",
        "description": "water.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "water.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# STATIC_DIR = os.path.join(BASE_DIR, 'templates')\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-ze!gb-!-1wr1@xmm8kfxpg@(05a5*dqh(mg1rb7odc($e2#^=y'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-ze!gb-!-1wr1@xmm8kfxpg@(05a5*dqh(mg1rb7odc($e2#^=y'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nINSTALLED_APPS = [\n    # 'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nINSTALLED_APPS = [\n    # 'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']\n# Application definition\nINSTALLED_APPS = [\n    # 'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # 'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'import_export',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django_currentuser.middleware.ThreadLocalUserMiddleware',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ORIGIN_WHITELIST",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "CORS_ORIGIN_WHITELIST = (\n    \"http://localhost:3000\",\n    \"http://localhost:8000\",\n)\nCSRF_TRUSTED_ORIGINS = [\"http://localhost:3000\"]\nROOT_URLCONF = 'water.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\"http://localhost:3000\"]\nROOT_URLCONF = 'water.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "ROOT_URLCONF = 'water.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.oracle',\n        'NAME': 'xe',\n        'USER': 'system',\n        'PASSWORD': 'system',\n        'HOST': 'localhost',\n        'PORT': '1521',\n    }\n}",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR/'media'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "water.settings",
        "description": "water.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "water.settings",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "water.urls",
        "description": "water.urls",
        "peekOfCode": "admin.site.site_header = \"DWBMS Administration\"\nadmin.site.site_title = \"DWBMS Administration Portal\"\nadmin.site.index_title = \"Welcome to DWBMS Administration Portal\"\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\nif settings.DEBUG:",
        "detail": "water.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "water.urls",
        "description": "water.urls",
        "peekOfCode": "admin.site.site_title = \"DWBMS Administration Portal\"\nadmin.site.index_title = \"Welcome to DWBMS Administration Portal\"\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "water.urls",
        "documentation": {}
    },
    {
        "label": "admin.site.index_title",
        "kind": 5,
        "importPath": "water.urls",
        "description": "water.urls",
        "peekOfCode": "admin.site.index_title = \"Welcome to DWBMS Administration Portal\"\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "water.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "water.urls",
        "description": "water.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "water.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "water.wsgi",
        "description": "water.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "water.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'water.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]